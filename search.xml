<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>quick sort</title>
      <link href="../../p/quick-sort.html"/>
      <url>../../p/quick-sort.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        self.nums = nums</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, lo, hi)</span>:</span></span><br><span class="line">        pivot = self.nums[hi]</span><br><span class="line">        i = lo</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(lo, hi):</span><br><span class="line">            <span class="keyword">if</span> self.nums[j] &lt; pivot:</span><br><span class="line">                <span class="comment"># i停留在 大于pivot的数， 等到j找到下一个小于pivot的数交换</span></span><br><span class="line">                self.nums[i], self.nums[j] = self.nums[j], self.nums[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        self.nums[i], self.nums[hi] = self.nums[hi], self.nums[i]</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self, lo, hi)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> lo &gt;= hi:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        idx = self.partition(lo, hi)</span><br><span class="line">        self.sort(lo, idx - <span class="number">1</span>)</span><br><span class="line">        self.sort(idx + <span class="number">1</span>, hi)</span><br><span class="line"></span><br><span class="line">nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">7</span>]</span><br><span class="line">quicksort = QuickSort(nums)</span><br><span class="line">quicksort.sort(<span class="number">0</span>, len(nums) - <span class="number">1</span>)</span><br><span class="line">print(quicksort.nums)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> sort algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Consistent Hashing</title>
      <link href="../../p/Consistent-Hashing.html"/>
      <url>../../p/Consistent-Hashing.html</url>
      
        <content type="html"><![CDATA[<p><code>Distributed Hash Table</code> (DHT) is one of the fundamental components used in distributed scalable systems. Hash Tables need a key, a value, and a hash function where hash function maps the key to a location where the value is stored:</p><blockquote><p>index = hash_function(key)</p></blockquote><p>Suppose we are designing a distributed caching system. Given “n” cache servers, an intuitive hash function would be “key % n”. It is simple and commonly used. But it has two major drawbacks:</p><ol><li>It is NOT horizontally scalable. Whenever a new cache host is added to the system, all existing mappings are broken. It will be a pain point in maintenance if the caching system contains lots of data. Practically, it becomes difficult to schedule a downtime to update all caching mappings;</li><li>It may NOT be load balanced, especially for non-uniformly distributed data. In practice, it can be easily assumed that the data will not be distributed uniformly. For the caching system, it translates into some caches becoming hot and saturated while the others idle and are almost empty;</li></ol><p>In such situations, consistent hashing is a good way to improve the caching system.</p><h2 id="What-is-Consistent-Hashing"><a href="#What-is-Consistent-Hashing" class="headerlink" title="What is Consistent Hashing?"></a>What is Consistent Hashing?</h2><p>Consistent hashing is a very useful strategy for distributed caching systems and DHTs. It allows us to distribute data across a cluster in such a way that will minimize reorganization when nodes are added or removed. Hence, the caching system will be easier to scale up or scale down.</p><p>In Consistent Hashing, when the hash table is resized (e.g., a new cache host is added to the system), only “k/n” keys need to be remapped where “k” is the total number of keys and “n” is the total number of servers. Recall that in a caching system using the “mod” as the hash function, all keys need to be remapped.</p><p>In Consistent Hashing, objects are mapped to the same host if possible. When a host is removed from the system, the objects on that host are shared by other hosts; when a new host is added, it takes its share from a few hosts without touching other’s shares.</p><a id="more"></a><h2 id="How-does-It-Work"><a href="#How-does-It-Work" class="headerlink" title="How does It Work?"></a>How does It Work?</h2><p>As a typical hash function, consistent hashing maps a key to an integer. Suppose the output of the hash function is in the range of [0, 256]. Imagine that the integers in the range are placed on a ring such that the values are wrapped around.</p><p>Here’s how consistent hashing works:</p><ol><li>Given a list of cache servers, hash them to integers in the range;</li><li>To map a key to a server,<ul><li>Hash it to a single integer;</li><li>Move clockwise on the ring until finding the first cache it encounters;</li><li>That cache is the one that contains the key. See animation below as an example: key1 maps to cache A; key2 maps to cache C;</li></ul></li></ol><p><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Consistent-Hashing/08.png" alt><br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Consistent-Hashing/09.png" alt><br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Consistent-Hashing/10.png" alt><br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Consistent-Hashing/11.png" alt><br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Consistent-Hashing/12.png" alt></p><p>To add a new server, say D, keys that were originally residing at C will be split. Some of them will be shifted to D, while other keys will not be touched.<br>To remove a cache or, if a cache fails, say A, all keys that were originally mapped to A will fall into B, and only those keys need to be moved to B; other keys will not be affected.</p><p>For load balancing, as we discussed in the beginning, the real data is essentially randomly distributed and thus may not be uniform. It may make the keys on caches unbalanced.<br>To handle this issue, we add “virtual replicas” for caches. Instead of mapping each cache to a single point on the ring, we map it to multiple points on the ring, i.e., replicas. This way, each cache is associated with multiple portions of the ring.<br>If the hash function “mixes well”, as the number of replicas increases, the keys will be more balanced.</p>]]></content>
      
      
      
        <tags>
            
            <tag> SystemDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>segment tree</title>
      <link href="../../p/segment-tree.html"/>
      <url>../../p/segment-tree.html</url>
      
        <content type="html"><![CDATA[<p>线段树是一种非常灵活的数据结构，它可以用于解决多种范围查询问题，比如在对数时间内从数组中找到最小值、最大值、总和、最大公约数、最小公倍数等。<br>线段树既可以用数组也可以用树来实现。对于数组实现，如果索引 i 处的元素不是一个叶节点，那么其左子节点和右子节点分别存储在索引为 2i 和 2i+1 的元素处。<br>我们从叶节点开始，用输入数组的元素 a[0,1,…,n−1] 初始化它们。然后我们逐步向上移动到更高一层来计算父节点的和，直到最后到达线段树的根节点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">class NumArray:</span><br><span class="line">    def __init__(self, nums):</span><br><span class="line">        n = len(nums)</span><br><span class="line">        self.tree = [0] * 2 * n</span><br><span class="line">        i, j = n, 0</span><br><span class="line">        while i &lt; 2 * n:</span><br><span class="line">            self.tree[i] = nums[j]</span><br><span class="line">            i += 1</span><br><span class="line">            j += 1</span><br><span class="line">        for i in range(n - 1, 0, -1): # 2n - 1个节点 所以 i 只用取到1</span><br><span class="line">            self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1]</span><br><span class="line">    </span><br><span class="line">    def  update(self, i, val):</span><br><span class="line">        n = len(self.tree) // 2</span><br><span class="line">        i += n</span><br><span class="line">        self.tree[i] = val</span><br><span class="line">        while i &gt; 0:</span><br><span class="line">            left, right = i, i</span><br><span class="line">            if i &amp; 1:</span><br><span class="line">                left = i - 1 # i 为偶数就是左节点</span><br><span class="line">            else:</span><br><span class="line">                right = i + 1</span><br><span class="line">            self.tree[i // 2] = self.tree[left] + self.tree[right]</span><br><span class="line">            i //= 2</span><br><span class="line"></span><br><span class="line">    def  sumRange(self, i, j):</span><br><span class="line">        n = len(self.tree) // 2</span><br><span class="line">        i += n</span><br><span class="line">        j += n</span><br><span class="line">        res = 0</span><br><span class="line">        while i &lt;= j:</span><br><span class="line">            if i &amp; 1:</span><br><span class="line">                res += self.tree[i] # 奇数右节点直接加</span><br><span class="line">                i += 1</span><br><span class="line">            if not (j &amp; 1):</span><br><span class="line">                res += self.tree[j]</span><br><span class="line">                j -= 1</span><br><span class="line">            i //= 2</span><br><span class="line">            j //= 2</span><br><span class="line">        return res</span><br><span class="line"></span><br><span class="line">nums = [1, 3, 5, 7, 9]</span><br><span class="line">rangeSum = NumArray(nums)</span><br><span class="line">print(rangeSum.sumRange(2, 3))</span><br><span class="line">rangeSum.update(1, 6)</span><br><span class="line">print(rangeSum.sumRange(1, 3))</span><br></pre></td></tr></table></figure><p>因为我们在 for 循环的每次迭代中计算一个节点的和。而一个线段树中大约有 2n 个节点。<br>这可以通过以下方式证明：具有 n 个元素的数组线段树有<br>n 个叶节点（数组元素本身）。每一层中的节点数是下面一层中节点数的一半。<br>因此，如果我们按层对节点数求和，我们将得到：n+n/2+n/4+n/8+…+1≈2n</p><p>空间复杂度：O(n)，我们用了 2n 的额外空间来存储整个线段树。</p><h2 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h2><p><a href="https://leetcode-cn.com/problems/range-sum-query-mutable/" target="_blank" rel="noopener">307. Range Sum Query - Mutable</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CodingInterviews </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Step by Step Guide</title>
      <link href="../../p/A-Step-by-Step-Guide.html"/>
      <url>../../p/A-Step-by-Step-Guide.html</url>
      
        <content type="html"><![CDATA[<p>A lot of software engineers struggle with System Design Interviews (SDIs) primarily because of three reasons:</p><ol><li>The unstructured nature of SDIs, where the candidates are asked to work on an open-ended design problem that doesn’t have a standard answer;</li><li>Candidates lack experience in developing complex and large scale systems;</li><li>Candidates did not spend enough time to prepare for SDIs;</li></ol><p>Like coding interviews, candidates who haven’t put a deliberate effort to prepare for SDIs, mostly perform poorly, especially at top companies like Google, Facebook, Amazon, Microsoft, etc. In these companies, candidates who do not perform above average have a limited chance to get an offer. On the other hand, a good performance always results in a better offer (higher position and salary) since it shows the candidate’s ability to handle a complex system.</p><a id="more"></a><h2 id="Step-1-Requirements-Clarifications"><a href="#Step-1-Requirements-Clarifications" class="headerlink" title="Step 1: Requirements Clarifications"></a>Step 1: Requirements Clarifications</h2><p>It is always a good idea to ask questions about the exact scope of the problem we are trying to solve. Design questions are mostly open-ended, and they don’t have ONE correct answer. That’s why clarifying ambiguities early in the interview becomes critical. Candidates who spend enough time to define the end goals of the system always have a better chance to be successful in the interview. Also, since we only have 35~40 minutes to design a (supposedly) large system, we should clarify what parts of the system we will be focusing on.</p><p>Let’s expand this with an actual example of designing a Twitter-like service. Here are some questions for designing Twitter that should be answered before moving on to the next steps:</p><ul><li>Will users of our service be able to post tweets and follow other people?</li><li>Should we also design to create and display the user’s timeline?</li><li>Will tweets contain photos and videos?</li><li>Are we focusing on the backend only, or are we developing the frontend too?</li><li>Will users be able to search tweets?</li><li>Do we need to display hot trending topics?</li><li>Will there be any push notification for new (or important) tweets?</li></ul><p>All such questions will determine how our end design will look like.</p><h2 id="Step-2-Back-Of-The-Envelope-Estimation"><a href="#Step-2-Back-Of-The-Envelope-Estimation" class="headerlink" title="Step 2: Back-Of-The-Envelope Estimation"></a>Step 2: Back-Of-The-Envelope Estimation</h2><p>It is always a good idea to estimate the scale of the system we’re going to design. This will also help later when we focus on scaling, partitioning, load balancing, and caching:</p><ul><li>What scale is expected from the system (e.g., number of new tweets, number of tweet views, number of timeline generations per second., etc.)?</li><li>How much storage will we need? We will have different storage requirements if users can have photos and videos in their tweets;</li><li>What network bandwidth usage are we expecting? This will be crucial in deciding how we will manage traffic and balance load between servers;</li></ul><h2 id="Step-3-System-Interface-Definition"><a href="#Step-3-System-Interface-Definition" class="headerlink" title="Step 3: System Interface Definition"></a>Step 3: System Interface Definition</h2><p>Define what APIs are expected from the system. This will establish the exact contract expected from the system and ensure if we haven’t gotten any requirements wrong. Some examples of APIs for our Twitter-like service will be:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">postTweet(user_id, tweet_data, tweet_location, user_location, timestamp, ...)</span><br><span class="line">generateTimeline(user_id, current_time, user_location, ...)</span><br><span class="line">markTweetFavorite(user_id, tweet_id, timestamp, ...)</span><br></pre></td></tr></table></figure><h2 id="Step-4-Defining-Data-Model"><a href="#Step-4-Defining-Data-Model" class="headerlink" title="Step 4: Defining Data Model"></a>Step 4: Defining Data Model</h2><p>Defining the data model in the early part of the interview will clarify how data will flow between different system components. Later, it will guide for data partitioning and management. The candidate should identify various entities of the system, how they will interact with each other, and different aspects of data management like storage, transportation, encryption, etc. Here are some entities for our Twitter-like service:</p><ul><li><strong>User</strong>: UserID, Name, Email, DoB, CreationData, LastLogin, etc.;</li><li><strong>Tweet</strong>: TweetID, Content, TweetLocation, NumberOfLikes, TimeStamp, etc.;</li><li><strong>UserFollow</strong>: UserID1, UserID2;</li><li><strong>FavoriteTweets</strong>: UserID, TweetID, TimeStamp;</li></ul><p>Which database system should we use? Will NoSQL like Cassandra best fit our needs, or should we use a MySQL-like solution? What kind of block storage should we use to store photos and videos?</p><h2 id="Step-5-High-Level-Design"><a href="#Step-5-High-Level-Design" class="headerlink" title="Step 5: High-Level Design"></a>Step 5: High-Level Design</h2><p>Draw a block diagram with 5-6 boxes representing the core components of our system. We should identify enough components that are needed to solve the actual problem from end-to-end.</p><p>For Twitter, at a high level, we will need multiple application servers to serve all the read/write requests with load balancers in front of them for traffic distributions. If we’re assuming that we will have a lot more read traffic (compared to write), we can decide to have separate servers to handle these scenarios. On the backend, we need an efficient database that can store all the tweets and support a huge number of reads. We will also need a distributed file storage system for storing photos and videos:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/A-Step-By-Step-Guide/18.png" alt></p><h2 id="Step-6-Detailed-Design"><a href="#Step-6-Detailed-Design" class="headerlink" title="Step 6: Detailed Design"></a>Step 6: Detailed Design</h2><p>Dig deeper into two or three major components; the interviewer’s feedback should always guide us to what parts of the system need further discussion. We should present different approaches, their Pros and Cons, and explain why we will prefer one approach over the other. Remember, there is no single answer; the only important thing is to consider tradeoffs between different options while keeping system constraints in mind:</p><ul><li>Since we will be storing a massive amount of data, how should we partition our data to distribute it to multiple databases? Should we try to store all the data of a user on the same database? What issue could it cause?</li><li>How will we handle hot users who tweet a lot or follow lots of people?</li><li>Since users’ timeline will contain the most recent (and relevant) tweets, should we try to store our data so that it is optimized for scanning the latest tweets?</li><li>How much and at which layer should we introduce cache to speed things up?</li><li>What components need better load balancing?</li></ul><h2 id="Step-7-Identifying-and-Resolving-Bottlenecks"><a href="#Step-7-Identifying-and-Resolving-Bottlenecks" class="headerlink" title="Step 7: Identifying and Resolving Bottlenecks"></a>Step 7: Identifying and Resolving Bottlenecks</h2><p>Try to discuss as many bottlenecks as possible and different approaches to mitigate them:</p><ul><li>Is there any single point of failure in our system? What are we doing to mitigate it?</li><li>Do we have enough replicas of the data so that we can still serve our users if we lose a few servers?</li><li>Similarly, do we have enough copies of different services running such that a few failures will not cause a total system shutdown?</li><li>How are we monitoring the performance of our service? Do we get alerts whenever critical components fail or their performance degrades?</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> SystemDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest Quick Start Guide</title>
      <link href="../../p/pytest-Quick-Start-Guide.html"/>
      <url>../../p/pytest-Quick-Start-Guide.html</url>
      
        <content type="html"><![CDATA[<h2 id="Writing-and-Running-Tests"><a href="#Writing-and-Running-Tests" class="headerlink" title="Writing and Running Tests"></a>Writing and Running Tests</h2><ul><li>Organizing files and packages</li><li>Useful command-line options</li><li>Configuration: pytest.ini file</li></ul><h3 id="Installing-pytest"><a href="#Installing-pytest" class="headerlink" title="Installing pytest"></a>Installing pytest</h3><p><a href="https://packaging.python.org/guides/installing-using-pip-and-virtualenv/" target="_blank" rel="noopener">https://packaging.python.org/guides/installing-using-pip-and-virtualenv/</a><br>python -m venv .env<br>source .env/bin/activate<br>pip install pytest<br>pytest –version</p><h3 id="Writing-and-running-tests"><a href="#Writing-and-running-tests" class="headerlink" title="Writing and running tests"></a>Writing and running tests</h3><p>Note that there’s no need to create classes; just simple functions and plain assert statements are enough, but if you want to use classes to group tests you can do so:</p><pre><code>class TestMechanics:    def test_player_hit(self):        ...    def test_player_health_flask(self):        ...</code></pre><p>Grouping tests can be useful when you want to put a number of tests under the same scope: you can execute tests based on the class they are in, apply markers to all of the tests in a class (Chapter 3, Markers and Parametrization), and create fixtures bound to a class (Chapter 4, Fixtures).</p><h3 id="Running-tests"><a href="#Running-tests" class="headerlink" title="Running tests"></a>Running tests</h3><blockquote><p>pytest</p></blockquote><p>This will find all of the test_*.py and *_test.py modules in the current directory and below recursively, and will run all of the tests found in those files<br>You can reduce the search to specific directories</p><blockquote><p>pytest tests/core tests/contrib</p></blockquote><p>You can also mix any number of files and directories:</p><blockquote><p>pytest tests/core tests/contrib/test_text_plugin.py</p></blockquote><p>You can execute specific tests by using the syntax <test-file>::<test-function-name>:</test-function-name></test-file></p><blockquote><p>pytest tests/core/test_core.py::test_regex_matching</p></blockquote><p>You can execute all of the test methods of a test class:</p><blockquote><p>pytest tests/contrib/test_text_plugin.py::TestPluginHooks</p></blockquote><p>You can execute a specific test method of a test class using the syntax <test-file>::<test-class>::<test-method-name>:</test-method-name></test-class></test-file></p><blockquote><p>pytest tests/contrib/test_text_plugin.py::TestPluginHooks::test_registration</p></blockquote><p>show a more verbose output, -v</p><blockquote><p> pytest tests/core -v</p></blockquote><p>To see which tests there are without running them, use the –collect-only  flag:<br>–collect-only is especially useful if you want to execute a specific test but can’t remember its exact name.<br>pytest tests/core –collect-only</p><h3 id="Powerful-asserts"><a href="#Powerful-asserts" class="headerlink" title="Powerful asserts"></a>Powerful asserts</h3><p>Contrary to other frameworks, you don’t need to remember various self.assert* or self.expect* functions.</p><p>here’s an example of a failure:</p><p><strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong> test_default_health <strong><strong><strong><strong><strong>____</strong></strong></strong></strong></strong></p><pre><code>def test_default_health():    health = get_default_health(&apos;warrior&apos;)</code></pre><blockquote><pre><code>assert health == 95</code></pre><p>E       assert 80 == 95</p></blockquote><p>tests\test_assert_demo.py:25: AssertionError</p><h4 id="Text-differences"><a href="#Text-differences" class="headerlink" title="Text differences"></a>Text differences</h4><p>When showing the explanation for short strings, pytest uses a simple difference method:<br>E         - warrior<br>E         + sorcerer<br>Longer strings show a smarter delta, using difflib.ndiff to quickly spot the differences<br>E       AssertionError: assert ‘A battle-har… and weapons.’ == ‘A battle-hard… and weapons.’<br>E         - A battle-hardened veteran, favors heavy armor and weapons.<br>E         ?                            ^ ^^^^<br>E         + A battle-hardened veteran, can equip heavy armor and weapons.<br>E         ?                            ^ ^^^^^^^<br>Multiline strings are also treated specially:<br>E       AssertionError: assert ‘A seasoned v… \n’ == ‘A seasoned ve… \n’<br>E         - A seasoned veteran of many battles. High Strength and Dexterity<br>E         ?                                     —–<br>E         + A seasoned veteran of many battles. Strength and Dexterity<br>E           allow to yield heavy armor and weapons, as well as carry<br>E         - more equipment while keeping a light roll. Weak in magic.<br>E         ?               —————————<br>E         + more equipment. Weak in magic.</p><h4 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h4><p>Assertion failures for lists also show only differing items by default:<br>E       AssertionError: assert [‘long sword’…et’, ‘shield’] == [‘long sword’, ‘shield’]<br>E         At index 1 diff: ‘warrior set’ != ‘shield’<br>E         Left contains more items, first extra item: ‘shield’<br>E         Use -v to get the full diff</p><p>Note that pytest shows which index differs, and also that the -v flag can be used to show the complete difference between the lists:<br>E       AssertionError: assert [‘long sword’…et’, ‘shield’] == [‘long sword’, ‘shield’]<br>E         At index 1 diff: ‘warrior set’ != ‘shield’<br>E         Left contains more items, first extra item: ‘shield’<br>E         Full diff:<br>E         - [‘long sword’, ‘warrior set’, ‘shield’]<br>E         ?               —————<br>E         + [‘long sword’, ‘shield’]</p><h4 id="Dictionaries-and-sets"><a href="#Dictionaries-and-sets" class="headerlink" title="Dictionaries and sets"></a>Dictionaries and sets</h4><p>Dictionaries are probably one of the most used data structures in Python, so, unsurprisingly, pytest has specialized representation for them:<br>E       AssertionError: assert {‘knight’: 95…’warrior’: 85} == {‘sorcerer’: 50, ‘warrior’: 85}<br>E         Omitting 1 identical items, use -vv to show<br>E         Differing items:<br>E         {‘sorcerer’: 55} != {‘sorcerer’: 50}<br>E         Left contains more items:<br>E         {‘knight’: 95}<br>E         Use -v to get the full diff</p><p>E         Extra items in the left set:<br>E         ‘knight’</p><h3 id="How-does-pytest-do-it"><a href="#How-does-pytest-do-it" class="headerlink" title="How does pytest do it?"></a>How does pytest do it?</h3><p>By default, Python’s assert statement does not provide any details when it fails, but as we just saw, pytest shows a lot of information about the variables and expressions involved in a failed assertion. So how does pytest do it?</p><p>Pytest is able to provide useful exceptions because it implements a mechanism called assertion rewriting.<br>ssertion rewriting works by installing a custom import hook that intercepts the standard Python import mechanism. When pytest detects that a test file (or plugin) is about to be imported, instead of loading the module, it first compiles the source code into an abstract syntax tree (AST) using the built-in ast module. Then, it searches for any assert statements and rewrites them so that the variables used in the expression are kept so that they can be used to show more helpful messages if the assertion fails. Finally, it saves the rewritten pyc file to disk for caching</p><h4 id="Checking-exceptions-pytest-raises"><a href="#Checking-exceptions-pytest-raises" class="headerlink" title="Checking exceptions: pytest.raises"></a>Checking exceptions: pytest.raises</h4>]]></content>
      
      
      
        <tags>
            
            <tag> pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Designing Facebook Messenger</title>
      <link href="../../p/Designing-Facebook-Messenger.html"/>
      <url>../../p/Designing-Facebook-Messenger.html</url>
      
        <content type="html"><![CDATA[<h2 id="What-is-Facebook-Messenger"><a href="#What-is-Facebook-Messenger" class="headerlink" title="What is Facebook Messenger?"></a>What is Facebook Messenger?</h2><p>Facebook Messenger is a software application which provides text-based instant messaging services to its users. Messenger users can chat with their Facebook friends both from cell-phones and Facebook’s website.</p><h2 id="Requirements-and-Goals-of-the-System"><a href="#Requirements-and-Goals-of-the-System" class="headerlink" title="Requirements and Goals of the System"></a>Requirements and Goals of the System</h2><p>Our Messenger should meet the following requirements:<br><strong>Functional Requirements</strong>:</p><ol><li>Messenger should support one-on-one conversations between users;</li><li>Messenger should keep track of the online/offline statuses of its users;</li><li>Messenger should support the persistent storage of chat history;</li></ol><p><strong>Non-Functional Requirements</strong>:</p><ol><li>Users should have real-time chat experience with minimum latency;</li><li>Our system should be highly consistent; users should be able to see the same chat history on all their devices;</li><li>Messenger’s high availability is desirable; we can tolerate lower availability in the interest of consistency;</li></ol><p><strong>Extended Requirements</strong>:</p><ol><li>Group Chats: Messenger should support multiple people talking to each other in a group;</li><li>Push notifications: Messenger should be able to notify users of new messages when they are offline;</li></ol><a id="more"></a><h2 id="Capacity-Estimation-and-Constraints"><a href="#Capacity-Estimation-and-Constraints" class="headerlink" title="Capacity Estimation and Constraints"></a>Capacity Estimation and Constraints</h2><p>Let’s assume that we have 500 million daily active users and on average each user sends 40 messages daily; this gives us 20 billion messages per day.</p><p><strong>Storage estimates</strong>: Let’s assume that on average a message is 100 bytes, so to store all the messages for one day we would need 2TB of storage:</p><blockquote><p>20 billion messages * 100 bytes = 2 TB/day</p></blockquote><p>To store five years of chat history, we would need 3.6 petabytes of storage:</p><blockquote><p>2 TB * 365 days * 5 years ≈ 3.6 PB</p></blockquote><p>Other than the chat messages, we would also need to store users’ information, messages’ metadata (ID, Timestamp, etc.). Not to mention, the above calculation doesn’t take data compression and replication into consideration.</p><p><strong>Bandwidth estimates</strong>: If our service is getting 2TB of data every day, this will give us 25MB of incoming data for each second:</p><blockquote><p>2 TB / 86400 sec ≈ 25 MB/s</p></blockquote><p>Since each incoming message needs to go out to another user, we will need the same amount of bandwidth 25MB/s for both upload and download.</p><p><strong>High-level estimates</strong>:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-Facebook-Messenger/36.png" alt></p><h2 id="High-Level-Design"><a href="#High-Level-Design" class="headerlink" title="High-Level Design"></a>High-Level Design</h2><p>At a high level, we will need a chat server that will be the central piece, orchestrating all the communications between users. When a user wants to send a message to another user, they will connect to the chat server and send the message to the server; the server then passes that message to the other user and also stores it in the database:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-Facebook-Messenger/37.png" alt></p><p>The detailed workflow would look like this:</p><ol><li>User A sends a message to User B through the chat server;</li><li>The server receives the message and sends an acknowledgment to User A;</li><li>The server stores the message in its database and sends the message to User B;</li><li>User B receives the message and sends the acknowledgment to the server;</li><li>The server notifies User A that the message has been delivered successfully to User B;</li></ol><p><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-Facebook-Messenger/38.png" alt></p><h2 id="Detailed-Component-Design"><a href="#Detailed-Component-Design" class="headerlink" title="Detailed Component Design"></a>Detailed Component Design</h2><p>Let’s try to build a simple solution first where everything runs on one server. At the high level our system needs to handle the following use cases:</p><ol><li>Receive incoming messages and deliver outgoing messages;</li><li>Store and retrieve messages from the database;</li><li>Keep a record of which user is online or has gone offline, and notify all the relevant users about these status changes;</li></ol><p>Let’s talk about these scenarios one by one.</p><h3 id="Messages-Handling"><a href="#Messages-Handling" class="headerlink" title="Messages Handling"></a>Messages Handling</h3><p><strong>How would we efficiently send/receive messages</strong>? To send messages, a user needs to connect to the server and post messages for the other users. To get a message from the server, the user has two options:</p><ol><li>Pull model: Users can periodically ask the server if there are any new messages for them;</li><li>Push model: Users can keep a connection open with the server and can depend upon the server to notify them whenever there are new messages;</li></ol><p>If we go with our first approach, then the server needs to keep track of messages that are still waiting to be delivered, and as soon as the receiving user connects to the server to ask for any new message, the server can return all the pending messages. To minimize latency for the user, they have to check the server quite frequently, and most of the time they will be getting an empty response if there are no pending message. This will waste a lot of resources and does not look like an efficient solution;<br>If we go with our second approach, where all the active users keep a connection open with the server, then as soon as the server receives a message it can immediately pass the message to the intended user. This way, the server does not need to keep track of the pending messages, and we will have minimum latency, as the messages are delivered instantly on the opened connection.</p><p><strong>How will clients maintain an open connection with the server</strong>? We can use HTTP Long Polling or WebSockets. In long polling, clients can request information from the server with the expectation that the server may not respond immediately. If the server has no new data for the client when the poll is received, instead of sending an empty response, the server holds the request open and waits for response information to become available. Once it does have new information, the server immediately sends the response to the client, completing the open request. Upon receipt of the server response, the client can immediately issue another server request for future updates. This gives a lot of improvements in latencies, throughputs, and performance. The long polling request can timeout or can receive a disconnect from the server, in that case, the client has to open a new request.</p><p><strong>How can the server keep track of all the opened connection to redirect messages to the users efficiently</strong>? The server can maintain a hash table, where “key” would be the UserID and “value” would be the connection object. So whenever the server receives a message for a user, it looks up that user in the hash table to find the connection object and sends the message on the open request.</p><p><strong>What will happen when the server receives a message for a user who has gone offline</strong>? If the receiver has disconnected, the server can notify the sender about the delivery failure. If it is a temporary disconnect, e.g., the receiver’s long-poll request just timed out, then we should expect a reconnect from the user. In that case, we can ask the sender to retry sending the message. This retry could be embedded in the client’s logic so that users don’t have to retype the message. The server can also store the message for a while and retry sending it once the receiver reconnects.</p><p><strong>How many chat servers we need</strong>? Let’s plan for 500 million connections at any time. Assuming a modern server can handle 50K concurrent connections at any time, we would need 10K such servers.</p><p><strong>How do we know which server holds the connection to which user</strong>? We can introduce a software load balancer in front of our chat servers; that can map each UserID to a server to redirect the request.</p><p><strong>How should the server process a “deliver message” request</strong>? The server needs to do the following things upon receiving a new message:</p><ol><li>Store the message in the database;</li><li>Send the message to the receiver;</li><li>Send an acknowledgment to the sender;</li></ol><p>The chat server will first find the server that holds the connection for the receiver and pass the message to that server to send it to the receiver. The chat server can then send the acknowledgment to the sender; we don’t need to wait for storing the message in the database (this can happen in the background).</p><p><strong>How does the messenger maintain the sequencing of the messages</strong>? We can store a timestamp with each message, which is the time the message is received by the server. This will still not ensure the correct ordering of messages for clients. The scenario where the server timestamp cannot determine the exact order of messages would look like this:</p><ol><li>User-1 sends a message M1 to the server for User-2;</li><li>The server receives M1 at T1;</li><li>Meanwhile, User-2 sends a message M2 to the server for User-1;</li><li>The server receives the message M2 at T2, such that T2 &gt; T1;</li><li>The server sends message M1 to User-2 and M2 to User-1;</li></ol><p>So User-1 will see M1 first and then M2, whereas User-2 will see M2 first and then M1.<br>To resolve this, we need to keep a sequence number with every message for each client. This sequence number will determine the exact ordering of messages for EACH user. With this solution, both clients will see a different view of the message sequence, but this view will be consistent for them on all devices.</p><h3 id="Storing-and-Retrieving-the-Messages-from-the-Database"><a href="#Storing-and-Retrieving-the-Messages-from-the-Database" class="headerlink" title="Storing and Retrieving the Messages from the Database"></a>Storing and Retrieving the Messages from the Database</h3><p>Whenever the chat server receives a new message, it needs to store it in the database. To do so, we have two options:</p><ol><li>Start a separate thread, which will work with the database to store the message;</li><li>Send an asynchronous request to the database to store the message;</li></ol><p>We have to keep certain things in mind while designing our database:</p><ol><li>How to efficiently work with the database connection pool;</li><li>How to retry failed requests;</li><li>Where to log those requests that failed even after some retries;</li><li>How to retry these logged requests (that failed after the retry) when all the issues have resolved;</li></ol><p><strong>Which storage system we should use</strong>? We need to have a database that can support a very high rate of small updates and also fetch a range of records quickly. This is required because we have a huge number of small messages that need to be inserted in the database and, while querying, a user is mostly interested in sequentially accessing the messages.<br>We cannot use RDBMS like MySQL or NoSQL like MongoDB because we cannot afford to read/write a row from the database every time a user receives/sends a message. This will not only make the basic operations of our service run with high latency but also create a huge load on databases.<br>Both of our requirements can be easily met with a wide-column database solution like HBase. HBase is a column-oriented key-value NoSQL database that can store multiple values against one key into multiple columns. HBase is modeled after Google’s BigTable and runs on top of Hadoop Distributed File System (HDFS). HBase groups data together to store new data in a memory buffer and, once the buffer is full, it dumps the data to the disk. This way of storage not only helps to store a lot of small data quickly but also fetching rows by the key or scanning ranges of rows. HBase is also an efficient database to store variable-sized data, which is also required by our service.</p><p><strong>How should clients efficiently fetch data from the server</strong>? Clients should paginate while fetching data from the server. Page size could be different for different clients, e.g., cell phones have smaller screens, so we need a fewer number of messages/conversations in the viewport.</p><h3 id="Managing-User’s-Status"><a href="#Managing-User’s-Status" class="headerlink" title="Managing User’s Status"></a>Managing User’s Status</h3><p>We need to keep track of user’s online/offline status and notify all the relevant users whenever a status change happens. Since we are maintaining a connection object on the server for all active users, we can easily figure out the user’s current status from this. With 500M active users at any time, if we have to broadcast each status change to all the relevant active users, it will consume a lot of resources. We can do the following optimization around this:</p><ol><li>Whenever a client starts the app, it can pull the current status of all users in their friends’ list;</li><li>Whenever a user sends a message to another user that has gone offline, we can send a failure to the sender and update the status on the client;</li><li>Whenever a user comes online, the server can always broadcast that status with a delay of a few seconds to see if the user does not go offline immediately;</li><li>Clients can pull the status from the server about those users that are being shown on the user’s viewport. This should not be a frequent operation, as the server is broadcasting the online status of users and we can live with the stale offline status of users for a while;</li><li>Whenever the client starts a new chat with another user, we can pull the status at that time;</li></ol><p><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-Facebook-Messenger/39.png" alt></p><p><strong>Design Summary</strong>: Clients will open a connection to the chat server to send a message; the server will then pass it to the requested user. All the active users will keep a connection open with the server to receive messages. Whenever a new message arrives, the chat server will push it to the receiving user on the long poll request. Messages can be stored in HBase, which supports quick small updates, and range based searches. The servers can broadcast the online status of a user to other relevant users. Clients can pull status updates for users who are visible in the client’s viewport on a less frequent basis.</p><h2 id="Data-Partitioning"><a href="#Data-Partitioning" class="headerlink" title="Data Partitioning"></a>Data Partitioning</h2><p>Since we will be storing a lot of data (3.6PB for five years), we need to distribute it onto multiple database servers. What will be our partitioning scheme?</p><p><strong>Partitioning based on UserID</strong>: Let’s assume we partition based on the hash of the UserID so that we can keep all messages of a user on the same database. If one DB shard is 4TB, we will have “3.6PB/4TB = 900” shards for five years. For simplicity, let’s assume we keep 1K shards. So we will find the shard number by “hash(UserID) % 1000” and then store/retrieve the data from there. This partitioning scheme will also be very quick to fetch chat history for any user.<br>In the beginning, we can start with fewer database servers with multiple shards residing on one physical server. Since we can have multiple database instances on a server, we can easily store multiple partitions on a single server. Our hash function needs to understand this logical partitioning scheme so that it can map multiple logical partitions on one physical server.<br>Since we will store an unlimited history of messages, we can start with a big number of logical partitions, which will be mapped to fewer physical servers, and as our storage demand increases, we can add more physical servers to distribute our logical partitions.</p><p><strong>Partitioning based on MessageID</strong>: If we store different messages of a user on separate database shards, fetching a range of messages of a chat would be very slow, so we should not adopt this scheme.</p><h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><p>We can cache a few recent messages (say last 15) in a few recent conversations that are visible in a user’s viewport (say last 5). Since we decided to store all of the user’s messages on one shard, the cache for a user should entirely reside on one machine too.</p><h2 id="Load-Balancing"><a href="#Load-Balancing" class="headerlink" title="Load Balancing"></a>Load Balancing</h2><p>We will need a load balancer in front of our chat servers; that can map each UserID to a server that holds the connection for the user and then direct the request to that server. Similarly, we would need a load balancer for our cache servers.</p><h2 id="Fault-Tolerance-and-Replication"><a href="#Fault-Tolerance-and-Replication" class="headerlink" title="Fault Tolerance and Replication"></a>Fault Tolerance and Replication</h2><p><strong>What will happen when a chat server fails</strong>? Our chat servers are holding connections with the users. If a server goes down, should we devise a mechanism to transfer those connections to some other servers? It’s extremely hard to failover TCP connections to other servers; an easier approach can be to have clients automatically reconnect if the connection is lost.</p><p><strong>Should we store multiple copies of user messages</strong>? We cannot have only one copy of the user’s data, because if the server holding the data crashes or is down permanently, we don’t have any mechanism to recover that data. For this, either we have to store multiple copies of the data on different servers or use techniques like Reed-Solomon Encoding to distribute and replicate it.</p><h2 id="Extended-Requirements"><a href="#Extended-Requirements" class="headerlink" title="Extended Requirements"></a>Extended Requirements</h2><ul><li><strong>Group chat</strong>: We can have separate group-chat objects in our system that can be stored on the chat servers. A group-chat object is identified by GroupChatID and will also maintain a list of people who are part of that chat. Our load balancer can direct each group chat message based on GroupChatID and the server handling that group chat can iterate through all the users of the chat to find the server handling the connection of each user to deliver the message.<br>In databases, we can store all the group chats in a separate table partitioned based on GroupChatID;</li><li><strong>Push notifications</strong>: In our current design, users can only send messages to active users and if the receiving user is offline, we send a failure to the sending user. Push notifications will enable our system to send messages to offline users.<br>Each user can opt-in from their device (or a web browser) to get notifications whenever there is a new message or event. Each manufacturer maintains a set of servers that handles pushing these notifications to the user.<br>To have push notifications in our system, we would need to set up a Notification Server, which will take the messages for offline users and send them to the manufacture’s push notification server, which will then send them to the user’s device.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> SystemDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interview Experience</title>
      <link href="../../p/interview-experience.html"/>
      <url>../../p/interview-experience.html</url>
      
        <content type="html"><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>微软苏州分院 bing ads。他家业务很厉害。</p><p>第一轮：<br>不过简历，直接考题。</p><p>有一个数组元素 [a0, a1 …]，从数组中找出连续的数组和为最大。<br>有一个常数n，有一个数组元素 [a0, a1 …] 无重复元素。从数组里面找出所有可能的组合加和是 n，并且输出。<br>第二轮：<br>过简历，面试官不是专业学算法的。如何理解 kafka 框架？在算子开发性能的时候有哪些优化的点？你在团队中发挥什么样的角色？如何使用mapreduce框架？<br>考题：<br>有一个数组（对，全是数组题目），从数组中找出连续数组乘积最大。<br>相关知识点： 数组动态规划<br>相关知识点： 数组动态规划</p><p>第三轮：<br>面试官是学算法的，未来的 leader。如何构建 user 和 item 的特征？双塔模型的结构？<br>深度学习网络 Factorize Machine 相对于线性模型有什么好处？Spark 用过吗？如何构建一个分布式机器学习框架？<br>假设有两个整数 a，b. 那么 a/b 有可能除尽和除不尽。如果除尽，找出循环的单节。图论。</p><p>第四轮：<br>直接上题目：</p><p>假设一个数组只有 “a” 和 “b” 两种 string 组成。如何重新安排数组，使得最多有 3 个 a 相邻，3 个 b 相邻。如果不能安排，返回 None<br>假设有 a，b 两个 int，转成二进制后 c = a | b. 假设从 0-&gt;1, 1-&gt;0 理解为一个 action。最少需要多少个 action 计算 c = a|b？<br>第五轮：<br>问简历，hdfs 的底层原理，mapreduce 底层原理，答得一塌糊涂。不过面试官好像不在乎，说没关系，题目做出来就行。<br>题目：<br>之字型二叉树广度优先遍历<br>。要求一定要用 C 语言写。</p><p>第六轮：<br>boss 面。<br>先问题目：如何实现 a/b。a 和 b 是 string，返回 double。不难。<br>聊人生：家是哪里人，为什么要从字节离职，对微软什么看法。你很优秀，接受平薪吗，微软开得不高。<br>聊完直接得到口头 offer。</p><p>正式offer在3天后获得。</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>面试经过</p><p>一面麦克风有问题 没交流的下去挂<br>二面手写快排秒了, 一道hard题目没做到O(n)</p><p>改编自 992. K 个不同整数的子数组<br>没有周五的面试了 可能的话,秋招再见吧</p><p>写写感受吧</p><p>也刷了大半年题了, 最近也一直在面试, 虽然前段时间被阿里的面试轰炸头疼, 还是更想去巨硬wlb, 然而最后挂了, 心里还是十分失落难受的<br>上周特地刷了一周的微软面试题, 微软题库也到一半了, 然而并没有什么卵用, 面试的时候还是找不到最佳思路,虽然面完之后就想起来了<br>可能天生就是智商不够吧<br>找不到工作大不了就回家考公务员吧, 心累</p><p>###<br>腾讯｜后台开发｜面经｜2021｜<br>【一面】<br>1.自我介绍<br>2.大学期间学了什么专业课？</p><p>数据结构熟悉吗？了解过算法吗？<br>Hashmap了解吗 ？它是一种怎样的数据结构？<br>Hashmap为什么是线程不安全的，如果必须保证线程安全要用什么数据结构？（hashtable）<br>Hashmap和hashtable有什么区别？<br>Hashmap底层是什么数据结构实现的？<br>Hashmap查找数据的原理 为什么查找数据快？（我说了底层有红黑树）<br>红黑树和其他的二叉树有什么区别？为什么选择红黑树？<br>10.红黑树是怎么保证自旋次数相对少的？</p><p>有没有项目经验？<br>Spring的三大特性说一下<br>堆和栈了解吗 ？他们有什么区别？（我说堆不会他就没问了）<br>链表和栈分别是什么数据结构 它们有什么区别<br>问一个简单的算法题，怎么样用链表实现栈的功能？（我没答出来，这一题应该是链表采用头插法就可以实现）<br>排序了解过吗？把你知道的排序说一下（这个要说出来排序原理，我说了冒泡，选择，插入，快排，希尔，归并）<br>哪些排序是稳定的 ？为什么稳定？<br>如果现有数据大致有序用什么排序？为什么？（插入排序）<br>现在有一百万个数据，我要找里面最大的一千个，怎么样做？<br>【二面】<br>1.自我介绍</p><p>2.大学期间学了什么专业课？</p><p>3.数据结构熟悉吗？了解过算法吗？</p><p>4.会什么数据库？（我说了mysql和redis）</p><p>5.又问了我hashmap hashmap为什么用红黑树而不用别的平衡树？</p><p>6.红黑树和avl树有什么区别？</p><p>7.哈希算法了解吗？说一下</p><p>8.你用的是哪个版本的jdk？（我用的11）然后他就问jdk不同版本有什么区别 你用的jdk11和jdk8有什么区别了解吗？（没怎么答上来 ）</p><p>9.Jdk源码看过吗 里面用到了哪些设计模式？</p><p>10.单例模式是怎么保证对象单例的？有没有办法可以破坏单例？（反射和反序列化可以破坏）</p><p>说一下反射的原理 ，说一下动态代理<br>Mysql数据库的三大范式<br>Mysql数据库的索引有哪些？<br>一定需要索引吗 ？索引有什么缺点？<br>为什么用索引查询起来会快？索引底层是什么数据结构？<br>B+树是一种什么样的树？B+树和红黑树有什么区别？<br>B+树索引和hash索引的优缺点<br>Redis是什么数据库？和mysql有什么区别？<br>Redis是如何应对高并发的？<br>Redis集群结构，数据结构设计。key是怎么存储的？key命中率低怎么办？<br>找出1T数据中重复率最高的名字<br>算法题：爬楼梯，一次可以跳一步或者两步 求总跳法<br>井盖为什么是圆的你了解过没</p>]]></content>
      
      
      
        <tags>
            
            <tag> interview experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Designing TinyURL</title>
      <link href="../../p/Designing-TinyURL.html"/>
      <url>../../p/Designing-TinyURL.html</url>
      
        <content type="html"><![CDATA[<h2 id="Why-do-We-Need-URL-Shortening"><a href="#Why-do-We-Need-URL-Shortening" class="headerlink" title="Why do We Need URL Shortening?"></a>Why do We Need URL Shortening?</h2><p>URL shortening is used to create shorter aliases for long URLs. We call these shortened aliases “short links”. Users are redirected to the original URL when they hit these short links. Short links save a lot of space when displayed, printed, messaged, or tweeted. Additionally, users are less likely to mistype shorter URLs.</p><p>For example, if we shorten this page through TinyURL:</p><blockquote><p><a href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5668600916475904/" target="_blank" rel="noopener">https://www.educative.io/collection/page/5668639101419520/5649050225344512/5668600916475904/</a></p></blockquote><p>We would get:</p><blockquote><p><a href="http://tinyurl.com/jlg8zpc" target="_blank" rel="noopener">http://tinyurl.com/jlg8zpc</a></p></blockquote><p>The shortened URL is nearly one-third the size of the actual URL.<br>URL shortening is used to optimize links across devices, track individual links to analyze audience, measure ad campaigns’ performance, or hide affiliated original URLs.</p><p>If you haven’t used <a href="https://tinyurl.com/app" target="_blank" rel="noopener">tinyurl.com</a> before, please try creating a new shortened URL and spend some time going through the various options their service offers. This will help you a lot in understanding this chapter.</p><a id="more"></a><h2 id="Requirements-and-Goals-of-the-System"><a href="#Requirements-and-Goals-of-the-System" class="headerlink" title="Requirements and Goals of the System"></a>Requirements and Goals of the System</h2><blockquote><p>You should always clarify requirements at the beginning of the interview. Be sure to ask questions to find the exact scope of the system that the interviewer has in mind.</p></blockquote><p>Our URL shortening system should meet the following requirements:<br><strong>Functional Requirements</strong>:</p><ol><li>Given a URL, our service should generate a shorter and unique alias of it. This is called a short link. This link should be short enough to be easily copied and pasted into applications;</li><li>When users access a short link, our service should redirect them to the original link;</li><li>Users should optionally be able to pick a custom short link for their URL;</li><li>Links will expire after a standard default time span. Users should be able to specify the expiration time;</li></ol><p><strong>Non-Functional Requirements</strong>:</p><ol><li>The system should be highly available. This is required because, if our service is down, all the URL redirections will start failing;</li><li>URL redirection should happen in real-time with minimal latency;</li><li>Shortened links should not be guessable (not predictable);</li></ol><p><strong>Extended Requirements</strong>:</p><ol><li>Analytics ,e.g., how many times a redirection happened?</li><li>Our service should also be accessible through REST APIs by other services;</li></ol><h2 id="Capacity-Estimation-and-Constraints"><a href="#Capacity-Estimation-and-Constraints" class="headerlink" title="Capacity Estimation and Constraints"></a>Capacity Estimation and Constraints</h2><p>Our system will be read-heavy. There will be lots of redirection requests compared to new URL shortenings. Let’s assume a 100:1 ratio between read and write.</p><p><strong>Traffic estimates</strong>: Assuming, we will have 500M new URL shortenings per month, with 100:1 read/write ratio, we can expect 50B redirections during the same period:</p><blockquote><p>100 * 500M = 50B</p></blockquote><p>What would be Queries Per Second (QPS) for our system? New URLs shortenings per second:</p><blockquote><p>500 million / (30 days * 24 hours * 3600 seconds) ≈ 200 URLs/s</p></blockquote><p>Considering 100:1 read/write ratio, URLs redirections per second will be:</p><blockquote><p>100 * 200 URLs/s = 20K/s</p></blockquote><p><strong>Storage estimates</strong>: Let’s assume we store every URL shortening request (and associated shortened link) for 5 years. Since we expect to have 500M new URLs every month, the total number of objects we expect to store will be 30 billion:</p><blockquote><p>500 million * 5 years * 12 months = 30 billion</p></blockquote><p>Let’s assume that each stored object will be approximately 500 bytes. We will need 15TB of total storage:</p><blockquote><p>30 billion * 500 bytes = 15 TB</p></blockquote><p><strong>Bandwidth estimates</strong>: For write requests, since we expect 200 new URLs every second, total incoming data for our service will be 100KB per second:</p><blockquote><p>200 * 500 bytes = 100 KB/s</p></blockquote><p>For read requests, since every second we expect 20K URLs redirections, total outgoing data for our service would be 10MB per second:</p><blockquote><p>20K * 500 bytes = 10 MB/s</p></blockquote><p><strong>Memory estimates</strong>: If we want to cache some of the hot URLs that are frequently accessed, how much memory will we need to store them? If we follow the 80-20 rule, meaning 20% of URLs generate 80% of traffic, we would like to cache these 20% hot URLs. Since we have 20K requests per second, we will be getting 1.7 billion requests per day:</p><blockquote><p>20K * 3600 seconds * 24 hours ≈ 1.7 billion</p></blockquote><p>To cache 20% of these requests, we will need 170GB of memory:</p><blockquote><p>0.2 * 1.7 billion * 500 bytes = 170 GB</p></blockquote><p>One thing to note here is that since there will be many duplicate requests (of the same URL), our actual memory usage will be less than 170GB.</p><p><strong>High-level estimates</strong>: Assuming 500 million new URLs per month and 100:1 read:write ratio, following is the summary of the high-level estimates for our service:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-TinyURL/19.png" alt></p><h2 id="System-APIs"><a href="#System-APIs" class="headerlink" title="System APIs"></a>System APIs</h2><blockquote><p>Once we’ve finalized the requirements, it’s always a good idea to define the system APIs. This should explicitly state what is expected from the system.</p></blockquote><p>We can have SOAP or REST APIs to expose the functionality of our service. Following could be the definitions of the APIs for creating and deleting URLs:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createURL(api_dev_key, original_url, custom_alias=None, user_name=None, expire_date=None)</span><br></pre></td></tr></table></figure><p><strong>Parameters</strong>:</p><ul><li>api_dev_key: The API developer key of a registered account. This will be used to, among other things, throttle users based on their allocated quota;</li><li>original_url: Original URL to be shortened;</li><li>custom_alias: Optional custom key for the URL;</li><li>user_name: Optional user name to be used in the encoding;</li><li>expire_date: Optional expiration date for the shortened URL;</li></ul><p><strong>Returns</strong>: A successful insertion returns the shortened URL; otherwise, it returns an error code.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deleteURL(api_dev_key, url_key)</span><br></pre></td></tr></table></figure><p>Where “url_key” is a string representing the shortened URL to be retrieved; a successful deletion returns “URL Removed”.</p><p><strong>How do we detect and prevent abuse</strong>? A malicious user can put us out of business by consuming all URL keys in the current design. To prevent abuse, we can limit users via their api_dev_key. Each api_dev_key can be limited to a certain number of URL creations and redirections per some time period (which may be set to a different duration per developer key).</p><h2 id="Database-Design"><a href="#Database-Design" class="headerlink" title="Database Design"></a>Database Design</h2><blockquote><p>Defining the DB schema in the early stages of the interview would help to understand the data flow among various components and later would guide towards data partitioning.</p></blockquote><p>A few observations about the nature of the data we will store:</p><ul><li>We need to store billions of records;</li><li>Each object we store is small (less than 1K);</li><li>There are no relationships between records - other than storing which user created a URL;</li><li>Our service is read-heavy;</li></ul><p><strong>Database Schema</strong>: We would need two tables: one for storing information about the URL mappings and one for the user’s data who created the short link:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-TinyURL/20.png" alt></p><p><strong>What kind of database should we use</strong>? Since we anticipate storing billions of rows, and we don’t need to use relationships between objects – a NoSQL store like DynamoDB, Cassandra or Riak is a better choice. A NoSQL choice would also be easier to scale.</p><h2 id="Basic-System-Design-and-Algorithm"><a href="#Basic-System-Design-and-Algorithm" class="headerlink" title="Basic System Design and Algorithm"></a>Basic System Design and Algorithm</h2><p>The problem we are solving here is how to generate a short and unique key for a given URL.<br>In the TinyURL, the shortened URL is “<a href="http://tinyurl.com/jlg8zpc&quot;" target="_blank" rel="noopener">http://tinyurl.com/jlg8zpc&quot;</a>. The last seven characters of this URL is the short key we want to generate. We’ll explore two solutions here.</p><h3 id="Encoding-actual-URL"><a href="#Encoding-actual-URL" class="headerlink" title="Encoding actual URL"></a>Encoding actual URL</h3><p>We can compute a unique hash (e.g., MD5 or SHA256, etc.) of the given URL. The hash can then be encoded for display. This encoding could be base36 ([a-z, 0-9]) or base62 ([A-Z, a-z, 0-9]) and if we add “+” and “/“ we can use Base64 encoding. A reasonable question would be, what should be the length of the short key? 6, 8, or 10 characters?</p><p>Using base64 encoding, a 6 letters long key would result in 64^6 ≈ 68.7 billion possible strings; Using base64 encoding, an 8 letters long key would result in 64^8 ≈ 281 trillion possible strings.<br>With 68.7B unique strings, let’s assume six letter keys would suffice for our system.</p><p>If we use the MD5 algorithm as our hash function, it’ll produce a 128 bits hash value. After base64 encoding, well get a string having more than 21 characters (since each base64 character encodes 6 bits of the hash value). Now we only have space for 6 characters per short key; how will we choose our key then? We can take the first 6 letters for the key. This could result in key duplication; to resolve that, we can choose some other characters out of the encoding string or swap some characters.</p><p><strong>What are the different issues with our solution</strong>? We have the following couple of problems with our encoding scheme:</p><ol><li>If multiple users enter the same URL, they can get the same shortened URL, which is not acceptable;</li><li>What if parts of the URL are URL-encoded? e.g., <a href="http://www.educative.io/distributed.php?id=design" target="_blank" rel="noopener">http://www.educative.io/distributed.php?id=design</a> and <a href="http://www.educative.io/distributed.php%3Fid%3Ddesign" target="_blank" rel="noopener">http://www.educative.io/distributed.php%3Fid%3Ddesign</a> are identical except for the URL encoding;</li></ol><p><strong>Workaround for the issues</strong>: We can append an increasing sequence number to each input URL to make it unique and then generate its hash. We don’t need to store this sequence number in the databases, though. Possible problems with this approach could be an ever-increasing sequence number. Can it overflow? Appending an increasing sequence number will also impact the performance of the service.</p><p>Another solution could be to append the user id (which should be unique) to the input URL. However, if the user has not signed in, we would have to ask the user to choose a uniqueness key. Even after this, if we have a conflict, we have to keep generating a key until we get a unique one:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-TinyURL/21.png" alt></p><h3 id="Generating-keys-offline"><a href="#Generating-keys-offline" class="headerlink" title="Generating keys offline"></a>Generating keys offline</h3><p>We can have a standalone <strong>Key Generation Service (KGS)</strong> that generates random six-letter strings beforehand and stores them in a database (let’s call it key-DB). Whenever we want to shorten a URL, we will take one of the already-generated keys and use it. This approach will make things quite simple and fast. Not only are we not encoding the URL, but we won’t have to worry about duplications or collisions. KGS will make sure all the keys inserted into key-DB are unique:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-TinyURL/22.png" alt></p><p><strong>Can concurrency cause problems</strong>? As soon as a key is used, it should be marked in the database to ensure that it is not used again. If there are multiple servers reading keys concurrently, we might get a scenario where two or more servers try to read the same key from the database. How can we solve this concurrency problem?<br>Servers can use KGS to read/mark keys in the database. KGS can use two tables to store keys: one for keys that are not used yet, and one for all the used keys. As soon as KGS gives keys to one of the servers, it can move them to the used keys table. KGS can always keep some keys in memory to quickly provide them whenever a server needs them.</p><p>For simplicity, as soon as KGS loads some keys in memory, it can move them to the used keys table. This ensures each server gets unique keys. If KGS dies before assigning all the loaded keys to some server, we will be wasting those keys–which could be acceptable, given the huge number of keys we have.<br>KGS also has to make sure not to give the same key to multiple servers. For that, it must synchronize (or get a lock on) the data structure holding the keys before removing keys from it and giving them to a server.</p><p><strong>What would be the key-DB size</strong>? With base64 encoding, we can generate 68.7B unique six letters keys. If we need one byte to store one alpha-numeric character, we can store all these keys in:</p><blockquote><p>6 (characters per key) * 68.7B (unique keys) ≈ 412 GB</p></blockquote><p><strong>Isn’t KGS a single point of failure</strong>? Yes, it is. To solve this, we can have a standby replica of KGS. Whenever the primary server dies, the standby server can take over to generate and provide keys.</p><p><strong>Can each app server cache some keys from key-DB</strong>? Yes, this can surely speed things up. Although, in this case, if the application server dies before consuming all the keys, we will end up losing those keys. This can be acceptable since we have 68.7B unique six-letter keys.</p><p><strong>How would we perform a key lookup</strong>? We can look up the key in our database to get the full URL. If it’s present in the DB, issue an “HTTP 302 Redirect” status back to the browser, passing the stored URL in the “Location” field of the request. If that key is not present in our system, issue an “HTTP 404 Not Found” status or redirect the user back to the homepage.</p><p><strong>Should we impose size limits on custom aliases</strong>? Our service supports custom aliases. Users can pick any “key” they like, but providing a custom alias is not mandatory. However, it is reasonable (and often desirable) to impose a size limit on a custom alias to ensure we have a consistent URL database. Let’s assume users can specify a maximum of 16 characters per customer key (as reflected in the above database schema).</p><h2 id="Data-Partitioning-and-Replication"><a href="#Data-Partitioning-and-Replication" class="headerlink" title="Data Partitioning and Replication"></a>Data Partitioning and Replication</h2><p>To scale out our DB, we need to partition it so that it can store information about billions of URLs. We need to develop a partitioning scheme that would divide and store our data into different DB servers:</p><ol><li><strong>Range-Based Partitioning</strong>: We can store URLs in separate partitions based on the hash key’s first letter. Hence we save all the URLs starting with the letter “A” (and “a”) in one partition, save those that start with the letter “B” in another partition, and so on. This approach is called range-based partitioning. We can even combine certain less frequently occurring letters into one database partition. We should come up with a static partitioning scheme to always store/find a URL in a predictable manner.<br>The main problem with this approach is that it can lead to unbalanced DB servers. For example, we decide to put all URLs starting with the letter “E” into a DB partition, but later we realize that we have too many URLs that start with the letter “E”;</li><li><strong>Hash-Based Partitioning</strong>: In this scheme, we take a hash of the object we are storing. We then calculate which partition to use based upon the hash. In our case, we can take the hash of the ‘key’ or the short link to determine the partition in which we store the data object.<br>Our hashing function will randomly distribute URLs into different partitions (e.g., our hashing function can always map any “key” to a number between [1, 256]). This number would represent the partition in which we store our object. This approach can still lead to overloaded partitions, which can be solved using Consistent Hashing;</li></ol><h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><p>We can cache URLs that are frequently accessed. We can use some off-the-shelf solution like Memcached, which can store full URLs with their respective hashes. Before hitting backend storage, the application servers can quickly check if the cache has the desired URL.</p><p><strong>How much cache memory should we have</strong>? We can start with 20% of daily traffic and, based on clients’ usage patterns, we can adjust how many cache servers we need. As estimated above, we need 170GB memory to cache 20% of daily traffic. Since a modern-day server can have 256GB memory, we can easily fit all the cache into one machine. Alternatively, we can use a couple of smaller servers to store all these hot URLs.</p><p><strong>Which cache eviction policy would best fit our needs</strong>? When the cache is full, and we want to replace a link with a newer/hotter URL, how would we choose? Least Recently Used (LRU) can be a reasonable policy for our system. Under this policy, we discard the least recently used URL first. We can use a Linked Hash Map or a similar data structure to store our URLs and Hashes, which will also keep track of the URLs that have been accessed recently.</p><p>To further increase the efficiency, we can replicate our caching servers to distribute the load between them.<br><strong>How can each cache replica be updated</strong>? Whenever there is a cache miss, our servers would be hitting a backend database. Whenever this happens, we can update the cache and pass the new entry to all the cache replicas. Each replica can update its cache by adding the new entry. If a replica already has that entry, it can simply ignore it:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-TinyURL/23.png" alt></p><h2 id="Load-Balancer"><a href="#Load-Balancer" class="headerlink" title="Load Balancer"></a>Load Balancer</h2><p>We can add a Load balancing layer at three places in our system:</p><ol><li>Between Clients and Application Servers;</li><li>Between Application Servers and Database Servers;</li><li>Between Application Servers and Cache Servers;</li></ol><p>Initially, we could use a simple Round Robin approach that distributes incoming requests equally among backend servers. This LB is simple to implement and does not introduce any overhead. Another benefit of this approach is that if a server is dead, LB will take it out of the rotation and will stop sending any traffic to it.</p><p>A problem with Round Robin LB is that we don’t take the server load into consideration. If a server is overloaded or slow, the LB will not stop sending new requests to that server. To handle this, a more intelligent LB solution can be placed that periodically queries the backend server about its load and adjusts traffic based on that.</p><h2 id="Purging-or-DB-Cleanup"><a href="#Purging-or-DB-Cleanup" class="headerlink" title="Purging or DB Cleanup"></a>Purging or DB Cleanup</h2><p>Should entries stick around forever, or should they be purged? If a user-specified expiration time is reached, what should happen to the link?</p><p>If we chose to actively search for expired links to remove them, it would put a lot of pressure on our database. Instead, we can slowly remove expired links and do a lazy cleanup. Our service will ensure that only expired links will be deleted, although some expired links can live longer but will never be returned to users:</p><ul><li>Whenever a user tries to access an expired link, we can delete the link and return an error to the user;</li><li>A separate Cleanup Service can run periodically to remove expired links from our storage and cache. This service should be very lightweight and can be scheduled to run only when the user traffic is expected to be low;</li><li>We can have a default expiration time for each link (e.g., two years);</li><li>After removing an expired link, we can put the key back in the key-DB to be reused;</li><li>Should we remove links that haven’t been visited in some length of time, say six months? This could be tricky. Since storage is getting cheap, we can decide to keep links forever;</li></ul><p><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-TinyURL/24.png" alt></p><h2 id="Telemetry"><a href="#Telemetry" class="headerlink" title="Telemetry"></a>Telemetry</h2><p>How many times a short URL has been used, what were user locations, etc.? How would we store these statistics? If it is part of a DB row that gets updated on each view, what will happen when a popular URL is slammed with a large number of concurrent requests?<br>Some statistics worth tracking: country of the visitor, date and time of access, web page that referred the click, browser, or platform from where the page was accessed.</p><h2 id="Security-and-Permissions"><a href="#Security-and-Permissions" class="headerlink" title="Security and Permissions"></a>Security and Permissions</h2><p>Can users create private URLs or allow a particular set of users to access a URL?<br>We can store the permission level (public/private) with each URL in the database. We can also create a separate table to store UserIDs that have permission to see a specific URL. If a user does not have permission and tries to access a URL, we can send an error (HTTP 401) back. Given that we are storing our data in a NoSQL wide-column database like Cassandra, the key for the table storing permissions would be the “Hash” (or the KGS generated “key”). The columns will store the UserIDs of those users that have permission to see the URL.</p>]]></content>
      
      
      
        <tags>
            
            <tag> SystemDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bit manipulation</title>
      <link href="../../p/bit-manipulation.html"/>
      <url>../../p/bit-manipulation.html</url>
      
        <content type="html"><![CDATA[<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h2><p>remove rightest 1:<br>    n = n &amp; (n - 1)<br>    n -= (~ n + 1) &amp; n</p><p>get the rightest 1:<br>    (~ n + 1) &amp; n</p>]]></content>
      
      
      
        <tags>
            
            <tag> bit manipulation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trie</title>
      <link href="../../p/Trie.html"/>
      <url>../../p/Trie.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="comment"># TreeNode can search children and determine whether it's end or not</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.children = defaultdict(TrieNode)</span><br><span class="line">        self.is_word = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> word:</span><br><span class="line">            <span class="comment"># use defaultdict without declaring value</span></span><br><span class="line">            node = node.children[w]</span><br><span class="line">        node.is_word = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> word:</span><br><span class="line">            node = node.children.get(w)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> node.is_word</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startsWith</span><span class="params">(self, prefix)</span>:</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> prefix:</span><br><span class="line">            node = node.children.get(w)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># search prefix/word is different</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CodingInterviews </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>heap sort</title>
      <link href="../../p/heap-sort.html"/>
      <url>../../p/heap-sort.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        self.nums = nums</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heapify</span><span class="params">(self, n, i)</span>:</span></span><br><span class="line">        <span class="comment"># find largest among root and children</span></span><br><span class="line">        largest = i</span><br><span class="line">        left = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">        right = <span class="number">2</span> * i + <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> left &lt; n <span class="keyword">and</span> self.nums[i] &lt; self.nums[left]:</span><br><span class="line">            largest = left</span><br><span class="line">        <span class="keyword">if</span> right &lt; n <span class="keyword">and</span> self.nums[largest] &lt; self.nums[right]:</span><br><span class="line">            largest = right</span><br><span class="line">        <span class="keyword">if</span> largest != i:</span><br><span class="line">            self.nums[i], self.nums[largest] = self.nums[largest], self.nums[i]</span><br><span class="line">            self.heapify(n, largest)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self)</span>:</span></span><br><span class="line">        n = len(self.nums)</span><br><span class="line">        <span class="comment"># build max heap (n)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n // <span class="number">2</span> - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            self.heapify(n, i)</span><br><span class="line">        <span class="comment"># heap sort (nlogn)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            self.nums[i], self.nums[<span class="number">0</span>] = self.nums[<span class="number">0</span>], self.nums[i]</span><br><span class="line">            self.heapify(i, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">7</span>]</span><br><span class="line">heapsort = HeapSort(nums)</span><br><span class="line">heapsort.sort()</span><br><span class="line">print(heapsort.nums)</span><br></pre></td></tr></table></figure><blockquote><p>非递归实现 空间复杂度 o(1)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        self.nums = nums</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heapify</span><span class="params">(self, n, i)</span>:</span></span><br><span class="line">        left = i * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        right = i * <span class="number">2</span> + <span class="number">2</span></span><br><span class="line">        largest = i</span><br><span class="line">        <span class="keyword">while</span> left &lt; n:</span><br><span class="line">            <span class="keyword">if</span> self.nums[left] &gt; self.nums[i]:</span><br><span class="line">                largest = left</span><br><span class="line">            <span class="keyword">if</span> right &lt; n <span class="keyword">and</span> self.nums[right] &gt; self.nums[largest]:</span><br><span class="line">                largest = right</span><br><span class="line">            <span class="keyword">if</span> largest != i:</span><br><span class="line">                self.nums[i], self.nums[largest] = self.nums[largest], self.nums[i]</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment">##</span></span><br><span class="line">                <span class="keyword">break</span> <span class="comment">##  </span></span><br><span class="line">            i = largest</span><br><span class="line">            left = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">            right = <span class="number">2</span> * i + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heapInsert</span><span class="params">(self, i)</span>:</span></span><br><span class="line">        parent = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line">            parent = (i - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> self.nums[parent] &lt; self.nums[i]:</span><br><span class="line">                self.nums[parent], self.nums[i] = self.nums[i], self.nums[parent]</span><br><span class="line">                i = parent</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self)</span>:</span></span><br><span class="line">        n = len(self.nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            self.heapInsert(i)</span><br><span class="line">        <span class="comment"># for i in range(n // 2 - 1, -1, -1):</span></span><br><span class="line">        <span class="comment">#     self.heapify(n, i)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            self.nums[<span class="number">0</span>], self.nums[i] = self.nums[i], self.nums[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># self.heapify(n, i)</span></span><br><span class="line">            self.heapify(i, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">7</span>]</span><br><span class="line">heapsort = HeapSort(nums)</span><br><span class="line">heapsort.sort()</span><br><span class="line">print(heapsort.nums)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> sort algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sliding Window</title>
      <link href="../../p/Sliding-Window.html"/>
      <url>../../p/Sliding-Window.html</url>
      
        <content type="html"><![CDATA[<p>In many problems dealing with an array (or a LinkedList), we are asked to find or calculate something among all the contiguous subarrays (or sublists) of a given size. For example, take a look at this problem:</p><blockquote><p>Given an array, find the average of all contiguous subarrays of size “K” in it.</p></blockquote><p>Let’s understand this problem with a real input:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">-1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>], K=<span class="number">5</span></span><br></pre></td></tr></table></figure><p>Here, we are asked to find the average of all contiguous subarrays of size “5” in the given array. Let’s solve this:</p><ol><li>For the first 5 numbers (subarray from index 0~4), the average is: (1+3+2+6-1)/5 = 2.2;</li><li>The average of next 5 numbers (subarray from index 1~5) is: (3+2+6-1+4)/5 = 2.8;</li><li>For the next 5 numbers (subarray from index 2~6), the average is: (2+6-1+4+1)/5 = 2.4;</li><li>…</li></ol><p>Here is the final output containing the averages of all contiguous subarrays of size 5:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Output: [<span class="number">2.2</span>, <span class="number">2.8</span>, <span class="number">2.4</span>, <span class="number">3.6</span>, <span class="number">2.8</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><p>A brute-force algorithm will calculate the sum of every 5-element contiguous subarray of the given array and divide the sum by “5” to find the average. This is what the algorithm will look like:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_averages_of_subarrays</span><span class="params">(k, arr)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr) - k + <span class="number">1</span>):</span><br><span class="line">        element_sum = <span class="number">0.0</span></span><br><span class="line">        <span class="comment"># find sum of next `K` elements</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, i + k):</span><br><span class="line">            element_sum += arr[j]</span><br><span class="line">            <span class="comment"># calculate average</span></span><br><span class="line">            result.append(element_sum / k)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p><strong>Time Complexity</strong>: Since for every element of the input array, we are calculating the sum of its next “K” elements, the time complexity of the above algorithm will be O(N*K) where “N” is the number of elements in the input array.</p><p>The inefficiency is that for any two consecutive subarrays of size “5”, the overlapping part (which will contain four elements) will be evaluated twice. For example, take the above-mentioned input:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/algorithm/sliding_window/00.png" alt></p><p>As you can see, there are four overlapping elements between the subarray (indexed from 0~4) and the subarray (indexed from 1~5). Can we somehow reuse the sum we have calculated for the overlapping elements?</p><p>The efficient way to solve this problem would be to visualize each contiguous subarray as a sliding window of “5” elements. This means that we will slide the window by one element when we move on to the next subarray. To reuse the sum from the previous subarray, we will subtract the element going out of the window and add the element now being included in the sliding window. This will save us from going through the whole subarray to find the sum and, as a result, the algorithm complexity will reduce to O(N):<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/algorithm/sliding_window/01.png" alt></p><p>Here is the algorithm for the <em>Sliding Window</em> approach:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_averages_of_subarrays</span><span class="params">(k, arr)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    window_sum, start = <span class="number">0.0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> end <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        window_sum += arr[end]</span><br><span class="line">        <span class="comment"># shrink</span></span><br><span class="line">        <span class="keyword">if</span> end &gt;= k - <span class="number">1</span>:</span><br><span class="line">            result.append(window_sum / k)</span><br><span class="line">            window_sum -= arr[start]</span><br><span class="line">            start += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>In some problems, the size of the sliding window is not fixed. We have to expand or shrink the window based on the problem constraints.</p><h2 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h2><p><a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/submissions/" target="_blank" rel="noopener">209. Minimum Size Subarray Sum</a><br><a href="https://leetcode-cn.com/problems/fruit-into-baskets/" target="_blank" rel="noopener">904. Fruit Into Baskets</a><br><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3. Longest Substring Without Repeating Characters</a><br><a href="https://leetcode-cn.com/problems/longest-repeating-character-replacement/" target="_blank" rel="noopener">424. Longest Repeating Character Replacement</a><br><a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/" target="_blank" rel="noopener">1004. Max Consecutive Ones III</a><br><a href="https://leetcode-cn.com/problems/permutation-in-string/" target="_blank" rel="noopener">567. Permutation in String</a><br><a href="https://leetcode-cn.com/problems/minimum-window-substring/" target="_blank" rel="noopener">76. Minimum Window Substring</a><br><a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/" target="_blank" rel="noopener">438.Find All Anagrams in a String</a><br><a href="https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words/" target="_blank" rel="noopener">30. Substring with Concatenation of All Words</a><br><a href="https://leetcode-cn.com/problems/subarrays-with-k-different-integers/" target="_blank" rel="noopener">992. Subarrays with K Different Integers</a><br><a href="https://leetcode-cn.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/" target="_blank" rel="noopener">1438. Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit</a><br><a href="https://leetcode-cn.com/problems/maximum-average-subarray-i/" target="_blank" rel="noopener">643. Maximum Average Subarray I</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Sliding Window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnionFindSet</title>
      <link href="../../p/UnionFindSet.html"/>
      <url>../../p/UnionFindSet.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n, nums)</span>:</span></span><br><span class="line">        self.nums = nums</span><br><span class="line">        self.parent = defaultdict(int)</span><br><span class="line">        self.size = defaultdict(int)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.nums)):</span><br><span class="line">            self.parent[i] = i</span><br><span class="line">            self.size[i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="comment"># 查找根节点，即当前元素所属的集合</span></span><br><span class="line">        r = x</span><br><span class="line">        <span class="keyword">while</span> r != self.parent[r]:</span><br><span class="line">            r = self.parent[r]</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">        <span class="comment"># if x != self.parent[x]:</span></span><br><span class="line">        <span class="comment">#     self.parent[x] = self.find(self.parent[x])</span></span><br><span class="line">        <span class="comment"># return self.parent[x]</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        x_root = self.find(x)</span><br><span class="line">        y_root = self.find(y)</span><br><span class="line">        <span class="keyword">if</span> x_root != y_root:</span><br><span class="line">            <span class="keyword">if</span> self.size[x_root] &gt; self.size[y_root]:</span><br><span class="line">                self.parent[y_root] = x_root</span><br><span class="line">                self.size[x_root] += self.size[y_root]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.parent[x_root] = y_root</span><br><span class="line">                self.size[y_root] += self.size[x_root]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查根</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(x, parent)</span>:</span></span><br><span class="line">    r = x</span><br><span class="line">    <span class="keyword">while</span> r != parent[r]:</span><br><span class="line">        r = parent[r]</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(x, y, parent,size)</span>:</span></span><br><span class="line">    x_root = find(x, parent)</span><br><span class="line">    y_root = find(y, parent)</span><br><span class="line">    <span class="comment"># 将x作为根节点</span></span><br><span class="line">    <span class="keyword">if</span> x_root != y_root:</span><br><span class="line">        <span class="keyword">if</span> size[x_root] &gt; size[y_root]:</span><br><span class="line">            parent[y_root] = x_root</span><br><span class="line">            size[x_root] += size[y_root]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parent[x_root] = y_root</span><br><span class="line">            size[y_root] += size[x_root]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findCircleNum</span><span class="params">(self, M)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type M: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        parent = defaultdict(int)</span><br><span class="line">        size = defaultdict(int)</span><br><span class="line">        ans = set()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> M:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(M)):</span><br><span class="line">            parent[i] = i</span><br><span class="line">            size[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(M)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i, len(M[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">if</span> M[i][j] == <span class="number">1</span>:</span><br><span class="line">                    union(i, j, parent,size)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> parent:</span><br><span class="line">            ans.add(find(i, parent))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> len(ans)</span><br><span class="line"></span><br><span class="line">a = Solution()</span><br><span class="line">print(a.findCircleNum([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]]))</span><br></pre></td></tr></table></figure><h2 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h2><p><a href="https://leetcode-cn.com/problems/swim-in-rising-water/" target="_blank" rel="noopener">778. Swim in Rising Water</a><br><a href="https://leetcode-cn.com/problems/number-of-islands/" target="_blank" rel="noopener">200. Number of Islands</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> UnionFind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LFU</title>
      <link href="../../p/LFU.html"/>
      <url>../../p/LFU.html</url>
      
        <content type="html"><![CDATA[<p>Design and implement a data structure for a Least Frequently Used (LFU) cache.</p><p>Implement the LFUCache class:</p><p>LFUCache(int capacity) Initializes the object with the capacity of the data structure.<br>int get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1.<br>void put(int key, int value) Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.<br>To determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.<br>When a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it.</p><p>Input<br>[“LFUCache”, “put”, “put”, “get”, “put”, “get”, “get”, “put”, “get”, “get”, “get”]<br>[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]<br>Output<br>[null, null, null, 1, null, -1, 3, null, -1, 3, 4]</p><p>Explanation<br>// cnt(x) = the use counter for key x<br>// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)<br>LFUCache lfu = new LFUCache(2);<br>lfu.put(1, 1);   // cache=[1,_], cnt(1)=1<br>lfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1<br>lfu.get(1);      // return 1<br>                 // cache=[1,2], cnt(2)=1, cnt(1)=2<br>lfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.<br>                 // cache=[3,1], cnt(3)=1, cnt(1)=2<br>lfu.get(2);      // return -1 (not found)<br>lfu.get(3);      // return 3<br>                 // cache=[3,1], cnt(3)=2, cnt(1)=2<br>lfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.<br>                 // cache=[4,3], cnt(4)=1, cnt(3)=2<br>lfu.get(1);      // return -1 (not found)<br>lfu.get(3);      // return 3<br>                 // cache=[3,4], cnt(4)=1, cnt(3)=3<br>lfu.get(4);      // return 4<br>                 // cache=[3,4], cnt(4)=2, cnt(3)=3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key = None, val = None)</span>:</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.val = val</span><br><span class="line">        self.freq = <span class="number">1</span></span><br><span class="line">        self.prev = <span class="literal">None</span></span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DLinkedList</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.head = Node()</span><br><span class="line">        self.tail = Node()</span><br><span class="line">        self.head.next = self.tail</span><br><span class="line">        self.tail.prev = self.head</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addToHead</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        self.head.next.prev = node</span><br><span class="line">        node.next= self.head.next</span><br><span class="line">        node.prev = self.head</span><br><span class="line">        self.head.next = node</span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeTail</span><span class="params">(self)</span>:</span></span><br><span class="line">        node = self.tail.prev</span><br><span class="line">        self.removeNode(node)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNode</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        node.next.prev = node.prev</span><br><span class="line">        node.prev.next = node.next</span><br><span class="line">        self.size -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUCache</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity)</span>:</span></span><br><span class="line">        self.key_node = dict()</span><br><span class="line">        self.freq_DLinkedList = dict()</span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.minFreq = <span class="number">0</span> <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.key_node:</span><br><span class="line">            node = self.key_node[key]</span><br><span class="line">            self.increase_key_freq(key)</span><br><span class="line">            <span class="keyword">return</span> node.val</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key, val)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.capacity:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.key_node:</span><br><span class="line">            node = self.key_node[key]</span><br><span class="line">            node.val = val</span><br><span class="line">            self.increase_key_freq(key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># remove first</span></span><br><span class="line">            <span class="keyword">if</span> len(self.key_node) &gt;= self.capacity:  <span class="comment"># &gt;</span></span><br><span class="line">                <span class="comment"># self.freq_DLinkedList[self.minFreq].removeTail()</span></span><br><span class="line">                <span class="comment"># self.key_node.pop(node.key) #</span></span><br><span class="line">                self.remove_Min_freq()</span><br><span class="line">            node = Node(key, val)</span><br><span class="line">            <span class="keyword">if</span> node.freq <span class="keyword">not</span> <span class="keyword">in</span> self.freq_DLinkedList:</span><br><span class="line">                self.freq_DLinkedList[node.freq] = DLinkedList()</span><br><span class="line">            self.key_node[key] = node</span><br><span class="line">            self.freq_DLinkedList[node.freq].addToHead(node)</span><br><span class="line">            self.minFreq = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increase_key_freq</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        node = self.key_node[key]</span><br><span class="line">        freq = node.freq</span><br><span class="line">        self.freq_DLinkedList[freq].removeNode(node)</span><br><span class="line">        node.freq += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> node.freq <span class="keyword">not</span> <span class="keyword">in</span> self.freq_DLinkedList:</span><br><span class="line">            self.freq_DLinkedList[node.freq] = DLinkedList()</span><br><span class="line">        self.freq_DLinkedList[node.freq].addToHead(node)</span><br><span class="line">        <span class="comment"># self.key_node[key] = node</span></span><br><span class="line">        <span class="keyword">if</span> self.minFreq == freq <span class="keyword">and</span> self.freq_DLinkedList[freq].size == <span class="number">0</span>:</span><br><span class="line">            self.minFreq +=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_Min_freq</span><span class="params">(self)</span>:</span></span><br><span class="line">        node = self.freq_DLinkedList[self.minFreq].removeTail()</span><br><span class="line">        self.key_node.pop(node.key)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CodingInterviews </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LRU</title>
      <link href="../../p/LRU.html"/>
      <url>../../p/LRU.html</url>
      
        <content type="html"><![CDATA[<p>Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.<br>Implement the LRUCache class:<br>LRUCache(int capacity) Initialize the LRU cache with positive size capacity.<br>int get(int key) Return the value of the key if the key exists, otherwise return -1.<br>void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.<br>Follow up:<br>Could you do get and put in O(1) time complexity?</p><p>Input<br>[“LRUCache”, “put”, “put”, “get”, “put”, “get”, “put”, “get”, “get”, “get”]<br>[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]<br>Output<br>[null, null, null, 1, null, -1, null, -1, 3, 4]<br>Explanation<br>LRUCache lRUCache = new LRUCache(2);<br>lRUCache.put(1, 1); // cache is {1=1}<br>lRUCache.put(2, 2); // cache is {1=1, 2=2}<br>lRUCache.get(1);    // return 1<br>lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}<br>lRUCache.get(2);    // returns -1 (not found)<br>lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}<br>lRUCache.get(1);    // return -1 (not found)<br>lRUCache.get(3);    // return 3<br>lRUCache.get(4);    // return 4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key = None, value = None)</span>:</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.value = value</span><br><span class="line">        self.prev = <span class="literal">None</span></span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity)</span>:</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line">        self.head = Node()</span><br><span class="line">        self.tail = Node()</span><br><span class="line">        self.head.next = self.tail</span><br><span class="line">        self.tail.prev = self.head</span><br><span class="line">        self.cache = dict()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.cache:</span><br><span class="line">            node = self.cache[key]</span><br><span class="line">            self.moveToHead(node)</span><br><span class="line">            <span class="keyword">return</span> node.value</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.cache:</span><br><span class="line">            node = self.cache[key]</span><br><span class="line">            node.value = value</span><br><span class="line">            self.moveToHead(node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node = Node(key, value)</span><br><span class="line">            self.cache[key] = node</span><br><span class="line">            self.addToHead(node)</span><br><span class="line">            self.size += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self.size &gt; self.capacity:</span><br><span class="line">                removed = self.removeTail()</span><br><span class="line">                self.cache.pop(removed.key)</span><br><span class="line">                self.size -= <span class="number">1</span> <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveToHead</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        self.removeNode(node)</span><br><span class="line">        self.addToHead(node)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addToHead</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        self.head.next.prev = node</span><br><span class="line">        node.next = self.head.next</span><br><span class="line">        self.head.next = node</span><br><span class="line">        node.prev = self.head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNode</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        node.prev.next = node.next</span><br><span class="line">        node.next.prev = node.prev</span><br><span class="line">        <span class="comment"># return node</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeTail</span><span class="params">(self)</span>:</span></span><br><span class="line">        node = self.tail.prev</span><br><span class="line">        self.removeNode(node)</span><br><span class="line">        <span class="keyword">return</span> node <span class="comment">#</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CodingInterviews </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>preSum</title>
      <link href="../../p/preSum.html"/>
      <url>../../p/preSum.html</url>
      
        <content type="html"><![CDATA[<pre><code>preSum = [0] + numsfor i in range(1, len(preSum)):    preSum[i] = preSum[i-1] + preSum[i]</code></pre><h2 id="Continuous-Subarray-Sum"><a href="#Continuous-Subarray-Sum" class="headerlink" title="Continuous Subarray Sum"></a>Continuous Subarray Sum</h2><p>Given an integer array nums and an integer k, return true if nums has a continuous subarray of size at least two whose elements sum up to a multiple of k, or false otherwise.<br>An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.<br>nums = [23,2,4,6,7], k = 6 True<br>nums = [23,2,6,4,7], k = 13 False<br>TLE:</p><pre><code>preSum = [0] + numsfor i in range(1, len(preSum)):    preSum[i] = preSum[i-1] + preSum[i]for i in range(len(preSum) - 2):    for j in range(i+2, len(preSum)):        if (preSum[j] - preSum[i]) % k == 0:            return Truereturn False</code></pre><p>(presum[j] - presum[i]) % k == 0  =&gt; presum[j] % k == presum[i] % k</p><pre><code>def checkSubarraySum(self, nums: List[int], k: int) -&gt; bool:    preSum = [0] + nums    for i in range(1, len(preSum)):        preSum[i] = preSum[i-1] + preSum[i]    modset = set()    for i in range(len(preSum) - 2):        modset.add(preSum[i] % k)        if preSum[i + 2] % k  in modset:            return True    return False</code></pre><p>Extend : the number of continuous subarray sum:</p><pre><code>def checkSubarraySum(self, nums: List[int], k: int) -&gt; bool:    preSum = [0] + nums    for i in range(1, len(preSum)):        preSum[i] = preSum[i-1] + preSum[i]    modDict = dict()    res = 0    for i in range(len(preSum) - 2):        cur = preSum[i] % k        modDict[cur] = modDict.get(cur, 0) + 1        nex = preSum[i + 2] % k        if nex  in modDict:            res += modDict[nex]    return res</code></pre><h2 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h2><p><a href="https://leetcode-cn.com/problems/continuous-subarray-sum/" target="_blank" rel="noopener">523. Continuous Subarray Sum</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> preSum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coding Interviews</title>
      <link href="../../p/point-to-offer.html"/>
      <url>../../p/point-to-offer.html</url>
      
        <content type="html"><![CDATA[<h3 id="16-Pow-x-n"><a href="#16-Pow-x-n" class="headerlink" title="16.Pow(x, n)"></a>16.Pow(x, n)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myPow</span><span class="params">(self, x: float, n: int)</span> -&gt; float:</span></span><br><span class="line">    <span class="comment">#if x == 0.0: return 0.0</span></span><br><span class="line">    <span class="keyword">if</span> math.isclose(x, <span class="number">0.0</span>): <span class="keyword">return</span> <span class="number">0.0</span></span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        x, n = <span class="number">1</span> / x, -n</span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        <span class="keyword">if</span> n &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">            res *= x</span><br><span class="line">        x *= x</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span> <span class="comment"># n &gt;&gt; 1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CodingInterviews </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux cheatsheet</title>
      <link href="../../p/linux-cheatsheet.html"/>
      <url>../../p/linux-cheatsheet.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Notes</title>
      <link href="../../p/python-notes.html"/>
      <url>../../p/python-notes.html</url>
      
        <content type="html"><![CDATA[<h3 id="Rotating-functions-in-Deque"><a href="#Rotating-functions-in-Deque" class="headerlink" title="Rotating functions in Deque"></a>Rotating functions in Deque</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import collections as col</span><br><span class="line">my_deque = col.deque(<span class="string">'AABCDDEFD'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'Dequeue: '</span> + str(my_deque)</span></span>)</span><br><span class="line"><span class="selector-id">#rotate</span> to the <span class="attribute">right</span>, <span class="number">3</span> elements</span><br><span class="line">my_deque.rotate(<span class="number">3</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'Deque after rotating:'</span> + str(my_deque)</span></span>)</span><br></pre></td></tr></table></figure><p>Deque after rotating:deque([‘E’, ‘F’, ‘D’, ‘A’, ‘A’, ‘B’, ‘C’, ‘D’, ‘D’])</p><h3 id="Decorator-MyCache"><a href="#Decorator-MyCache" class="headerlink" title="Decorator MyCache"></a>Decorator MyCache</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeit</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        func(*args)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;func.__name__&#125;</span> finished in <span class="subst">&#123;end - start&#125;</span> seconds'</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@timeit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sleep_method</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'Done'</span>)</span><br><span class="line"></span><br><span class="line">sleep_method()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCache</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">    self.func = func</span><br><span class="line">    self.cache = dict()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> args <span class="keyword">not</span> <span class="keyword">in</span> self.cache:</span><br><span class="line">      self.cache[args] = self.func(*args)</span><br><span class="line">    <span class="keyword">return</span> self.cache[args]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MyCache</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(fib(<span class="number">34</span>))</span><br></pre></td></tr></table></figure><h3 id="sort-dict"><a href="#sort-dict" class="headerlink" title="sort dict"></a>sort dict</h3><p>by key:<br>d = sorted(d.keys())<br>d = sorted(d.items(),key=lambda x:x[0],reverse=True)</p><p>by value:<br>d = sorted(d.values())<br>d = sorted(d.items(),key=lambda x:x[1],reverse=True)</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>One Python Craftsman</title>
      <link href="../../p/one-python-craftsman.html"/>
      <url>../../p/one-python-craftsman.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Min-Stack</title>
      <link href="../../p/Min-Stack.html"/>
      <url>../../p/Min-Stack.html</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.<br>Implement the MinStack class:<br>MinStack() initializes the stack object.<br>void push(val) pushes the element val onto the stack.<br>void pop() removes the element on the top of the stack.<br>int top() gets the top element of the stack.<br>int getMin() retrieves the minimum element in the stack.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>[“MinStack”,”push”,”push”,”push”,”getMin”,”pop”,”top”,”getMin”]<br>[[],[-2],[0],[-3],[],[],[],[]]</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>[null,null,null,null,-3,null,0,-2]</p><h3 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h3><p>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.getMin(); // return -3<br>minStack.pop();<br>minStack.top();    // return 0<br>minStack.getMin(); // return -2</p><h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints:"></a>Constraints:</h3><p>-231 &lt;= val &lt;= 231 - 1<br>Methods pop, top and getMin operations will always be called on non-empty stacks.<br>At most 3 * 104 calls will be made to push, pop, top, and getMin.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><pre><code>class MinStack:    def __init__(self):        self.stack = []        self.minStack = []    def push(self, val: int) -&gt; None:        self.stack.append(val)        if not self.minStack or val &lt;= self.minStack[-1]:            self.minStack.append(val)    def pop(self) -&gt; None:        if self.stack:            num = self.stack.pop()            if self.minStack and num == self.minStack[-1]:                self.minStack.pop()    def top(self) -&gt; int:        return self.stack[-1]    def getMin(self) -&gt; int:        return self.minStack[-1]</code></pre><p>One stack</p><pre><code>class MinStack:    def __init__(self):        self.stack = []        self.min_value = -1    def push(self, x: int) -&gt; None:        if not self.stack:            self.stack.append(0)            self.min_value = x        else:            diff = x-self.min_value            self.stack.append(diff)            self.min_value = self.min_value if diff &gt; 0 else x    def pop(self) -&gt; None:        if self.stack:            diff = self.stack.pop()            if diff &lt; 0:                top = self.min_value                self.min_value = top - diff    def top(self) -&gt; int:        return self.min_value if self.stack[-1] &lt; 0 else self.stack[-1] + self.min_value    def getMin(self) -&gt; int:        return self.min_value if self.stack else -1</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 155 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Cheatsheet</title>
      <link href="../../p/git-cheatsheet.html"/>
      <url>../../p/git-cheatsheet.html</url>
      
        <content type="html"><![CDATA[<p>delete branch  </p><pre><code>git branch -d &lt;branch&gt;git push origin --delete &lt;branch&gt;</code></pre><p>combine commits  </p><pre><code>git rebase -i HEAD~ngit push -f</code></pre><p>abandon local change:  </p><pre><code>git fetch --allgit reset --hard origin/mastergit pull</code></pre><p>init:</p><p>Git History  </p><pre><code>April 2005Linux Torvaldsreplacement for bitkeeper to manage Linux kernel source codeopen source and free softwaredistributed version controlcompatible with linux ,macOS windowsfaster than other SCMs(100times in some cases)better safeguards against data corruptiongithub launched in 2008purchased by Microsoft 2018</code></pre><p>configuration:  </p><pre><code>system : etc/gitconfig            git config --systemuser: ~/.gitconfig                git config --globalproject: my_project/.git/config   git config</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="../../p/hello-world.html"/>
      <url>../../p/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
