<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Designing Dropbox</title>
      <link href="../../p/Designing-Dropbox.html"/>
      <url>../../p/Designing-Dropbox.html</url>
      
        <content type="html"><![CDATA[<h2 id="Why-Cloud-Storage"><a href="#Why-Cloud-Storage" class="headerlink" title="Why Cloud Storage?"></a>Why Cloud Storage?</h2><p>Cloud file storage services have become very popular recently as they simplify the storage and exchange of digital resources among multiple devices. The shift from using single personal computers to using multiple devices with different platforms and operating systems such as smartphones and tablets each with portable access from various geographical locations at any time, is believed to be accountable for the huge popularity of cloud storage services. Following are some of the top benefits of such services:</p><ul><li><strong>Availability</strong>: The motto of cloud storage services is to have data availability anywhere, anytime. Users can access their files/photos from any device whenever and wherever they like;</li><li><strong>Reliability and Durability</strong>: Another benefit of cloud storage is that it offers 100% reliability and durability of data. Cloud storage ensures that users will never lose their data by keeping multiple copies of the data stored on different geographically located servers;</li><li><strong>Scalability</strong>: Users will never have to worry about getting out of storage space. With cloud storage you have unlimited storage as long as you are ready to pay for it;</li></ul><p>If you haven’t used <a href="https://www.dropbox.com/?_hp=b&landing=dbv2" target="_blank" rel="noopener">dropbox.com</a> before, we would highly recommend creating an account there and uploading/editing a file and also going through the different options their service offers. This will help you a lot in understanding this chapter.</p><a id="more"></a><h2 id="Requirements-and-Goals-of-the-System"><a href="#Requirements-and-Goals-of-the-System" class="headerlink" title="Requirements and Goals of the System"></a>Requirements and Goals of the System</h2><blockquote><p>You should always clarify requirements at the beginning of the interview. Be sure to ask questions to find the exact scope of the system that the interviewer has in mind.</p></blockquote><p>What do we wish to achieve from a Cloud Storage system? Here are the top-level requirements for our system:</p><ul><li>Users should be able to upload and download their files/photos from any device;</li><li>Users should be able to share files or folders with other users;</li><li>Our service should support automatic synchronization between devices, i.e., after updating a file on one device, it should get synchronized on all devices;</li><li>The system should support storing large files up to a GB;</li><li>ACID is required. Atomicity, Consistency, Isolation and Durability of all file operations should be guaranteed;</li><li>Our system should support offline editing. Users should be able to add/delete/modify files while offline, and as soon as they come online, all their changes should be synced to the remote servers and other online devices;</li></ul><p><strong>Extended Requirements</strong>: The system should support snapshotting of the data, so that users can go back to any version of the files.</p><h2 id="Some-Design-Considerations"><a href="#Some-Design-Considerations" class="headerlink" title="Some Design Considerations"></a>Some Design Considerations</h2><ul><li>We should expect huge read and write volumes;</li><li>Read to write ratio is expected to be nearly the same;</li><li>Internally, files can be stored in small parts or chunks (say 4MB); this can provide a lot of benefits, i.e., all failed operations shall only be retried for smaller parts of a file. If a user fails to upload a file, then only the failing chunk will be retried;</li><li>We can reduce the amount of data exchange by transferring updated chunks only;</li><li>By removing duplicate chunks, we can save storage space and bandwidth usage;</li><li>Keeping a local copy of the metadata (file name, size, etc.) with the client can save us a lot of round trips to the server;</li><li>For small changes, clients can intelligently upload the diffs instead of the whole chunk;</li></ul><h2 id="Capacity-Estimation-and-Constraints"><a href="#Capacity-Estimation-and-Constraints" class="headerlink" title="Capacity Estimation and Constraints"></a>Capacity Estimation and Constraints</h2><ul><li>Let’s assume that we have 500M total users, and 100M Daily Active Users (DAU);</li><li>Let’s assume that on average each user connects from three different devices;</li><li>On average if a user has 200 files/photos, we will have 100 billion total files;</li><li>Let’s assume that average file size is 100KB, this would give us ten petabytes of total storage:<blockquote><p>100B * 100KB = 10PB</p></blockquote></li><li>Let’s also assume that we will have one million active connections per minute;</li></ul><h2 id="High-Level-Design"><a href="#High-Level-Design" class="headerlink" title="High-Level Design"></a>High-Level Design</h2><p>The user will specify a folder as the workspace on their device. Any file/photo/folder placed in this folder will be uploaded to the cloud, and whenever a file is modified or deleted, it will be reflected in the same way in the cloud storage. The user can specify similar workspaces on all their devices and any modification done on one device will be propagated to all other devices to have the same view of the workspace everywhere.</p><p>At a high level, we need to store files and their metadata information like File Name, File Size, Directory, etc., and who this file is shared with. So, we need some servers that can help the clients to upload/download files to Cloud Storage and some servers that can facilitate updating metadata about files and users. We also need some mechanism to notify all clients whenever an update happens so they can synchronize their files:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-Dropbox/32.png" alt></p><p>Block servers will work with the clients to upload/download files from cloud storage and Metadata servers will keep metadata of files updated in a SQL or NoSQL database. Synchronization servers will handle the workflow of notifying all clients about different changes for synchronization.</p><h2 id="Component-Design"><a href="#Component-Design" class="headerlink" title="Component Design"></a>Component Design</h2><p>Let’s go through the major components of our system one by one.</p><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>The Client Application monitors the workspace folder on the user’s machine and syncs all files/folders in it with the remote Cloud Storage. The client application will work with the storage servers to upload, download, and modify actual files to backend Cloud Storage. The client also interacts with the remote Synchronization Service to handle any file metadata updates, e.g., change in the file name, size, modification date, etc.</p><p>Here are some of the essential operations for the client:</p><ol><li>Upload and download files;</li><li>Detect file changes in the workspace folder;</li><li>Handle conflict due to offline or concurrent updates;</li></ol><p><strong>How do we handle file transfer efficiently</strong>? As mentioned above, we can break each file into smaller chunks so that we transfer only those chunks that are modified and not the whole file. Let’s say we divide each file into fixed sizes of 4MB chunks. We can statically calculate what could be an optimal chunk size based on:</p><ol><li>Storage devices we use in the cloud to optimize space utilization and Input/Output Operations Per Second (IOPS);</li><li>Network bandwidth;</li><li>Average file size in the storage;</li></ol><p>In our metadata, we should also keep a record of each file and the chunks that constitute it.</p><p><strong>Should we keep a copy of metadata with Client</strong>? Keeping a local copy of metadata not only enable us to do offline updates but also saves a lot of round trips to update remote metadata.</p><p><strong>How can clients efficiently listen to changes happening with other clients</strong>? One solution could be that the clients periodically check with the server if there are any changes. The problem with this approach is that we will have a delay in reflecting changes locally as clients will be checking for changes periodically compared to a server notifying whenever there is some change. If the client frequently checks the server for changes, it will not only be wasting bandwidth, as the server has to return an empty response most of the time, but will also be keeping the server busy. Pulling information in this manner is not scalable.<br>A solution to the above problem could be to use HTTP long polling. With long polling the client requests information from the server with the expectation that the server may not respond immediately. If the server has no new data for the client when the poll is received, instead of sending an empty response, the server holds the request open and waits for response information to become available. Once it does have new information, the server immediately sends an HTTP/S response to the client, completing the open HTTP/S request. Upon receipt of the server response, the client can immediately issue another server request for future updates.</p><p>Based on the above considerations, we can divide our client into following four parts:</p><ol><li><strong>Internal Metadata Database</strong> will keep track of all the files, chunks, their versions, and their location in the file system;</li><li><strong>Chunker</strong> will split the files into smaller pieces called chunks. It will also be responsible for reconstructing a file from its chunks. Our chunking algorithm will detect the parts of the files that have been modified by the user and only transfer those parts to the Cloud Storage; this will save us bandwidth and synchronization time;</li><li><strong>Watcher</strong> will monitor the local workspace folders and notify the Indexer of any action performed by the users, e.g., when users create, delete, or update files or folders. Watcher also listens to any changes happening on other clients that are broadcasted by Synchronization Service;</li><li><strong>Indexer</strong> will process the events received from the Watcher and update the internal metadata database with information about the chunks of the modified files. Once the chunks are successfully submitted/downloaded to the Cloud Storage, the Indexer will communicate with the remote Synchronization Service to broadcast changes to other clients and update remote metadata database;</li></ol><p><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-Dropbox/33.png" alt></p><p><strong>How should clients handle slow servers</strong>? Clients should exponentially back-off if the server is busy/not-responding. Meaning, if a server is too slow to respond, clients should delay their retries and this delay should increase exponentially.</p><p><strong>Should mobile clients sync remote changes immediately</strong>? Unlike desktop or web clients, mobile clients usually sync on demand to save user’s bandwidth and space.</p><h3 id="Metadata-Database"><a href="#Metadata-Database" class="headerlink" title="Metadata Database"></a>Metadata Database</h3><p>The Metadata Database is responsible for maintaining the versioning and metadata information about files/chunks, users, and workspaces. The Metadata Database can be a relational database such as MySQL, or a NoSQL database service such as DynamoDB. Regardless of the type of the database, the Synchronization Service should be able to provide a consistent view of the files using a database, especially if more than one user is working with the same file simultaneously. Since NoSQL data stores do not support ACID properties in favor of scalability and performance, we need to incorporate the support for ACID properties programmatically in the logic of our Synchronization Service in case we opt for this kind of database. However, using a relational database can simplify the implementation of the Synchronization Service as they natively support ACID properties.</p><p>The Metadata Database should be storing information about following objects:</p><ol><li>Chunks;</li><li>Files;</li><li>User;</li><li>Devices;</li><li>Workspace (sync folders);</li></ol><h3 id="Synchronization-Service"><a href="#Synchronization-Service" class="headerlink" title="Synchronization Service"></a>Synchronization Service</h3><p>The Synchronization Service is the component that processes file updates made by a client and applies these changes to other subscribed clients. It also synchronizes clients’ local databases with the information stored in the remote Metadata Database. The Synchronization Service is the most important part of the system architecture due to its critical role in managing the metadata and synchronizing users’ files. Desktop clients communicate with the Synchronization Service to either obtain updates from the Cloud Storage or send files and updates to the Cloud Storage and, potentially, other users. If a client was offline for a period, it polls the system for new updates as soon as they come online. When the Synchronization Service receives an update request, it checks with the Metadata Database for consistency and then proceeds with the update. Subsequently, a notification is sent to all subscribed users or devices to report the file update.</p><p>The Synchronization Service should be designed in such a way that it transmits less data between clients and the Cloud Storage to achieve a better response time. To meet this design goal, the Synchronization Service can employ a differencing algorithm to reduce the amount of the data that needs to be synchronized. Instead of transmitting entire files from clients to the server or vice versa, we can just transmit the difference between two versions of a file. Therefore, only the part of the file that has been changed is transmitted. This also decreases bandwidth consumption and cloud data storage for the end user. As described above, we will be dividing our files into 4MB chunks and will be transferring modified chunks only. Server and clients can calculate a hash (e.g., SHA-256) to see whether to update the local copy of a chunk or not. On the server, if we already have a chunk with a similar hash (even from another user), we don’t need to create another copy, we can use the same chunk.</p><p>To be able to provide an efficient and scalable synchronization protocol we can consider using a communication middleware between clients and the Synchronization Service. The messaging middleware should provide scalable message queuing and change notifications to support a high number of clients using pull or push strategies. This way, multiple Synchronization Service instances can receive requests from a global Request Queue, and the communication middleware will be able to balance its load.</p><h3 id="Message-Queuing-Service"><a href="#Message-Queuing-Service" class="headerlink" title="Message Queuing Service"></a>Message Queuing Service</h3><p>An important part of our architecture is a messaging middleware that should be able to handle a substantial number of requests. A scalable Message Queuing Service that supports asynchronous message-based communication between clients and the Synchronization Service best fits the requirements of our application. The Message Queuing Service supports asynchronous and loosely coupled message-based communication between distributed components of the system. The Message Queuing Service should be able to efficiently store any number of messages in a highly available, reliable and scalable queue.</p><p>The Message Queuing Service will implement two types of queues in our system. The Request Queue is a global queue and all clients will share it. Clients’ requests to update the Metadata Database will be sent to the Request Queue first, from there the Synchronization Service will take it to update metadata. The Response Queues that correspond to individual subscribed clients are responsible for delivering the update messages to each client. Since a message will be deleted from the queue once received by a client, we need to create separate Response Queues for each subscribed client to share update messages:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-Dropbox/34.png" alt></p><h3 id="Cloud-Block-Storage"><a href="#Cloud-Block-Storage" class="headerlink" title="Cloud/Block Storage"></a>Cloud/Block Storage</h3><p>Cloud/Block Storage stores chunks of files uploaded by the users. Clients directly interact with the storage to send and receive objects from it. Separation of the metadata from storage enables us to use any storage either in the cloud or in-house:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-Dropbox/35.png" alt></p><h2 id="File-Processing-Workflow"><a href="#File-Processing-Workflow" class="headerlink" title="File Processing Workflow"></a>File Processing Workflow</h2><p>The sequence below shows the interaction between the components of the application in a scenario when Client A updates a file that is shared with Client B and C, so they should receive the update too. If the other clients are not online at the time of the update, the Message Queuing Service keeps the update notifications in separate response queues for them until they come online later:</p><ol><li>Client A uploads chunks to cloud storage;</li><li>Client A updates metadata and commits changes;</li><li>Client A gets confirmation and notifications are sent to Clients B and C about the changes;</li><li>Client B and C receive metadata changes and download updated chunks;</li></ol><h2 id="Data-Deduplication"><a href="#Data-Deduplication" class="headerlink" title="Data Deduplication"></a>Data Deduplication</h2><p>Data deduplication is a technique used for eliminating duplicate copies of data to improve storage utilization. It can also be applied to network data transfers to reduce the number of bytes that must be sent. For each new incoming chunk, we can calculate a hash of it and compare that hash with all the hashes of the existing chunks to see if we already have the same chunk present in our storage.</p><p>We can implement deduplication in two ways in our system:</p><ul><li><strong>Post-process deduplication</strong>: With post-process deduplication, new chunks are first stored on the storage device and later some process analyzes the data looking for duplication. The benefit is that clients will not need to wait for the hash calculation or lookup to complete before storing the data, thereby ensuring that there is no degradation in storage performance. Drawbacks of this approach are:<ol><li>We will unnecessarily be storing duplicate data, though for a short time;</li><li>Duplicate data will be transferred consuming bandwidth;</li></ol></li><li><strong>In-line deduplication</strong>: Alternatively, deduplication hash calculations can be done in real-time as the clients are entering data on their device. If our system identifies a chunk that it has already stored, only a reference to the existing chunk will be added in the metadata, rather than a full copy of the chunk. This approach will give us optimal network and storage usage;</li></ul><h2 id="Metadata-Partitioning"><a href="#Metadata-Partitioning" class="headerlink" title="Metadata Partitioning"></a>Metadata Partitioning</h2><p>To scale out metadata DB, we need to partition it so that it can store information about millions of users and billions of files/chunks. We need to come up with a partitioning scheme that would divide and store our data in different DB servers.</p><p><strong>Vertical Partitioning</strong>: We can partition our database in such a way that we store tables related to one particular feature on one server. For example, we can store all the user related tables in one database and all files/chunks related tables in another database. Although this approach is straightforward to implement it has some issues:</p><ol><li>Will we still have scale issues? What if we have trillions of chunks to be stored and our database cannot support storing such a huge number of records? How would we further partition such tables?</li><li>Joining two tables in two separate databases can cause performance and consistency issues. How frequently do we have to join user and file tables?</li></ol><p><strong>Range Based Partitioning</strong>: What if we store files/chunks in separate partitions based on the first letter of the File Path? In that case, we save all the files starting with the letter “A” in one partition and those that start with the letter “B” into another partition and so on. This approach is called range based partitioning. We can even combine certain less frequently occurring letters into one database partition. We should come up with this partitioning scheme statically so that we can always store/find a file in a predictable manner.<br>The main problem with this approach is that it can lead to unbalanced servers. For example, if we decide to put all files starting with the letter “E” into a DB partition, and later we realize that we have too many files that start with the letter “E”, to such an extent that we cannot fit them into one DB partition.</p><p><strong>Hash-Based Partitioning</strong>: In this scheme we take a hash of the object we are storing and based on this hash we figure out the DB partition to which this object should go. In our case, we can take the hash of the “FileID” of the File object we are storing to determine the partition the file will be stored. Our hashing function will randomly distribute objects into different partitions, e.g., our hashing function can always map any ID to a number between [1, 256], and this number would be the partition we will store our object.</p><h2 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h2><p>We can have two kinds of caches in our system. To deal with hot files/chunks we can introduce a cache for Block storage. We can use an off-the-shelf solution like Memcached that can store whole chunks with its respective IDs/Hashes and Block servers before hitting Block storage can quickly check if the cache has desired chunk. Based on clients’ usage pattern we can determine how many cache servers we need. A high-end commercial server can have 144GB of memory; one such server can cache 36K chunks. Similarly, we can have a cache for Metadata Database.</p><p><strong>Which cache replacement policy would best fit our needs</strong>? When the cache is full, and we want to replace a chunk with a newer/hotter chunk, how would we choose? Least Recently Used (LRU) can be a reasonable policy for our system. Under this policy, we discard the least recently used chunk first.</p><h2 id="Load-Balancer"><a href="#Load-Balancer" class="headerlink" title="Load Balancer"></a>Load Balancer</h2><p>We can add the Load balancing layer at two places in our system:</p><ol><li>Between Clients and Block servers;</li><li>Between Clients and Metadata servers;</li></ol><p>Initially, a simple Round Robin approach can be adopted that distributes incoming requests equally among backend servers. This LB is simple to implement and does not introduce any overhead. Another benefit of this approach is if a server is dead, LB will take it out of the rotation and will stop sending any traffic to it. A problem with Round Robin LB is, it won’t take server load into consideration. If a server is overloaded or slow, the LB will not stop sending new requests to that server. To handle this, a more intelligent LB solution can be placed that periodically queries backend server about their load and adjusts traffic based on that.</p><h2 id="Security-Permissions-and-File-Sharing"><a href="#Security-Permissions-and-File-Sharing" class="headerlink" title="Security, Permissions and File Sharing"></a>Security, Permissions and File Sharing</h2><p>One of the primary concerns users will have while storing their files in the cloud is the privacy and security of their data, especially since in our system users can share their files with other users or even make them public to share it with everyone. To handle this, we will be storing the permissions of each file in our metadata DB to reflect what files are visible or modifiable by any user.</p>]]></content>
      
      
      
        <tags>
            
            <tag> SystemDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Designing Pastebin</title>
      <link href="../../p/Designing-Pastebin.html"/>
      <url>../../p/Designing-Pastebin.html</url>
      
        <content type="html"><![CDATA[<h2 id="What-is-Pastebin"><a href="#What-is-Pastebin" class="headerlink" title="What is Pastebin?"></a>What is Pastebin?</h2><p>Pastebin like services enable users to store plain text or images over the network (typically the Internet) and generate unique URLs to access the uploaded data. Such services are also used to share data over the network quickly, as users would just need to pass the URL to let other users see it.</p><p>If you haven’t used <a href="https://pastebin.com/" target="_blank" rel="noopener">pastebin.com</a> before, please try creating a new “Paste” there and spend some time going through the different options their service offers. This will help you a lot in understanding this chapter.</p><h2 id="Requirements-and-Goals-of-the-System"><a href="#Requirements-and-Goals-of-the-System" class="headerlink" title="Requirements and Goals of the System"></a>Requirements and Goals of the System</h2><p>Our Pastebin service should meet the following requirements:<br><strong>Functional Requirements</strong>:</p><ol><li>Users should be able to upload or “paste” their data and get a unique URL to access it;</li><li>Users will only be able to upload text;</li><li>Data and links will expire after a specific time span automatically; users should also be able to specify expiration time;</li><li>Users should optionally be able to pick a custom alias for their paste;</li></ol><p><strong>Non-Functional Requirements</strong>:</p><ol><li>The system should be highly reliable, any data uploaded should not be lost;</li><li>The system should be highly available. This is required because if our service is down, users will not be able to access their pastes;</li><li>Users should be able to access their pastes in real-time with minimum latency;</li><li>Paste links should not be guessable (not predictable);</li></ol><p><strong>Extended Requirements</strong>:</p><ol><li>Analytics, e.g., how many times a paste was accessed?</li><li>Our service should also be accessible through REST APIs by other services;</li></ol><a id="more"></a><h2 id="Some-Design-Considerations"><a href="#Some-Design-Considerations" class="headerlink" title="Some Design Considerations"></a>Some Design Considerations</h2><p>Pastebin shares some requirements with URL Shortening Service, but there are some additional design considerations we should keep in mind.</p><p><strong>What should be the limit on the amount of text user can paste at a time</strong>? We can limit users not to paste bigger than 10MB to stop the abuse of the service.</p><p><strong>Should we impose size limits on custom URLs</strong>? Since our service supports custom URLs, users can pick any URL that they like, but providing a custom URL is not mandatory. However, it is reasonable (and often desirable) to impose a size limit on custom URLs, so that we have a consistent URL database.</p><h2 id="Capacity-Estimation-and-Constraints"><a href="#Capacity-Estimation-and-Constraints" class="headerlink" title="Capacity Estimation and Constraints"></a>Capacity Estimation and Constraints</h2><p><strong>Traffic estimates</strong>: Pastebin services are not expected to have traffic similar to Twitter or Facebook, let’s assume here that we get one million new pastes added to our system every day. This leaves us with five million reads per day.<br>New pastes per second:</p><blockquote><p>1M / (24 hours * 3600 seconds) ≈ 12 pastes/sec</p></blockquote><p>Paste reads per second:</p><blockquote><p>5M / (24 hours * 3600 seconds) ≈ 58 reads/sec</p></blockquote><p><strong>Storage estimates</strong>: Users can upload maximum 10MB of data; commonly Pastebin like services are used to share source code, configs, or logs. Such texts are not huge, so let’s assume that each paste on average contains 10KB.<br>At this rate, we will be storing 10GB of data per day:</p><blockquote><p>1M * 10KB = 10 GB/day</p></blockquote><p>If we want to store this data for ten years we would need the total storage capacity of 36TB.<br>With 1M pastes every day we will have 3.6 billion pastes in 10 years. We need to generate and store keys to uniquely identify these pastes. If we use base64 encoding ([A-Z, a-z, 0-9, ., -]) we would need six letters strings:</p><blockquote><p>64^6 ≈ 68.7 billion unique strings</p></blockquote><p>If it takes one byte to store one character, total size required to store 3.6B keys would be:</p><blockquote><p>3.6B * 6 = 21.6 GB</p></blockquote><p>21.6GB is negligible compared to 36TB. To keep some margin, we will assume a 70% capacity model (meaning we don’t want to use more than 70% of our total storage capacity at any point), which raises our storage needs to 51.4TB.</p><p><strong>Bandwidth estimates</strong>: For write requests, we expect 12 new pastes per second, resulting in 120KB of ingress per second:</p><blockquote><p>12 * 10KB = 120 KB/s</p></blockquote><p>As for the read request, we expect 58 requests per second. Therefore, total data egress (sent to users) will be 0.58 MB/s:</p><blockquote><p>58 * 10KB = 0.58 MB/s</p></blockquote><p>Although total ingress and egress are not big, we should keep these numbers in mind while designing our service.</p><p><strong>Memory estimates</strong>: We can cache some of the hot pastes that are frequently accessed. Following the 80-20 rule, meaning 20% of hot pastes generate 80% of traffic, we would like to cache these 20% pastes.<br>Since we have 5M read requests per day, to cache 20% of these requests, we would need:</p><blockquote><p>0.2 * 5M * 10KB = 10 GB</p></blockquote><h2 id="System-APIs"><a href="#System-APIs" class="headerlink" title="System APIs"></a>System APIs</h2><p>We can have SOAP or REST APIs to expose the functionality of our service. Following could be the definitions of the APIs to create/retrieve/delete pastes:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addPaste(api_dev_key, paste_data, custom_url=None user_name=None, paste_name=None, expire_date=None)</span><br></pre></td></tr></table></figure><p><strong>Parameters</strong>:</p><ul><li>api_dev_key: The API developer key of a registered account. This will be used to, among other things, throttle users based on their allocated quota;</li><li>paste_data: Textual data of the paste;</li><li>custom_url: Optional custom URL;</li><li>user_name: Optional user name to be used to generate URL;</li><li>paste_name: Optional name of the paste;</li><li>expire_date: Optional expiration date for the paste;</li></ul><p><strong>Returns</strong>: A successful insertion returns the URL through which the paste can be accessed, otherwise, it will return an error code.</p><p>Similarly, we can have Retrieve and Delete Paste APIs:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getPaste(api_dev_key, api_paste_key)</span><br></pre></td></tr></table></figure><p>Where “api_paste_key” is a string representing the Paste Key of the paste to be retrieved. This API will return the textual data of the paste.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deletePaste(api_dev_key, api_paste_key)</span><br></pre></td></tr></table></figure><p>A successful deletion returns “true”, otherwise returns “false”.</p><h2 id="Database-Design"><a href="#Database-Design" class="headerlink" title="Database Design"></a>Database Design</h2><p>A few observations about the nature of the data we are storing:</p><ol><li>We need to store billions of records;</li><li>Each metadata object we are storing would be small (less than 1KB);</li><li>Each paste object we are storing can be of medium size (it can be a few MB);</li><li>There are no relationships between records, except if we want to store which user created what paste;</li><li>Our service is read-heavy;</li></ol><p><strong>Database Schema</strong>: We would need two tables, one for storing information about the pastes and the other for users’ data:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-Pastebin/25.png" alt></p><p>Here, “URLHash” is the URL equivalent of the TinyURL, and “ContentKey” is a reference to an external object storing the contents of the paste; we’ll discuss the external storage of the paste contents later in the chapter.</p><h2 id="High-Level-Design"><a href="#High-Level-Design" class="headerlink" title="High-Level Design"></a>High-Level Design</h2><p>At a high level, we need an application layer that will serve all the read and write requests. Application layer will talk to a storage layer to store and retrieve data. We can segregate our storage layer with one database storing metadata related to each paste, users, etc., while the other storing the paste contents in some object storage (like Amazon S3). This division of data will also allow us to scale them individually:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-Pastebin/26.png" alt></p><h2 id="Component-Design"><a href="#Component-Design" class="headerlink" title="Component Design"></a>Component Design</h2><h3 id="Application-layer"><a href="#Application-layer" class="headerlink" title="Application layer"></a>Application layer</h3><p>Our application layer will process all incoming and outgoing requests. The application servers will be talking to the backend data store components to serve the requests.</p><p><strong>How to handle a write-request</strong>? Upon receiving a write-request, our application server will generate a six-letter random string, which would serve as the key of the paste (if the user has not provided a custom key). The application server will then store the contents of the paste and the generated key in the database. After the successful insertion, the server can return the key to the user. One possible problem here could be that the insertion fails because of a duplicate key. Since we are generating a random key, there is a possibility that the newly generated key could match an existing one. In that case, we should regenerate a new key and try again. We should keep retrying until we don’t see failure due to the duplicate key. We should return an error to the user if the custom key they have provided is already present in our database.</p><p>Another solution for the above problem could be to run a standalone <strong>Key Generation Service (KGS)</strong> that generates random six letters strings beforehand and stores them in a database (let’s call it key-DB). Whenever we want to store a new paste, we will just take one of the already generated keys and use it. This approach will make things quite simple and fast since we will not be worrying about duplications or collisions. KGS will make sure all the keys inserted in key-DB are unique. KGS can use two tables to store keys, one for keys that are not used yet and one for all the used keys. As soon as KGS gives some keys to an application server, it can move these to the used keys table. KGS can always keep some keys in memory so that whenever a server needs them, it can quickly provide them. As soon as KGS loads some keys in memory, it can move them to the used keys table, this way we can make sure each server gets unique keys. If KGS dies before using all the keys loaded in memory, we will be wasting those keys. We can ignore these keys given that we have a huge number of them.</p><p><strong>Isn’t KGS a single point of failure</strong>? Yes, it is. To solve this, we can have a standby replica of KGS and whenever the primary server dies it can take over to generate and provide keys.</p><p><strong>Can each app server cache some keys from key-DB</strong>? Yes, this can surely speed things up. Although in this case, if the application server dies before consuming all the keys, we will end up losing those keys. This could be acceptable since we have 68.7B unique six letters keys, which are a lot more than we require.</p><p><strong>How does it handle a paste read request</strong>? Upon receiving a read paste request, the application service layer contacts the datastore. The datastore searches for the key, and if it is found, it returns the paste’s contents. Otherwise, an error code is returned.</p><h3 id="Datastore-layer"><a href="#Datastore-layer" class="headerlink" title="Datastore layer"></a>Datastore layer</h3><p>We can divide our datastore layer into two:</p><ol><li>Metadata database: We can use a relational database like MySQL or a Distributed Key-Value store like Dynamo or Cassandra;</li><li>Object storage: We can store our contents in an Object Storage like Amazon S3. Whenever we feel like hitting our full capacity on content storage, we can easily increase it by adding more servers;</li></ol><p><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-Pastebin/27.png" alt></p><h2 id="Purging-or-DB-Cleanup"><a href="#Purging-or-DB-Cleanup" class="headerlink" title="Purging or DB Cleanup"></a>Purging or DB Cleanup</h2><p>Please see <a href="https://wangleileichina.github.io/p/Designing-TinyURL.html">Designing TinyURL</a>.</p><h2 id="Data-Partitioning-and-Replication"><a href="#Data-Partitioning-and-Replication" class="headerlink" title="Data Partitioning and Replication"></a>Data Partitioning and Replication</h2><p>Please see <a href="https://wangleileichina.github.io/p/Designing-TinyURL.html">Designing TinyURL</a>.</p><h2 id="Cache-and-Load-Balancer"><a href="#Cache-and-Load-Balancer" class="headerlink" title="Cache and Load Balancer"></a>Cache and Load Balancer</h2><p>Please see <a href="https://wangleileichina.github.io/p/Designing-TinyURL.html">Designing TinyURL</a>.</p><h2 id="Security-and-Permissions"><a href="#Security-and-Permissions" class="headerlink" title="Security and Permissions"></a>Security and Permissions</h2><p>Please see <a href="https://wangleileichina.github.io/p/Designing-TinyURL.html">Designing TinyURL</a>.</p>]]></content>
      
      
      
        <tags>
            
            <tag> SystemDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxies</title>
      <link href="../../p/Proxies.html"/>
      <url>../../p/Proxies.html</url>
      
        <content type="html"><![CDATA[<p>A <code>Proxy Server</code> is an intermediate server between the client and the back-end server. Clients connect to proxy servers to make a request for a service like a web page, file, connection, etc. In short, a proxy server is a piece of software or hardware that acts as an intermediary for requests from clients seeking resources from other servers:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Proxies/05.png" alt></p><p>Typically, proxies are used to filter requests, log requests, or sometimes transform requests (by adding/removing headers, encrypting/decrypting, or compressing a resource). Another advantage of a proxy server is that its cache can serve a lot of requests. If multiple clients access a particular resource, the proxy server can cache it and serve it to all the clients without going to the remote server.</p><a id="more"></a><h2 id="Proxy-Server-Types"><a href="#Proxy-Server-Types" class="headerlink" title="Proxy Server Types"></a>Proxy Server Types</h2><p>Proxies can reside on the client’s local server or anywhere between the client and the remote servers. Here are a few famous types of proxy servers:</p><ul><li><strong>Open Proxy</strong>: An open proxy is a proxy server that is accessible by any Internet user. Generally, a proxy server only allows users within a network group (i.e., a closed proxy) to store and forward Internet services such as DNS or web pages to reduce and control the bandwidth used by the group. With an open proxy, however, any user on the Internet is able to use this forwarding service. There two famous open proxy types:<ol><li><strong>Anonymous Proxy</strong>: This proxy reveals іts identity аs а server but does not disclose the іnіtіаl IP address. Though this proxy server cаn be discovered easily іt cаn be beneficial for some users аs іt hides their IP address;</li><li><strong>Transparent Proxy</strong>: Thіs proxy server аgаіn іdentіfіes іtself, аnd wіth the support of HTTP heаders, the fіrst IP аddress cаn be vіewed. The mаіn benefіt of usіng thіs sort of server іs іts аbіlіty to cаche the websіtes;</li></ol></li><li><strong>Reverse Proxy</strong>: A reverse proxy retrieves resources on behalf of a client from one or more servers. These resources are then returned to the client, appearing as if they originated from the proxy server itself;</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> SystemDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Indexes</title>
      <link href="../../p/Indexes.html"/>
      <url>../../p/Indexes.html</url>
      
        <content type="html"><![CDATA[<p>Indexes are well known when it comes to databases. Sooner or later there comes a time when database performance is no longer satisfactory. One of the very first things you should turn to when that happens is database indexing.</p><p>The goal of creating an index on a particular table in a database is to make it faster to search through the table and find the row or rows that we want. Indexes can be created using one or more columns of a database table, providing the basis for both rapid random lookups and efficient access of ordered records.</p><h2 id="Example-A-Library-Catalog"><a href="#Example-A-Library-Catalog" class="headerlink" title="Example: A Library Catalog"></a>Example: A Library Catalog</h2><p>A library catalog is a register that contains the list of books found in a library. The catalog is organized like a database table generally with four columns: book title, writer, subject, and date of publication. There are usually two such catalogs: one sorted by the book title and one sorted by the writer name. That way, you can either think of a writer you want to read and then look through their books or look up a specific book title you know you want to read in case you don’t know the writer’s name. These catalogs are like indexes for the database of books. They provide a sorted list of data that is easily searchable by relevant information.</p><p>Simply saying, an index is a data structure that can be perceived as a table of contents that points us to the location where actual data lives. So when we create an index on a column of a table, we store that column and a pointer to the whole row in the index. Let’s assume a table containing a list of books, the following diagram shows how an index on the “Title” column looks like:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Indexes/04.png" alt></p><a id="more"></a><p>Just like a traditional relational data store, we can also apply this concept to larger datasets. The trick with indexes is that we must carefully consider how users will access the data. In the case of data sets that are many terabytes in size, but have very small payloads (e.g., 1 KB), indexes are a necessity for optimizing data access. Finding a small payload in such a large dataset can be a real challenge, since we can’t possibly iterate over that much data in any reasonable time. Furthermore, it is very likely that such a large data set is spread over several physical devices—this means we need some way to find the correct physical location of the desired data. Indexes are the best way to do this.</p><h2 id="How-do-Indexes-Decrease-Write-Performance"><a href="#How-do-Indexes-Decrease-Write-Performance" class="headerlink" title="How do Indexes Decrease Write Performance?"></a>How do Indexes Decrease Write Performance?</h2><p>An index can dramatically speed up data retrieval but may itself be large due to the additional keys, which slow down data insertion &amp; update.</p><p>When adding rows or making updates to existing rows for a table with an active index, we not only have to write the data but also have to update the index. This will decrease the write performance. This performance degradation applies to all insert, update, and delete operations for the table. For this reason, adding unnecessary indexes on tables should be avoided and indexes that are no longer used should be removed. To reiterate, adding indexes is about improving the performance of search queries. If the goal of the database is to provide a data store that is often written to and rarely read from, in that case, decreasing the performance of the more common operation, which is writing, is probably not worth the increase in performance we get from reading.</p><p>For more details, see <a href="https://en.wikipedia.org/wiki/Database_index" target="_blank" rel="noopener">Database Indexes</a>.</p>]]></content>
      
      
      
        <tags>
            
            <tag> SystemDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data partitioning</title>
      <link href="../../p/Data-partitioning.html"/>
      <url>../../p/Data-partitioning.html</url>
      
        <content type="html"><![CDATA[<p>Data partitioning is a technique to break up a big database (DB) into many smaller parts. It is the process of splitting up a DB/table across multiple machines to improve the manageability, performance, availability, and load balancing of an application. The justification for data partitioning is that, after a certain scale point, it is cheaper and more feasible to scale horizontally by adding more machines than to grow it vertically by adding beefier servers.</p><h2 id="Partitioning-Methods"><a href="#Partitioning-Methods" class="headerlink" title="Partitioning Methods"></a>Partitioning Methods</h2><p>There are many different schemes one could use to decide how to break up an application database into multiple smaller DBs. Below are three of the most popular schemes used by various large scale applications:</p><ol><li><strong>Horizontal Partitioning</strong>: In this scheme, we put different rows into different tables. For example, if we are storing different places in a table, we can decide that locations with ZIP codes less than 10000 are stored in one table and places with ZIP Codes greater than 10000 are stored in a separate table. This is also called a range based partitioning as we are storing different ranges of data in separate tables. Horizontal partitioning is also called as Data Sharding.<br> The key problem with this approach is that if the value whose range is used for partitioning isn’t chosen carefully, then the partitioning scheme will lead to unbalanced servers. In the previous example, splitting location based on their Zip Codes assumes that places will be evenly distributed across the different Zip Codes. This assumption is not valid as there will be a lot of places in a thickly populated area like Manhattan as compared to its suburb cities;</li><li><strong>Vertical Partitioning</strong>: In this scheme, we divide our data to store tables related to a specific feature in their own server. For example, if we are building Instagram like application - where we need to store data related to users, photos they upload, and people they follow - we can decide to place user profile information on one DB server, friend lists on another, and photos on a third server.<br> Vertical partitioning is straightforward to implement and has a low impact on the application. The main problem with this approach is that if our application experiences additional growth, then it may be necessary to further partition a feature specific DB across various servers (e.g., it would not be possible for a single server to handle all the metadata queries for 10 billion photos by 140 million users);</li><li><strong>Directory Based Partitioning</strong>: A loosely coupled approach to work around issues mentioned in the above schemes is to create a lookup service which knows your current partitioning scheme and abstracts it away from the DB access code. So, to find out where a particular data entity resides, we query the directory server that holds the mapping between each tuple key to its DB server. This loosely coupled approach means we can perform tasks like adding servers to the DB pool or changing our partitioning scheme without having an impact on the application;</li></ol><a id="more"></a><h2 id="Partitioning-Criteria"><a href="#Partitioning-Criteria" class="headerlink" title="Partitioning Criteria"></a>Partitioning Criteria</h2><ul><li><strong>Key or Hash-based partitioning</strong>: Under this scheme, we apply a hash function to some key attributes of the entity we are storing; that yields the partition number. For example, if we have 100 DB servers and our ID is a numeric value that gets incremented by one each time a new record is inserted. In this example, the hash function could be “ID % 100”, which will give us the server number where we can store/read that record. This approach should ensure a uniform allocation of data among servers. The fundamental problem with this approach is that it effectively fixes the total number of DB servers, since adding new servers means changing the hash function which would require redistribution of data and downtime for the service. A workaround for this problem is to use Consistent Hashing;</li><li><strong>List partitioning</strong>: In this scheme, each partition is assigned a list of values, so whenever we want to insert a new record, we will see which partition contains our key and then store it there. For example, we can decide all users living in Iceland, Norway, Sweden, Finland, or Denmark will be stored in a partition for the Nordic countries;</li><li><strong>Round-robin partitioning</strong>: This is a very simple strategy that ensures uniform data distribution. With “n” partitions, the “i” tuple is assigned to partition (i mod n);</li><li><strong>Composite partitioning</strong>: Under this scheme, we combine any of the above partitioning schemes to devise a new scheme. For example, first applying a list partitioning scheme and then a hash based partitioning. Consistent hashing could be considered a composite of hash and list partitioning where the hash reduces the key space to a size that can be listed;</li></ul><h2 id="Common-Problems-of-Data-Partitioning"><a href="#Common-Problems-of-Data-Partitioning" class="headerlink" title="Common Problems of Data Partitioning"></a>Common Problems of Data Partitioning</h2><p>On a partitioned database, there are certain extra constraints on the different operations that can be performed. Most of these constraints are due to the fact that operations across multiple tables or multiple rows in the same table will no longer run on the same server. Below are some of the constraints and additional complexities introduced by partitioning:</p><ul><li><strong>Joins and Denormalization</strong>: Performing joins on a database which is running on one server is straightforward, but once a database is partitioned and spread across multiple machines it is often not feasible to perform joins that span database partitions. Such joins will not be performance efficient since data has to be compiled from multiple servers. A common workaround for this problem is to denormalize the database so that queries that previously required joins can be performed from a single table. Of course, the service now has to deal with all the perils of denormalization such as data inconsistency；</li><li><strong>Referential Integrity</strong>: As we saw that performing a cross-partition query on a partitioned database is not feasible, similarly, trying to enforce data integrity constraints such as foreign keys in a partitioned database can be extremely difficult.<br>Most of RDBMS do not support foreign keys constraints across databases on different database servers. Which means that applications that require referential integrity on partitioned databases often have to enforce it in application code. Often in such cases, applications have to run regular SQL jobs to clean up dangling references;</li><li><strong>Rebalancing</strong>: There could be many reasons we have to change our partitioning scheme:<ul><li>The data distribution is not uniform, e.g., there are a lot of places for a particular ZIP code that cannot fit into one database partition;</li><li>There is a lot of load on a partition, e.g., there are too many requests being handled by the DB partition dedicated to user photos;</li></ul></li></ul><p>In such cases, either we have to create more DB partitions or have to rebalance existing partitions, which means the partitioning scheme changed and all existing data moved to new locations. Doing this without incurring downtime is extremely difficult. Using a scheme like directory based partitioning does make rebalancing a more palatable experience at the cost of increasing the complexity of the system and creating a new single point of failure (i.e., the lookup service/database).</p>]]></content>
      
      
      
        <tags>
            
            <tag> SystemDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Caching</title>
      <link href="../../p/Caching.html"/>
      <url>../../p/Caching.html</url>
      
        <content type="html"><![CDATA[<p>Load balancing helps you scale horizontally across an ever-increasing number of servers, but caching will enable you to make vastly better use of the resources you already have as well as making otherwise unattainable product requirements feasible. Caches take advantage of the locality of reference principle: recently requested data is likely to be requested again. They are used in almost every layer of computing: hardware, operating systems, web browsers, web applications, and more. A cache is like short-term memory: it has a limited amount of space, but is typically faster than the original data source and contains the most recently accessed items. Caches can exist at all levels in architecture, but are often found at the level nearest to the front end where they are implemented to return data quickly without taxing downstream levels.</p><h2 id="Application-Server-Cache"><a href="#Application-Server-Cache" class="headerlink" title="Application Server Cache"></a>Application Server Cache</h2><p>Placing a cache directly on a request layer node enables the local storage of response data. Each time a request is made to the service, the node will quickly return local cached data if it exists. If it is not in the cache, the requesting node will query the data from disk. The cache on one request layer node could also be located both in memory (which is very fast) and on the node’s local disk (faster than going to network storage).</p><p>What happens when you expand this to many nodes? If the request layer is expanded to multiple nodes, it’s still quite possible to have each node host its own cache. However, if your load balancer randomly distributes requests across the nodes, the same request will go to different nodes, thus increasing cache misses. Two choices for overcoming this hurdle are global caches and distributed caches.</p><a id="more"></a><h2 id="Content-Distribution-Network"><a href="#Content-Distribution-Network" class="headerlink" title="Content Distribution Network"></a>Content Distribution Network</h2><p>CDNs are a kind of cache that comes into play for sites serving large amounts of static media. In a typical CDN setup, a request will first ask the CDN for a piece of static media; the CDN will serve that content if it has it locally available. If it isn’t available, the CDN will query the back-end servers for the file, cache it locally, and serve it to the requesting user.</p><p>If the system we are building isn’t yet large enough to have its own CDN, we can ease a future transition by serving the static media off a separate subdomain (e.g., static.yourservice.com) using a lightweight HTTP server like Nginx, and cut-over the DNS from your servers to a CDN later.</p><h2 id="Cache-Invalidation"><a href="#Cache-Invalidation" class="headerlink" title="Cache Invalidation"></a>Cache Invalidation</h2><p>While caching is fantastic, it does require some maintenance for keeping cache coherent with the source of truth (e.g., database). If the data is modified in the database, it should be invalidated in the cache; if not, this can cause inconsistent application behavior.</p><p>Solving this problem is known as cache invalidation; there are three main schemes that are used:</p><ul><li><strong>Write-through cache</strong>: Under this scheme, data is written into the cache and the corresponding database at the same time. The cached data allows for fast retrieval and, since the same data gets written in the permanent storage, we will have complete data consistency between the cache and the storage. Also, this scheme ensures that nothing will get lost in case of a crash, power failure, or other system disruptions.<br>Although, write through minimizes the risk of data loss, since every write operation must be done twice before returning success to the client, this scheme has the disadvantage of higher latency for write operations;</li><li><strong>Write-around cache</strong>: This technique is similar to write through cache, but data is written directly to permanent storage, bypassing the cache. This can reduce the cache being flooded with write operations that will not subsequently be re-read, but has the disadvantage that a read request for recently written data will create a “cache miss” and must be read from slower back-end storage and experience higher latency;</li><li><strong>Write-back cache</strong>: Under this scheme, data is written to cache alone and completion is immediately confirmed to the client. The write to the permanent storage is done after specified intervals or under certain conditions. This results in low latency and high throughput for write-intensive applications, however, this speed comes with the risk of data loss in case of a crash or other adverse event because the only copy of the written data is in the cache;</li></ul><h2 id="Cache-Eviction-Policies"><a href="#Cache-Eviction-Policies" class="headerlink" title="Cache Eviction Policies"></a>Cache Eviction Policies</h2><p>Following are some of the most common cache eviction policies:</p><ol><li>First In First Out (FIFO): The cache evicts the first block accessed first without any regard to how often or how many times it was accessed before;</li><li>Last In First Out (LIFO): The cache evicts the block accessed most recently first without any regard to how often or how many times it was accessed before;</li><li>Least Recently Used (LRU): Discards the least recently used items first;</li><li>Most Recently Used (MRU): Discards, in contrast to LRU, the most recently used items first;</li><li>Least Frequently Used (LFU): Counts how often an item is needed. Those that are used least often are discarded first;</li><li>Random Replacement (RR): Randomly selects a candidate item and discards it to make space when necessary;</li></ol><p>Following links have some good discussion about caching:<br>[1] <a href="https://en.wikipedia.org/wiki/Cache_(computing)" target="_blank" rel="noopener">Cache</a><br>[2] <a href="https://lethain.com/introduction-to-architecting-systems-for-scale/" target="_blank" rel="noopener">Introduction to architecting systems</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SystemDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>System Design Basics</title>
      <link href="../../p/System-Design-Basics.html"/>
      <url>../../p/System-Design-Basics.html</url>
      
        <content type="html"><![CDATA[<p>Whenever we are designing a large system, we need to consider a few things:</p><ol><li>What are the different architectural pieces that can be used?</li><li>How do these pieces work with each other?</li><li>How can we best utilize these pieces: what are the right tradeoffs?</li></ol><p>Investing in scaling before it is needed is generally not a smart business proposition; however, some forethought into the design can save valuable time and resources in the future. In the following chapters, we will try to define some of the core building blocks of scalable systems. Familiarizing these concepts would greatly benefit in understanding distributed system concepts. In the next section, we will go through Consistent Hashing, CAP Theorem, Load Balancing, Caching, Data Partitioning, Indexes, Proxies, Queues, Replication, and choosing between SQL vs. NoSQL.</p><p>Key characteristics of a distributed system include Scalability, Reliability, Availability, Efficiency, and Manageability.</p><a id="more"></a><h2 id="Scalability"><a href="#Scalability" class="headerlink" title="Scalability"></a>Scalability</h2><p>Scalability is the capability of a system, process, or a network to grow and manage increased demand. Any distributed system that can continuously evolve in order to support the growing amount of work is considered to be scalable.</p><p>A system may have to scale because of many reasons like increased data volume or increased amount of work, e.g., number of transactions. A scalable system would like to achieve this scaling without performance loss.</p><p>Generally, the performance of a system, although designed (or claimed) to be scalable, declines with the system size due to the management or environment cost. For instance, network speed may become slower because machines tend to be far apart from one another. More generally, some tasks may not be distributed, either because of their inherent atomic nature or because of some flaw in the system design. At some point, such tasks would limit the speed-up obtained by distribution. A scalable architecture avoids this situation and attempts to balance the load on all the participating nodes evenly.</p><p><strong>Horizontal vs. Vertical Scaling</strong>: Horizontal scaling means that you scale by adding more servers into your pool of resources whereas Vertical scaling means that you scale by adding more power (CPU, RAM, Storage, etc.) to an existing server:<br><img src="https://raw.githubusercontent.com/snlndod/mPOST/master/SystemDesign/educative/00.png" alt></p><p>With horizontal-scaling it is often easier to scale dynamically by adding more machines into the existing pool; Vertical-scaling is usually limited to the capacity of a single server and scaling beyond that capacity often involves downtime and comes with an upper limit.</p><p>Good examples of horizontal scaling are <code>Cassandra</code> and <code>MongoDB</code> as they both provide an easy way to scale horizontally by adding more machines to meet growing needs. Similarly, a good example of vertical scaling is <code>MySQL</code> as it allows for an easy way to scale vertically by switching from smaller to bigger machines. However, this process often involves downtime.</p><h2 id="Reliability"><a href="#Reliability" class="headerlink" title="Reliability"></a>Reliability</h2><p>By definition, reliability is the probability a system will fail in a given period. In simple terms, a distributed system is considered reliable if it keeps delivering its services even when one or several of its software or hardware components fail. Reliability represents one of the main characteristics of any distributed system, since in such systems any failing machine can always be replaced by another healthy one, ensuring the completion of the requested task.</p><p>Take the example of a large electronic commerce store (like <code>Amazon</code>), where one of the primary requirement is that any user transaction should never be canceled due to a failure of the machine that is running that transaction. For instance, if a user has added an item to their shopping cart, the system is expected not to lose it. A reliable distributed system achieves this through redundancy of both the software components and data. If the server carrying the user’s shopping cart fails, another server that has the exact replica of the shopping cart should replace it.</p><p>Obviously, redundancy has a cost and a reliable system has to pay that to achieve such resilience for services by eliminating every single point of failure.</p><h2 id="Availability"><a href="#Availability" class="headerlink" title="Availability"></a>Availability</h2><p>By definition, availability is the time a system remains operational to perform its required function in a specific period. It is a simple measure of the percentage of time that a system, service, or a machine remains operational under normal conditions. An aircraft that can be flown for many hours a month without much downtime can be said to have a high availability. Availability takes into account maintainability, repair time, spares availability, and other logistics considerations. If an aircraft is down for maintenance, it is considered not available during that time.</p><p>Reliability is availability over time considering the full range of possible real-world conditions that can occur. An aircraft that can make it through any possible weather safely is more reliable than one that has vulnerabilities to possible conditions.</p><p><strong>Reliability vs. Availability</strong>: If a system is reliable, it is available. However, if it is available, it is not necessarily reliable. In other words, high reliability contributes to high availability, but it is possible to achieve a high availability even with an unreliable product by minimizing repair time and ensuring that spares are always available when they are needed. Let’s take the example of an online retail store that has 99.99% availability for the first two years after its launch. However, the system was launched without any information security testing. The customers are happy with the system, but they don’t realize that it isn’t very reliable as it is vulnerable to likely risks. In the third year, the system experiences a series of information security incidents that suddenly result in extremely low availability for extended periods of time. This results in reputational and financial damage to the customers.</p><h2 id="Efficiency"><a href="#Efficiency" class="headerlink" title="Efficiency"></a>Efficiency</h2><p>To understand how to measure the efficiency of a distributed system, let’s assume we have an operation that runs in a distributed manner and delivers a set of items as result. Two standard measures of its efficiency are the response time (or latency) that denotes the delay to obtain the first item and the throughput (or bandwidth) which denotes the number of items delivered in a given time unit (e.g., a second). The two measures correspond to the following unit costs:</p><ul><li>Number of messages globally sent by the nodes of the system regardless of the message size;</li><li>Size of messages representing the volume of data exchanges;</li></ul><p>The complexity of operations supported by distributed data structures (e.g., searching for a specific key in a distributed index) can be characterized as a function of one of these cost units. Generally speaking, the analysis of a distributed structure in terms of “number of messages” is over-simplistic. It ignores the impact of many aspects, including the network topology, the network load, and its variation, the possible heterogeneity of the software and hardware components involved in data processing and routing, etc. However, it is quite difficult to develop a precise cost model that would accurately take into account all these performance factors; therefore, we have to live with rough but robust estimates of the system behavior.</p><h2 id="Serviceability-or-Manageability"><a href="#Serviceability-or-Manageability" class="headerlink" title="Serviceability or Manageability"></a>Serviceability or Manageability</h2><p>Another important consideration while designing a distributed system is how easy it is to operate and maintain. Serviceability or manageability is the simplicity and speed with which a system can be repaired or maintained; if the time to fix a failed system increases, then availability will decrease. Things to consider for manageability are the ease of diagnosing and understanding problems when they occur, ease of making updates or modifications, and how simple the system is to operate (i.e., does it routinely operate without failure or exceptions?).</p><p>Early detection of faults can decrease or avoid system downtime. For example, some enterprise systems can automatically call a service center (without human intervention) when the system experiences a system fault.</p>]]></content>
      
      
      
        <tags>
            
            <tag> SystemDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 语言精要-3</title>
      <link href="../../p/Python-%E8%AF%AD%E8%A8%80%E7%B2%BE%E8%A6%81-3.html"/>
      <url>../../p/Python-%E8%AF%AD%E8%A8%80%E7%B2%BE%E8%A6%81-3.html</url>
      
        <content type="html"><![CDATA[<h2 id="列表、集合以及字典的推导式"><a href="#列表、集合以及字典的推导式" class="headerlink" title="列表、集合以及字典的推导式"></a>列表、集合以及字典的推导式</h2><p><strong>列表推导式</strong>是最受欢迎的 Python 的语言特性之一，只需一条简洁的表达式，即可对一组元素进行过滤，并对得到的元素进行转换变形。基本形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[expr <span class="keyword">for</span> value <span class="keyword">in</span> collection <span class="keyword">if</span> condition]</span><br></pre></td></tr></table></figure><p>这相当于下面这段 for 循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> collection:</span><br><span class="line">    <span class="keyword">if</span> condition:</span><br><span class="line">        result.append(expr)</span><br></pre></td></tr></table></figure><p>过滤条件可以省略。滤除长度小于等于 2 的字符串，并将剩下的字符串转换成大写字母形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">strings = [<span class="string">'a'</span>, <span class="string">'as'</span>, <span class="string">'bat'</span>, <span class="string">'car'</span>, <span class="string">'dove'</span>, <span class="string">'python'</span>]</span><br><span class="line">[x.upper() <span class="keyword">for</span> x <span class="keyword">in</span> strings <span class="keyword">if</span> len(x) &gt; <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'BAT'</span>, <span class="string">'CAR'</span>, <span class="string">'DOVE'</span>, <span class="string">'PYTHON'</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>字典推导式</strong>的基本形式，产生的是字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict_comp = &#123;key_expr:value_expr <span class="keyword">for</span> value <span class="keyword">in</span> collection <span class="keyword">if</span> condition&#125;</span><br></pre></td></tr></table></figure><p><strong>集合推导式</strong>的基本形式，跟列表推导式的唯一区别就是花括号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_comp = &#123;expr <span class="keyword">for</span> value <span class="keyword">in</span> collection <span class="keyword">if</span> condition&#125;</span><br></pre></td></tr></table></figure><p>推导式都只是<strong>语法糖</strong>而已，使代码变得更容易读写。<br>构造一个集合，其内容为列表字符串的各种长度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unique_lengths = &#123;len(x) <span class="keyword">for</span> x <span class="keyword">in</span> strings&#125;</span><br><span class="line">unique_lengths</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>])</span><br></pre></td></tr></table></figure><p>为这些字符串创建一个指向其列表位置的映射关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">loc_mapping = &#123;val:index <span class="keyword">for</span> index, val <span class="keyword">in</span> enumerate(strings)&#125;</span><br><span class="line">loc_mapping</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'a'</span>:<span class="number">0</span>, <span class="string">'as'</span>:<span class="number">1</span>, <span class="string">'bat'</span>:<span class="number">2</span>, <span class="string">'car'</span>:<span class="number">3</span>, <span class="string">'dove'</span>:<span class="number">4</span>, <span class="string">'python'</span>:<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套列表推导式"><a href="#嵌套列表推导式" class="headerlink" title="嵌套列表推导式"></a>嵌套列表推导式</h3><p>嵌套 for 循环中各个 for 的顺序是怎样的，嵌套推导式中各个 for 表达式的顺序就是怎样的。将一个由整数元组构成的列表<strong>扁平化</strong>为一个简单的整数列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">some_tuples = [(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</span><br><span class="line">flattened = [x <span class="keyword">for</span> tup <span class="keyword">in</span> some_tuples <span class="keyword">for</span> x <span class="keyword">in</span> tup]</span><br><span class="line">flattened</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>如果嵌套超过两三层，就需要思考一下<strong>数据结构</strong>的设计问题了。注意与“列表推导式中的列表推导式”之间的区别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[x <span class="keyword">for</span> x <span class="keyword">in</span> tup] <span class="keyword">for</span> tup <span class="keyword">in</span> some_tuples]</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数是用 def 关键字声明的，并使用 return 关键字返回。可以有一些<strong>位置参数</strong>（positional）和一些<strong>关键字参数</strong>（keyword）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_function</span><span class="params">(x, y, z=<span class="number">1.5</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> z &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> z * (x + y)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> z / (x + y)</span><br></pre></td></tr></table></figure><blockquote><p>关键字参数必须位于位置参数之后，你可以任何顺序指定关键字参数。</p></blockquote><h3 id="命名空间、作用域，以及局部函数"><a href="#命名空间、作用域，以及局部函数" class="headerlink" title="命名空间、作用域，以及局部函数"></a>命名空间、作用域，以及局部函数</h3><p>函数可以访问两种不同作用域中的变量：<strong>全局</strong>（global）和<strong>局部</strong>（local）。局部命名空间（namespace）是在函数被调用时创建的，执行完毕之后就会被销毁。<br>在函数中对全局变量进行赋值操作，必须用 <strong>global</strong> 关键字声明成全局的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="literal">None</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bind_a_variable</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a = []</span><br></pre></td></tr></table></figure><blockquote><p>不要频繁使用 global 关键字，因为全局变量一般是用于存放系统的某些状态的。如果用了很多，说明需要面向对象编程（使用类）。</p></blockquote><p>严格意义上来说，所有函数都是某个作用域的局部函数。</p><h3 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h3><p>许多函数都可能会有多个输出（在该函数内部计算出的数据结构或其他辅助数据），其实只返回了一个对象，也就是<strong>一个元组</strong>。<br>返回字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">5</span></span><br><span class="line">    b = <span class="number">6</span></span><br><span class="line">    c = <span class="number">7</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">'a'</span>:a, <span class="string">'b'</span>:b, <span class="string">'c'</span>:c&#125;</span><br></pre></td></tr></table></figure><h3 id="函数亦为对象"><a href="#函数亦为对象" class="headerlink" title="函数亦为对象"></a>函数亦为对象</h3><p>假设我们有下面这样一个字符串数组，希望对其进行一些数据清理工作并执行一堆转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">states = [<span class="string">'Alabama '</span>, <span class="string">'Georgia!'</span>, <span class="string">'Georgia'</span>, <span class="string">'georgia'</span>, <span class="string">'FlOrIda'</span>, <span class="string">'south   carolina##'</span>, <span class="string">'West virginia?'</span>]</span><br></pre></td></tr></table></figure><p>将需要在一组给定字符串上执行的所有运算做成一个列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除标点符号</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_punctuation</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> re.sub(<span class="string">'[!#?]'</span>, <span class="string">''</span>, value)</span><br><span class="line">clean_ops = [str.strip, remove_punctuation, str.title]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_strings</span><span class="params">(strings, ops)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> strings:</span><br><span class="line">        <span class="keyword">for</span> function <span class="keyword">in</span> ops:</span><br><span class="line">            value = function(value)</span><br><span class="line">        result.append(value)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>然后我们就有了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clean_strings(states, clean_ops)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'Alabama'</span>, <span class="string">'Georgia'</span>, <span class="string">'Georgia'</span>, <span class="string">'Georgia'</span>, <span class="string">'Florida'</span>, <span class="string">'South   Carolina'</span>, <span class="string">'West Virginia'</span>]</span><br></pre></td></tr></table></figure><p>这种多函数模式，能在很高的层次上，轻松修改字符串的转换方式。此时的 clean_strings 也更具<strong>可复用性</strong>。<br>还可以将函数用作其他函数的参数。<strong>map 函数</strong>用于在一组数据上应用一个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map(remove_punctuation, states)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'Alabama '</span>, <span class="string">'Georgia'</span>, <span class="string">'Georgia'</span>, <span class="string">'georgia'</span>, <span class="string">'FlOrIda'</span>, <span class="string">'south   carolina'</span>, <span class="string">'West virginia'</span>]</span><br></pre></td></tr></table></figure><h3 id="匿名（lambda）函数"><a href="#匿名（lambda）函数" class="headerlink" title="匿名（lambda）函数"></a>匿名（lambda）函数</h3><p>仅由<strong>单条语句</strong>组成，该语句的结果就是返回值。<br>通过 <strong>lambda</strong> 关键字定义的，没有别的含义，仅仅是说“我们正在声明的是一个匿名函数”。<br>很多数据转换函数都以函数作为参数，直接传入 lambda 函数比编写完整的函数声明要少输入很多字，也更清晰：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_to_list</span><span class="params">(some_list, f)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [f(x) <span class="keyword">for</span> x <span class="keyword">in</span> some_list]</span><br><span class="line">ints = [<span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>apply_to_list(ints, <span class="keyword">lambda</span> x: x * <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>根据各字符串不同字母的数量对其进行排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">strings = [<span class="string">'foo'</span>, <span class="string">'card'</span>, <span class="string">'bar'</span>, <span class="string">'aaaa'</span>, <span class="string">'abab'</span>]</span><br><span class="line">strings.sort(key=<span class="keyword">lambda</span> x: len(set(list(x))))</span><br><span class="line">strings</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'aaaa'</span>, <span class="string">'foo'</span>, <span class="string">'abab'</span>, <span class="string">'bar'</span>, <span class="string">'card'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>lambda 函数之所以会被称为匿名函数，原因之一就是这种函数对象，本身是没有提供名称属性的。</p></blockquote><h3 id="闭包：返回函数的函数"><a href="#闭包：返回函数的函数" class="headerlink" title="闭包：返回函数的函数"></a>闭包：返回函数的函数</h3><p>闭包就是由其他函数动态生成，并返回的函数。<br><strong>关键性质：</strong>被返回的函数可以访问，其创建者局部命名空间中的变量。<br>虽然可以修改任何内部状态对象（比如向字典添加键值对），但不能绑定外层函数作用域中的变量。解决办法是，修改字典或列表，而不是绑定变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_counter</span><span class="params">()</span>:</span></span><br><span class="line">    count = [<span class="number">0</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">()</span>:</span></span><br><span class="line">        count[<span class="number">0</span>] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line"></span><br><span class="line">cnt = make_counter()</span><br></pre></td></tr></table></figure><p>可以编写带有大量选项的非常一般化的函数，然后再组装出更简单、更专门化的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_and_pad</span><span class="params">(template, space)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">formatter</span><span class="params">(x)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (template % x).rjust(space)</span><br><span class="line">    <span class="keyword">return</span> formatter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个始终返回 15 位字符串的浮点数格式化器</span></span><br><span class="line">fmt = format_and_pad(<span class="string">'%.4f'</span>, <span class="number">15</span>)</span><br><span class="line">fmt(<span class="number">1.756</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'         1.7560'</span></span><br></pre></td></tr></table></figure><blockquote><p>通过面向对象编程，这种模式也能用类来实现。</p></blockquote><h3 id="扩展调用语法和-args、-kwargs"><a href="#扩展调用语法和-args、-kwargs" class="headerlink" title="扩展调用语法和 args、*kwargs"></a>扩展调用语法和 <em>args、*</em>kwargs</h3><p>在 Python 中，函数参数的工作方式其实很简单，位置和关键字参数分别被打包成元组和字典。<br>这一切都是在幕后悄悄发生的，函数实际接收到的是一个<strong>元组 args</strong> 和一个<strong>字典 kwargs</strong>。</p><h3 id="柯里化：部分参数应用"><a href="#柯里化：部分参数应用" class="headerlink" title="柯里化：部分参数应用"></a>柯里化：部分参数应用</h3><p>柯里化（currying）指的是：通过<strong>部分参数应用</strong>（partial argument application）从现有函数派生出新函数的技术。<br>其实只是定义了一个可以调用现有函数的新函数而已：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_numbers</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">add_five = <span class="keyword">lambda</span> y: add_numbers(<span class="number">5</span>, y)</span><br></pre></td></tr></table></figure><p>add_numbers 的第二个参数称为“柯里化的”。内置的 functools 模块可以用 <strong>partial 函数</strong>将此过程简化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line">add_five = partial(add_numbers, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>能以一种一致的方式对序列进行迭代，是 Python 的一个重要特点。这是通过一种叫做迭代器协议（iterator protocol）的方式实现的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">some_dict = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'b'</span>:<span class="number">2</span>, <span class="string">'c'</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> some_dict:</span><br><span class="line">    <span class="keyword">print</span> key,    <span class="comment"># 注意逗号</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a c b</span><br></pre></td></tr></table></figure><p><strong>迭代器</strong>是一种特殊对象，当你编写 for key in some_dict 时，Python 解释器首先会尝试从 some_dict 创建一个迭代器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict_iterator = iter(some_dict)</span><br><span class="line">dict_iterator</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;dictionary-keyiterator at <span class="number">0x10a0a1578</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>生成器</strong>（generator）是构造可迭代对象的一种简单方式。生成器以<strong>延迟</strong>的方式返回一个值序列，即每返回一个值之后暂停，直到下一个值被请求时再继续。<br>要创建一个生成器，只需要将函数中的 return 替换为 <strong>yeild</strong> 即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">squares</span><span class="params">(n=<span class="number">10</span>)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Generating squares from 1 to %d'</span> % (n ** <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">yield</span> i ** <span class="number">2</span></span><br></pre></td></tr></table></figure><p>调用该生成器时，没有任何代码会被立即执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gen = squares()</span><br><span class="line">gen</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;generator object squares at <span class="number">0x34c8280</span>&gt;</span><br></pre></td></tr></table></figure><p>直到你从该生成器中请求元素时，它才会开始执行其代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> gen:</span><br><span class="line">    <span class="keyword">print</span> x,</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Generating squares <span class="keyword">from</span> <span class="number">1</span> to <span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> <span class="number">4</span> <span class="number">9</span> <span class="number">16</span> <span class="number">25</span> <span class="number">36</span> <span class="number">49</span> <span class="number">64</span> <span class="number">81</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><h4 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h4><p>生成器表达式（generator expression）是构造生成器的最简单方式。类似于列表、字典、集合推导式，创建方式为，把列表推导式两端的方括号改成圆括号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gen = (x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与下面这个冗长的生成器，完全等价</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_gen</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        <span class="keyword">yield</span> x ** <span class="number">2</span></span><br><span class="line">gen = make_gen()</span><br></pre></td></tr></table></figure><p>生成器表达式可用于任何接受生成器的 Python 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sum(x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">100</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">328350</span></span><br><span class="line"></span><br><span class="line">dict((i, i ** <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">0</span>:<span class="number">0</span>, <span class="number">1</span>:<span class="number">1</span>, <span class="number">2</span>:<span class="number">4</span>, <span class="number">3</span>:<span class="number">9</span>, <span class="number">4</span>:<span class="number">16</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="itertools-模块"><a href="#itertools-模块" class="headerlink" title="itertools 模块"></a>itertools 模块</h4><p>标准库 itertools 模块中有一组用于许多常见数据算法的生成器。例如，groupby 可以接受任何序列和一个函数，根据函数的返回值，对序列中的连续元素<strong>进行分组：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">first_letter = <span class="keyword">lambda</span> x: x[<span class="number">0</span>]</span><br><span class="line">names = [<span class="string">'Alan'</span>, <span class="string">'Adam'</span>, <span class="string">'Wes'</span>, <span class="string">'Will'</span>, <span class="string">'Albert'</span>, <span class="string">'Steven'</span>]</span><br><span class="line"><span class="keyword">for</span> letter, names <span class="keyword">in</span> itertools.groupby(names, first_letter):</span><br><span class="line">    <span class="keyword">print</span> letter, list(names)    <span class="comment"># names 是一个生成器</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A [<span class="string">'Alan'</span>, <span class="string">'Adam'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>W [<span class="string">'Wes'</span>, <span class="string">'Will'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A [<span class="string">'Albert'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>S [<span class="string">'Steven'</span>]</span><br></pre></td></tr></table></figure><h2 id="文件和操作系统"><a href="#文件和操作系统" class="headerlink" title="文件和操作系统"></a>文件和操作系统</h2><p>Python 在文本和文件处理方面很流行。<br>为了打开一个文件以便读写，可以使用内置的 <strong>open 函数</strong>以及一个相对或绝对的文件路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">'ch13/segismundo.txt'</span></span><br><span class="line">f = open(path)</span><br></pre></td></tr></table></figure><p>默认情况下，文件是以只读模式（’r’）打开的。然后，我们就可以处理这个文件<strong>句柄</strong> f 了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>Python 的文件模式：<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/python/python_3.jpeg" alt><br>重要的 Python 文件方法或属性：<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/python/python_4.jpeg" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 语言精要-2</title>
      <link href="../../p/Python-%E8%AF%AD%E8%A8%80%E7%B2%BE%E8%A6%81-2.html"/>
      <url>../../p/Python-%E8%AF%AD%E8%A8%80%E7%B2%BE%E8%A6%81-2.html</url>
      
        <content type="html"><![CDATA[<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>元组（tuple）是一种一维的、定长的、<strong>不可变的</strong>Python 对象序列。最简单的创建方式是一组以逗号隔开的值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tup = <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line">tup</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><p>任何序列或迭代器都可以被转换为元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tup = tuple(<span class="string">'string'</span>)</span><br><span class="line">tup</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'r'</span>, <span class="string">'i'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>)</span><br></pre></td></tr></table></figure><p>元组的元素也可以通过方括号（[]）进行访问。<br>元组可以通过加号（+）运算符连接起来以产生更长的元组。<br>一个元组乘以一个整数，相当于是连接该元组的<strong>多个副本：</strong></p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'foo'</span>, <span class="string">'bar'</span>) * <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>)</span><br></pre></td></tr></table></figure><h3 id="元组拆包"><a href="#元组拆包" class="headerlink" title="元组拆包"></a>元组拆包</h3><p>对元组型变量表达式进行赋值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">a, b, c = tup</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span></span><br></pre></td></tr></table></figure><p>非常轻松地交换变量名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b, a = a, b</span><br></pre></td></tr></table></figure><p>对由元组或列表组成的序列进行迭代：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seq = [(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</span><br><span class="line"><span class="keyword">for</span> a, b, c <span class="keyword">in</span> seq:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>处理从函数中返回的多个值。</p><h3 id="元组方法"><a href="#元组方法" class="headerlink" title="元组方法"></a>元组方法</h3><p>由于元组的<strong>大小和内存不能被修改</strong>，所以其实例方法很少。count 用于计算指定值的出现次数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line">a.count(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表（list）是变长的，其内容也是可以修改的，可以通过<strong>方括号（[]）或 list 函数</strong>进行定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'baz'</span>)</span><br><span class="line">b_list = list(tup)</span><br><span class="line">b_list</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'baz'</span>]</span><br></pre></td></tr></table></figure><h3 id="添加和移除元素"><a href="#添加和移除元素" class="headerlink" title="添加和移除元素"></a>添加和移除元素</h3><p>通过 <strong>append</strong> 方法，可以将元素添加到列表的末尾：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b_list.append(<span class="string">'dwarf'</span>)</span><br><span class="line">b_list</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'baz'</span>, <span class="string">'dwarf'</span>]</span><br></pre></td></tr></table></figure><p>利用 <strong>insert</strong> 可以将元素插入到列表的指定位置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b_list.insert(<span class="number">1</span>, <span class="string">'red'</span>)</span><br><span class="line">b_list</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'foo'</span>, <span class="string">'red'</span>, <span class="string">'bar'</span>, <span class="string">'baz'</span>, <span class="string">'dwarf'</span>]</span><br></pre></td></tr></table></figure><p>insert 的逆运算是 <strong>pop</strong>，用于移除并返回指定索引处的元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b_list.pop(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'bar'</span></span><br><span class="line"></span><br><span class="line">b_list</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'foo'</span>, <span class="string">'red'</span>, <span class="string">'baz'</span>, <span class="string">'dwarf'</span>]</span><br></pre></td></tr></table></figure><p><strong>remove</strong> 用于按值删除元素（删除第一个符合要求的值）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b_list.remove(<span class="string">'foo'</span>)</span><br><span class="line">b_list</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'red'</span>, <span class="string">'baz'</span>, <span class="string">'dwarf'</span>]</span><br></pre></td></tr></table></figure><p>通过 <strong>in</strong> 关键字，可以判断列表中是否含有某个值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'dwarf'</span> <span class="keyword">in</span> b_list</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br></pre></td></tr></table></figure><blockquote><p>判断列表是否含有某个值的操作比字典和集合<strong>慢得多</strong>，因为 Python 会对列表中的值进行线性扫描，而另外两个基于哈希表，可以瞬间完成判断。</p></blockquote><h3 id="合并列表"><a href="#合并列表" class="headerlink" title="合并列表"></a>合并列表</h3><p>列表的合并是一种相当费资源的操作，必须创建一个<strong>新列表</strong>并将所有对象复制过去；用 <strong>extend</strong> 将元素附加到现有列表，就会好很多：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">4</span>, <span class="literal">None</span>, <span class="string">'foo'</span>]</span><br><span class="line">x.extend([<span class="number">7</span>, <span class="number">8</span>, (<span class="number">2</span>, <span class="number">3</span>)])</span><br><span class="line">x</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">4</span>, <span class="literal">None</span>, <span class="string">'foo'</span>, <span class="number">7</span>, <span class="number">8</span>, (<span class="number">2</span>, <span class="number">3</span>)]</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>调用列表的 <strong>sort</strong> 方法可以实现就地排序（无需创建新对象）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">7</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">a.sort()</span><br><span class="line">a</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><p>sort 有几个很不错的选项。<strong>次要排序键</strong>：一个能够产生可用于排序的值的函数。<br>可以通过长度对一组字符串进行排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b = [<span class="string">'saw'</span>, <span class="string">'small'</span>, <span class="string">'He'</span>, <span class="string">'foxes'</span>, <span class="string">'six'</span>]</span><br><span class="line">b.sort(key=len)</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'He'</span>, <span class="string">'saw'</span>, <span class="string">'six'</span>, <span class="string">'small'</span>, <span class="string">'foxes'</span>]</span><br></pre></td></tr></table></figure><h3 id="二分搜索及维护有序列表"><a href="#二分搜索及维护有序列表" class="headerlink" title="二分搜索及维护有序列表"></a>二分搜索及维护有序列表</h3><p>内置的 <strong>bisect 模块</strong>实现了二分查找以及对有序列表的插入操作：</p><ul><li>bisect.bisect 可以找出新元素应该被插入的位置。</li><li>bisect.insort 确实地将新元素插入到那个位置上去。</li></ul><blockquote><p>bisect 模块的函数不会判断原列表是否是有序的。将它们用于无序列表虽然不会报错，但可能导致不正确的结果。</p></blockquote><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>通过切片标记法，可以选取<strong>序列类型</strong>的子集，其基本形式由索引运算符（[]）以及传入其中的 start:stop 构成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="number">7</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">seq[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>stop 索引处的元素是未被包括在内的，元素的数量是 stop - start。<br>start 或 stop 都是<strong>可以省略</strong>的，此时它们分别默认为序列的起始处和结尾处，负数索引从序列的末尾开始切片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seq[<span class="number">-4</span>:]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">5</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><img src="https://github.com/wangleileichina/HexoPosts/raw/master/python/python_2.jpeg" alt><br>还可以在第二个冒号后面加上步长（step），实现每隔一位取出一个元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seq[::<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">7</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>使用 -1 是一个很巧妙的方法，可以实现列表或元组的反序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seq[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure><h2 id="内置的序列函数"><a href="#内置的序列函数" class="headerlink" title="内置的序列函数"></a>内置的序列函数</h2><p>Python 有一些很不错的序列函数，你应该熟悉它们，只要有机会就用。</p><h3 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h3><p>在对一个序列进行迭代时，常常需要跟踪当前项的索引。<br>Python 内置了一个 enumerate 函数，可以逐个返回序列的 (i, value) 元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate(collection):</span><br><span class="line">    <span class="comment"># 用 value 做一些事情</span></span><br></pre></td></tr></table></figure><h3 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h3><p>sorted 函数可以将任何序列返回为一个新的有序列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sorted(<span class="string">'horse race'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">' '</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>, <span class="string">'e'</span>, <span class="string">'h'</span>, <span class="string">'o'</span>, <span class="string">'r'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>]</span><br></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>zip 用于将多个序列中的元素配对，从而产生一个新的<strong>元组列表</strong>。zip 可以接受任意数量的序列，得到的元组数量由最短的序列决定：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">seq1 = [<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'baz'</span>]</span><br><span class="line">seq2 = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line">seq3 = [<span class="literal">False</span>, <span class="literal">True</span>]</span><br><span class="line">zip(seq1, seq2, seq3)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[(<span class="string">'foo'</span>, <span class="string">'one'</span>, <span class="literal">False</span>), (<span class="string">'bar'</span>, <span class="string">'two'</span>, <span class="literal">True</span>)]</span><br></pre></td></tr></table></figure><h3 id="reversed"><a href="#reversed" class="headerlink" title="reversed"></a>reversed</h3><p>reversed 用于按逆序迭代序列中的元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list(reversed(range(<span class="number">10</span>)))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典（dict）更常见的名字是哈希映射（hash map），是一种大小可变的<strong>键值对集</strong>。创建字典的方式之一是：使用大括号（{}）并用冒号分隔键和值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">empty_dict = &#123;&#125;</span><br><span class="line">d1 = &#123;<span class="string">'a'</span>:<span class="string">'some value'</span>, <span class="string">'b'</span>:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]&#125;</span><br><span class="line">d1</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'a'</span>:<span class="string">'some value'</span>, <span class="string">'b'</span>:[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]&#125;</span><br></pre></td></tr></table></figure><p>keys 和 values 方法分别用于获取键和值的列表。虽然键值对没有特定的顺序，但这两个函数会以<strong>相同的顺序</strong>输出键和值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d1.keys()</span><br><span class="line">[<span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line">d1.values()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="string">'some value'</span>]</span><br></pre></td></tr></table></figure><p>利用 <strong>update</strong> 方法，一个字典可以被合并到另一个字典中去：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d1.update(&#123;<span class="string">'b'</span>:<span class="string">'foo'</span>, <span class="string">'c'</span>:<span class="number">12</span>&#125;)</span><br><span class="line">d1</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'a'</span>:<span class="string">'some value'</span>, <span class="string">'b'</span>:<span class="string">'foo'</span>, <span class="string">'c'</span>:<span class="number">12</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="从序列类型创建字典"><a href="#从序列类型创建字典" class="headerlink" title="从序列类型创建字典"></a>从序列类型创建字典</h3><p>我们完全可以用 dict 类型函数，直接将两个序列中的元素两两配对地组成一个字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mapping = dict(zip(range(<span class="number">5</span>), reversed(range(<span class="number">5</span>))))</span><br><span class="line">mapping</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="number">0</span>:<span class="number">4</span>, <span class="number">1</span>:<span class="number">3</span>, <span class="number">2</span>:<span class="number">2</span>, <span class="number">3</span>:<span class="number">1</span>, <span class="number">4</span>:<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>dict 的 <strong>get</strong> 和 <strong>pop</strong> 方法可以接受一个可供返回的默认值（如果 key 不存在，get 默认返回 None，pop 会引发异常）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> key <span class="keyword">in</span> some_dict:</span><br><span class="line">    value = some_dict[key]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    value = default_value</span><br></pre></td></tr></table></figure><p>上面的 if-else 块可以被简单地写成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value = some_dict.get(key, default_value)</span><br></pre></td></tr></table></figure><p>常常会将字典中的值处理成别的<strong>集类型</strong>（比如列表），根据首字母对一组单词进行分类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">word = [<span class="string">'apple'</span>, <span class="string">'bat'</span>, <span class="string">'bar'</span>, <span class="string">'atom'</span>, <span class="string">'book'</span>]</span><br><span class="line">by_letter = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    letter = word[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> letter <span class="keyword">not</span> <span class="keyword">in</span> by_letter:</span><br><span class="line">        by_letter[letter] = [word]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        by_letter[letter].append(word)</span><br><span class="line"></span><br><span class="line">by_letter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">'a'</span>:[<span class="string">'apple'</span>, <span class="string">'atom'</span>], <span class="string">'b'</span>:[<span class="string">'bat'</span>, <span class="string">'bar'</span>, <span class="string">'book'</span>]&#125;</span><br></pre></td></tr></table></figure><p>使用 <strong>setdefault</strong> 方法，上面的 if-else 块可以写成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">by_letter.setdefault(letter, []).append(word)</span><br></pre></td></tr></table></figure><p>内置的 collections 模块有一个叫做 <strong>defaultdict</strong> 的类，传入一个类型或函数，用于生成字典各插槽所使用的默认值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> colletions <span class="keyword">import</span> defaultdict</span><br><span class="line">by_letter = defaultdict(list)</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    by_letter[word[<span class="number">0</span>]].append(word)</span><br></pre></td></tr></table></figure><p>defaultdict 的初始化器只需要一个可调用对象，将默认值设置为 4：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">counts = defaultdict(<span class="keyword">lambda</span>: <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="字典键的有效类型"><a href="#字典键的有效类型" class="headerlink" title="字典键的有效类型"></a>字典键的有效类型</h3><p>字典的值可以是任何 Python 对象，但键必须是不可变对象。术语是可哈希性，可通过 hash 函数判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TypeError</span></span><br><span class="line">hash((<span class="number">1</span>, <span class="number">2</span>, [<span class="number">2</span>, <span class="number">3</span>]))</span><br></pre></td></tr></table></figure><p>如果要将列表当作键，最简单的方法就是将其转换成元组。</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合（set）是由唯一元素组成的无序集，可以看成是<strong>只有键的字典</strong>。创建方式为 set 函数或大括号包起来的集合字面量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>支持各种数学集合运算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">b = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>&#125;</span><br><span class="line"><span class="comment"># 对称差（异或）</span></span><br><span class="line">a ^ b</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set([<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br></pre></td></tr></table></figure><p>还可以判断一个集合是否是另一个集合的子集或超集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a_set = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;.issubset(a_set)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br><span class="line"></span><br><span class="line">a_set.isuperset(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 语言精要-1</title>
      <link href="../../p/Python-%E8%AF%AD%E8%A8%80%E7%B2%BE%E8%A6%81-1.html"/>
      <url>../../p/Python-%E8%AF%AD%E8%A8%80%E7%B2%BE%E8%A6%81-1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>常常得先把那些乱七八糟的数据，处理成漂亮点的结构化形式。</p></blockquote><h2 id="Python-解释器"><a href="#Python-解释器" class="headerlink" title="Python 解释器"></a>Python 解释器</h2><p>一次执行一条语句。<br>“&gt;&gt;&gt;”是提示符，可以在那里输入表达式。</p><h2 id="语言语义"><a href="#语言语义" class="headerlink" title="语言语义"></a>语言语义</h2><p>重视可读性、简洁性、明确性，可执行的伪代码。</p><h3 id="缩进，而不是大括号"><a href="#缩进，而不是大括号" class="headerlink" title="缩进，而不是大括号"></a>缩进，而不是大括号</h3><p>通过空白符（4 个空格）来组织代码。<br><strong>冒号</strong>表示一段缩进代码块的开始，其后必须缩进相同的量，直到代码块结束为止：</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> array:</span><br><span class="line">    <span class="keyword">if</span> x &lt; pivot:</span><br><span class="line">        less.append(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        greater.append(x)</span><br></pre></td></tr></table></figure><p>在一行上放置多条语句的做法是不推荐的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span>; b = <span class="number">6</span>; c = <span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="万物皆对象"><a href="#万物皆对象" class="headerlink" title="万物皆对象"></a>万物皆对象</h3><p>对象模型的一致性。<br>即使是函数也能被当做其他对象那样处理。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>任何前缀为“#”的文本都会被解释器忽略掉。</p><h3 id="函数调用和对象方法调用"><a href="#函数调用和对象方法调用" class="headerlink" title="函数调用和对象方法调用"></a>函数调用和对象方法调用</h3><p>函数的调用需要用到圆括号以及 0 个或多个参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = f(x, y, z)</span><br></pre></td></tr></table></figure><p>几乎所有的 Python 对象都有一些附属函数（方法），可以访问该对象的内部数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.some_method(x, y, z)</span><br></pre></td></tr></table></figure><p>函数既可以接受位置参数，也可以接受关键字参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = f(a, b, c, d=<span class="number">5</span>, e=<span class="string">'foo'</span>)</span><br></pre></td></tr></table></figure><h3 id="变量和按引用传递"><a href="#变量和按引用传递" class="headerlink" title="变量和按引用传递"></a>变量和按引用传递</h3><p>在 Python 中对变量赋值时，其实是在创建等号右侧对象的一个<strong>引用</strong>。<br>只是传入了一个引用而已，不会发生任何复制：<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/python/python_1.jpeg" alt></p><blockquote><p>按引用传递，Python 函数可以修改其参数的内容。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">append_element(data, <span class="number">4</span>)</span><br><span class="line">data</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h3 id="动态引用，强类型"><a href="#动态引用，强类型" class="headerlink" title="动态引用，强类型"></a>动态引用，强类型</h3><p>Python 中的对象引用没有与之关联的类型信息，对象的类型信息是保存在它自己<strong>内部</strong>的。<br>Python 可以被认为是一种<strong>强类型</strong>语言，隐式转换只在很明显的情况下才会发生：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TypeError</span></span><br><span class="line"><span class="string">'5'</span> + <span class="number">5</span></span><br></pre></td></tr></table></figure><p>通过 isinstance 函数，可以检查一个对象是否是某个特定类型的实例。可以接受由类型组成的元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">isinstance(a, (int, float))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3><p>Python 中的对象通常都既有属性（attribute），又有方法（method）。它们都能通过 obj.attribute_name 这样的语法进行访问。</p><ul><li>属性：存储在该对象内部的，其他 Python <strong>对象</strong>；</li><li>方法：与该对象有关的能够访问其内部数据的<strong>函数</strong>。</li></ul><h3 id="“鸭子”类型"><a href="#“鸭子”类型" class="headerlink" title="“鸭子”类型"></a>“鸭子”类型</h3><p>你可能不会关心对象的类型，只是想知道它到底有没有某些方法或行为。<br><strong>应用场景：</strong>在编写可以接受任何序列（列表、元祖、ndarray）或迭代器的函数时，先检查对象是不是列表，如果不是，就将其转换成是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> isinstance(x, list) <span class="keyword">and</span> isiterable(x):</span><br><span class="line">    x = list(x)</span><br></pre></td></tr></table></figure><h3 id="引入（import）"><a href="#引入（import）" class="headerlink" title="引入（import）"></a>引入（import）</h3><p>模块（module）：一个含有函数和变量定义以及从其他 .py 文件引入的此类东西的 <strong>.py 文件</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># some_module.py</span></span><br><span class="line">PI = <span class="number">3.14159</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><p>通过 <strong>as 关键字</strong>，可以引入不同的变量名（定义别名）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> some_module <span class="keyword">as</span> sm</span><br><span class="line"><span class="keyword">from</span> some_module <span class="keyword">import</span> PI <span class="keyword">as</span> pi, g <span class="keyword">as</span> gf</span><br><span class="line"></span><br><span class="line">r1 = sm.f(pi)</span><br><span class="line">r2 = gf(<span class="number">6</span>, pi)</span><br></pre></td></tr></table></figure><h3 id="二元运算符和比较运算符"><a href="#二元运算符和比较运算符" class="headerlink" title="二元运算符和比较运算符"></a>二元运算符和比较运算符</h3><p>判断两个引用是否指向同一对象，可以使用 is 关键字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = a</span><br><span class="line"><span class="comment"># list 函数始终会创建新列表</span></span><br><span class="line">c = list(a)</span><br><span class="line"></span><br><span class="line">a <span class="keyword">is</span> b</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br><span class="line"></span><br><span class="line">a <span class="keyword">is</span> <span class="keyword">not</span> c</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>跟比较运算“==”，不是一回事。<br>is 和 is not 常常用于判断变量是否为 None，因为 None 的实例只有一个。</p><h3 id="严格与懒惰"><a href="#严格与懒惰" class="headerlink" title="严格与懒惰"></a>严格与懒惰</h3><p>在 Python 中，只要这些语句被求值，相关计算就会立即（也就是严格）发生。<br><strong>延迟计算</strong>（lazy evaluation）：具体值在被使用之前，不会被计算出来。<br>迭代器、生成器可以用于实现延迟计算，当执行一些负荷非常高的计算时，可以派上用场。</p><h3 id="可变和不可变的对象"><a href="#可变和不可变的对象" class="headerlink" title="可变和不可变的对象"></a>可变和不可变的对象</h3><p>大部分 Python 对象是可变的（mutable），它们所包含的对象或值是可以被修改的；<br>字符串、元组是不可变的（immutable）。<br>建议尽量避免<strong>副作用</strong>（side effect），注重不变性。</p><h2 id="标量类型"><a href="#标量类型" class="headerlink" title="标量类型"></a>标量类型</h2><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><p>Python 会自动将非常大的整数转换为 long：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ival = <span class="number">17239871</span></span><br><span class="line">ival ** <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">26254519291092456596965462913230729701102721L</span></span><br></pre></td></tr></table></figure><p>得到 C 风格的整数除法，使用 //：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> // <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>复数的虚部是用 j 表示的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cval = <span class="number">1</span> + <span class="number">2j</span></span><br><span class="line">cval * (<span class="number">1</span> - <span class="number">2j</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> + <span class="number">0j</span></span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>编写字符串时，既可以用单引号（’）也可以用双引号（’’）。<br>对于带有换行符的多行字符串，可以使用三重引号。<br>Python 字符串是<strong>不可变</strong>的，要修改字符串就只能创建一个新的。<br>许多对象都可以用 str 函数转换为字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5.6</span></span><br><span class="line">s = str(a)</span><br><span class="line">s</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'5.6'</span></span><br></pre></td></tr></table></figure><p>字符串其实是一串<strong>字符序列</strong>，可以被当作某种序列类型进行处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'python'</span></span><br><span class="line">list(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'p'</span>, <span class="string">'y'</span>, <span class="string">'t'</span>, <span class="string">'h'</span>, <span class="string">'o'</span>, <span class="string">'n'</span>]</span><br><span class="line"></span><br><span class="line">s[:<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'pyt'</span></span><br></pre></td></tr></table></figure><p>用实参替换格式化形参：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">template = <span class="string">'%.2f %s are worth $%d'</span></span><br><span class="line">template % (<span class="number">4.5560</span>, <span class="string">'Argentine Pesos'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'4.56 Argentine Pesos are worth $1'</span></span><br></pre></td></tr></table></figure><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>Python 中两个布尔值分别写作 True 和 False，可以用 and 和 or 关键字进行连接。<br>几乎所有内置的 Python 类型都能在 if 语句中被解释为 True 或 False：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">if</span> a:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'I found something!'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>I found something!</span><br></pre></td></tr></table></figure><p>想知道某个对象究竟会被强制转换成哪个布尔值，使用 <strong>bool 函数</strong>即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bool([]), bool([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="literal">False</span>, <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>str、bool、int、float 等类型，也可以作将值转换成该类型的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'3.14159'</span></span><br><span class="line">fval = float(s)</span><br><span class="line">type(fval)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>float</span><br></pre></td></tr></table></figure><h3 id="None"><a href="#None" class="headerlink" title="None"></a>None</h3><p>None 是 Python 的空值类型。如果一个函数没有显式地返回值，则隐式返回 None。<br>None 是函数可选参数的一种常见默认值。<br>None 不是一个保留关键字，只是 NoneType 的一个<strong>实例</strong>而已。</p><h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><p>Python 内置的 datetime 模块中，datetime 类型是用得最多的，它合并了保存在 date 和 time 中的信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, date, time</span><br><span class="line">dt = datetime(<span class="number">2011</span>, <span class="number">10</span>, <span class="number">29</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">21</span>)</span><br><span class="line"></span><br><span class="line">dt.day</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">29</span></span><br><span class="line"></span><br><span class="line">dt.minute</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">30</span></span><br></pre></td></tr></table></figure><p>strftime 方法用于将 datetime 格式化为字符串（也可以反向解析）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dt.strftime(<span class="string">'%m/%d/%Y %H:%M'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'10/29/2011 20:30'</span></span><br></pre></td></tr></table></figure><p>两个 datetime 对象的差会产生一个 datetime.timedelta 类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dt2 = datetime(<span class="number">2011</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">22</span>, <span class="number">30</span>)</span><br><span class="line">delta = dt2 - dt</span><br><span class="line">delta</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.timedelta(<span class="number">17</span>, <span class="number">7179</span>)</span><br></pre></td></tr></table></figure><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><h3 id="if、elif、else"><a href="#if、elif、else" class="headerlink" title="if、elif、else"></a>if、elif、else</h3><p>一条 if 语句可以跟上一个或多个 <strong>elif 块</strong>以及一个滴水不漏的 <strong>else 块</strong>（如果所有条件都为 False）。<br>对于用 and 或 or 组成的复合条件，各条件是按从左到右的顺序求值的，而且是<strong>短路型</strong>的。</p><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p>for 循环用于对集合或迭代器进行迭代，<strong>标准语法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> collection:</span><br><span class="line">    <span class="comment"># 对 value 做一些处理</span></span><br></pre></td></tr></table></figure><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><p>while 循环定义了<strong>一个条件</strong>和<strong>一个代码块</strong>。只要条件不为 False，代码块将一直不断地执行下去。</p><h3 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h3><p>Python 中的空操作语句，在开发一个新功能时，常常会将 pass 用作代码中的<strong>占位符：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x, y, z)</span></span></span><br><span class="line"><span class="function">    # <span class="title">TODO</span>:</span> 实现这个函数</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>优雅地处理 Python 错误或异常是构建健壮程序的重要环节。<br>把对函数的调用放在一个 <strong>try/except 块</strong>中，在 except 后面加上异常类型组成的元组，即可捕获多个异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attempt_float</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> float(x)</span><br><span class="line">    <span class="keyword">except</span> (TypeError, ValueError):</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p>希望有一段代码不管 try 块代码成功与否都能被执行，使用 <strong>finally</strong> 即可；让某些代码只在 try 块成功时执行，使用 <strong>else</strong> 即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f = open(path, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    write_to_file(f)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Failed'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Succeeded'</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p>range 函数用于产生一组间隔平均的整数，可以指定<strong>起始值、结束值、步长</strong>等信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">range(<span class="number">0</span>, <span class="number">20</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>]</span><br></pre></td></tr></table></figure><p>range 所产生的整数不包括末端值，常用于按索引对序列进行迭代：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(seq)):</span><br><span class="line">    val = seq[i]</span><br></pre></td></tr></table></figure><p>对于非常长的范围, 不会预先产生所有的值，而是返回一个用于逐个产生整数的<strong>迭代器</strong>。</p><h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><p>允许将产生一个值的 <strong>if-else 块</strong>写到一行或一个表达式中，语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value = true_expr <span class="keyword">if</span> condition <span class="keyword">else</span> false_expr</span><br></pre></td></tr></table></figure><p>如果条件以及 true 和 false 表达式非常复杂，可能会牺牲可读性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">5</span></span><br><span class="line"><span class="string">'Non-negative'</span> <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="string">'Negative'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Non-negative'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Summary of Leetcode</title>
      <link href="../../p/Summary-of-Leetcode.html"/>
      <url>../../p/Summary-of-Leetcode.html</url>
      
        <content type="html"><![CDATA[<h2 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h2><h3 id="Interval"><a href="#Interval" class="headerlink" title="Interval"></a>Interval</h3><p>[312]<br>[664]<br>[546]<br>[1000]</p><p>###<br>[1774]<br>[1775]</p><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><h3 id="monotonic-stack"><a href="#monotonic-stack" class="headerlink" title="monotonic stack"></a>monotonic stack</h3><p>[1475]<br>[503]</p><h2 id="math"><a href="#math" class="headerlink" title="math"></a>math</h2><h3 id="quick-multi"><a href="#quick-multi" class="headerlink" title="quick multi"></a>quick multi</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow2</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    base = a</span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        <span class="keyword">if</span> b % <span class="number">2</span>: res = res * base % mod</span><br><span class="line">        base = base * base % mod</span><br><span class="line">        b = b // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>[50]<br>[1922]</p><h2 id="Hashmap"><a href="#Hashmap" class="headerlink" title="Hashmap"></a>Hashmap</h2><h3 id="prefix-hashtable"><a href="#prefix-hashtable" class="headerlink" title="prefix hashtable"></a>prefix hashtable</h3><p>[1915] [930] [560] [974] [1371] [1542] [1590] </p><p>[1074] [325]<br>523 525，1124，528，497，1248， 以及 区域和检索系列的问题</p><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a><a href="https://wangleileichina.github.io/p/Trie.html">Trie</a></h2><p>[208] [720]</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bisect</title>
      <link href="../../p/bisect.html"/>
      <url>../../p/bisect.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个大于等于target的indx</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bisect_left</span><span class="params">(nums, target)</span>:</span></span><br><span class="line">    lo, hi = <span class="number">0</span>, len(nums) <span class="comment">## hi = len(nums)</span></span><br><span class="line">    <span class="keyword">while</span> lo &lt; hi:</span><br><span class="line">        mi = lo + ((hi - lo) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> nums[mi] &gt;= target:</span><br><span class="line">            hi = mi</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lo = mi + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> lo                </span><br><span class="line"></span><br><span class="line">nums=[<span class="number">7</span>]</span><br><span class="line">print(bisect_left(nums, <span class="number">8</span>))</span><br><span class="line">print(bisect_left(nums, <span class="number">7</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bisect_right</span><span class="params">(nums, target)</span>:</span></span><br><span class="line">    lo, hi = <span class="number">0</span>, len(nums) <span class="comment">## hi = len(nums)</span></span><br><span class="line">    <span class="keyword">while</span> lo &lt; hi:</span><br><span class="line">        mi = lo + ((hi - lo) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> nums[mi] &gt; target:</span><br><span class="line">            hi = mi</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lo = mi + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> lo                </span><br><span class="line"></span><br><span class="line">nums=[<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">print(bisect_right(nums, <span class="number">8</span>))</span><br><span class="line">print(bisect_right(nums, <span class="number">7</span>))</span><br><span class="line">print(bisect_right(nums, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">print(bisect.bisect_right(nums, <span class="number">8</span>))</span><br><span class="line">print(bisect.bisect_right(nums, <span class="number">7</span>))</span><br><span class="line">print(bisect.bisect_right(nums, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">8</span> <span class="number">4</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bisect_left</span><span class="params">(a, x, lo=<span class="number">0</span>, hi=None)</span>:</span></span><br><span class="line">    <span class="string">"""返回x插入a后所在位置的index（如果a中存在与x等值的元素，则插入到左侧）"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> lo &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'lo must be non-negative'</span>)</span><br><span class="line">    <span class="keyword">if</span> hi <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        hi = len(a)</span><br><span class="line">    <span class="keyword">while</span> lo &lt; hi:</span><br><span class="line">        mid = (lo+hi)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> a[mid] &lt; x: lo = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: hi = mid</span><br><span class="line">    <span class="keyword">return</span> lo</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bisect_right</span><span class="params">(a, x, lo=<span class="number">0</span>, hi=None)</span>:</span></span><br><span class="line">    <span class="string">"""返回x插入a后所在位置的index（如果a中存在与x等值的元素，则插入到右侧）"""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> lo &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'lo must be non-negative'</span>)</span><br><span class="line">    <span class="keyword">if</span> hi <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        hi = len(a)</span><br><span class="line">    <span class="keyword">while</span> lo &lt; hi:</span><br><span class="line">        mid = (lo+hi)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; a[mid]: hi = mid</span><br><span class="line">        <span class="keyword">else</span>: lo = mid+<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> lo</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insort_left</span><span class="params">(a, x, lo=<span class="number">0</span>, hi=None)</span>:</span></span><br><span class="line">    <span class="string">"""将x插入a（如果a中存在与x等值的元素，则插入到左侧）"""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> lo &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'lo must be non-negative'</span>)</span><br><span class="line">    <span class="keyword">if</span> hi <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        hi = len(a)</span><br><span class="line">    <span class="keyword">while</span> lo &lt; hi:</span><br><span class="line">        mid = (lo+hi)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> a[mid] &lt; x: lo = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: hi = mid</span><br><span class="line">    a.insert(lo, x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insort_right</span><span class="params">(a, x, lo=<span class="number">0</span>, hi=None)</span>:</span></span><br><span class="line">    <span class="string">"""将x插入a（如果a中存在与x等值的元素，则插入到右侧）"""</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> lo &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'lo must be non-negative'</span>)</span><br><span class="line">    <span class="keyword">if</span> hi <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        hi = len(a)</span><br><span class="line">    <span class="keyword">while</span> lo &lt; hi:</span><br><span class="line">        mid = (lo+hi)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; a[mid]: hi = mid</span><br><span class="line">        <span class="keyword">else</span>: lo = mid+<span class="number">1</span></span><br><span class="line">    a.insert(lo, x)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CLRS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAP Theorem</title>
      <link href="../../p/CAP-Theorem.html"/>
      <url>../../p/CAP-Theorem.html</url>
      
        <content type="html"><![CDATA[<p>CAP theorem states that it is impossible for a distributed software system to simultaneously provide more than two out of three of the following guarantees (CAP): Consistency, Availability, and Partition tolerance. When we design a distributed system, trading off among CAP is almost the first thing we want to consider. CAP theorem says while designing a distributed system we can pick only two of the following three options:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/CAP-Theorem/07.png" alt></p><a id="more"></a><ul><li><strong>Consistency</strong>: All nodes see the same data at the same time. Consistency is achieved by updating several nodes before allowing further reads;</li><li><strong>Availability</strong>: Every request gets a response on success/failure. Availability is achieved by replicating the data across different servers;</li><li><strong>Partition tolerance</strong>: The system continues to work despite message loss or partial failure. A system that is partition-tolerant can sustain any amount of network failure that doesn’t result in a failure of the entire network. Data is sufficiently replicated across combinations of nodes and networks to keep the system up through intermittent outages;</li></ul><p>We cannot build a general data store that is continually available, sequentially consistent, and tolerant to any partition failures. We can only build a system that has any two of these three properties. Because, to be consistent, all nodes should see the same set of updates in the same order. But if the network loses a partition, updates in one partition might not make it to the other partitions before a client reads from the out-of-date partition after having read from the up-to-date one. The only thing that can be done to cope with this possibility is to stop serving requests from the out-of-date partition, but then the service is no longer 100% available.</p>]]></content>
      
      
      
        <tags>
            
            <tag> SystemDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Load Balancing</title>
      <link href="../../p/Load-Balancing.html"/>
      <url>../../p/Load-Balancing.html</url>
      
        <content type="html"><![CDATA[<p>Load Balancer (LB) is another critical component of any distributed system. It helps to spread the traffic across a cluster of servers to improve responsiveness and availability of applications, websites or databases. LB also keeps track of the status of all the resources while distributing requests. If a server is not available to take new requests or is not responding or has elevated error rate, LB will stop sending traffic to such a server.</p><p>Typically a load balancer sits between the client and the server accepting incoming network and application traffic and distributing the traffic across multiple backend servers using various algorithms. By balancing application requests across multiple servers, a load balancer reduces individual server load and prevents any one application server from becoming a single point of failure, thus improving overall application availability and responsiveness:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Load-Balancing/01.png" alt></p><a id="more"></a><p>To utilize full scalability and redundancy, we can try to balance the load at each layer of the system. We can add LBs at three places:</p><ul><li>Between the user and the web server;</li><li>Between web servers and an internal platform layer, like application servers or cache servers;</li><li>Between internal platform layer and database;</li></ul><p><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Load-Balancing/02.png" alt></p><h2 id="Benefits-of-Load-Balancing"><a href="#Benefits-of-Load-Balancing" class="headerlink" title="Benefits of Load Balancing"></a>Benefits of Load Balancing</h2><ul><li>Users experience faster, uninterrupted service. Users won’t have to wait for a single struggling server to finish its previous tasks. Instead, their requests are immediately passed on to a more readily available resource;</li><li>Service providers experience less downtime and higher throughput. Even a full server failure won’t affect the end user experience as the load balancer will simply route around it to a healthy server;</li><li>Load balancing makes it easier for system administrators to handle incoming requests while decreasing wait time for users;</li><li>Smart load balancers provide benefits like predictive analytics that determine traffic bottlenecks before they happen. As a result, the smart load balancer gives an organization actionable insights. These are key to automation and can help drive business decisions;</li><li>System administrators experience fewer failed or stressed components. Instead of a single device performing a lot of work, load balancing has several devices perform a little bit of work;</li></ul><h2 id="Load-Balancing-Algorithms"><a href="#Load-Balancing-Algorithms" class="headerlink" title="Load Balancing Algorithms"></a>Load Balancing Algorithms</h2><p><strong>How does the load balancer choose the backend server?</strong><br>Load balancers consider two factors before forwarding a request to a backend server. They will first ensure that the server they choose is actually responding appropriately to requests and then use a pre-configured algorithm to select one from the set of healthy servers. We will discuss these algorithms shortly.</p><p><strong>Health Checks</strong>: Load balancers should only forward traffic to “healthy” backend servers. To monitor the health of a backend server, “health checks” regularly attempt to connect to backend servers to ensure that servers are listening. If a server fails a health check, it is automatically removed from the pool, and traffic will not be forwarded to it until it responds to the health checks again.</p><p>There is a variety of load balancing methods, which use different algorithms for different needs:</p><ul><li><strong>Least Connection Method</strong>: This method directs traffic to the server with the fewest active connections. This approach is quite useful when there are a large number of persistent client connections which are unevenly distributed between the servers;</li><li><strong>Least Response Time Method</strong>: This algorithm directs traffic to the server with the fewest active connections and the lowest average response time;</li><li><strong>Least Bandwidth Method</strong>: This method selects the server that is currently serving the least amount of traffic measured in megabits per second (Mbps);</li><li><strong>Round Robin Method</strong>: This method cycles through a list of servers and sends each new request to the next server. When it reaches the end of the list, it starts over at the beginning. It is most useful when the servers are of equal specification and there are not many persistent connections;</li><li><strong>Weighted Round Robin Method</strong>: The weighted round-robin scheduling is designed to better handle servers with different processing capacities. Each server is assigned a weight (an integer value that indicates the processing capacity). Servers with higher weights receive new connections before those with less weights and servers with higher weights get more connections than those with less weights;</li><li><strong>IP Hash</strong>: Under this method, a hash of the IP address of the client is calculated to redirect the request to a server;</li></ul><h2 id="Redundant-Load-Balancers"><a href="#Redundant-Load-Balancers" class="headerlink" title="Redundant Load Balancers"></a>Redundant Load Balancers</h2><p>The load balancer can be a single point of failure; to overcome this, a second load balancer can be connected to the first to form a cluster. Each LB monitors the health of the other and, since both of them are equally capable of serving traffic and failure detection, in the event the main load balancer fails, the second load balancer takes over:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Load-Balancing/03.png" alt></p><p>Following links have some good discussion about load balancers:<br>[1] <a href="https://avinetworks.com/what-is-load-balancing/" target="_blank" rel="noopener">What is load balancing</a><br>[2] <a href="https://lethain.com/introduction-to-architecting-systems-for-scale/" target="_blank" rel="noopener">Introduction to architecting systems</a><br>[3] <a href="https://en.wikipedia.org/wiki/Load_balancing_(computing)" target="_blank" rel="noopener">Load balancing</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SystemDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Polling vs. WebSocket vs. Server-Sent Events</title>
      <link href="../../p/Polling-vs-WebSocket-vs-Server-Sent-Events.html"/>
      <url>../../p/Polling-vs-WebSocket-vs-Server-Sent-Events.html</url>
      
        <content type="html"><![CDATA[<p>Polling, WebSocket, and Server-Sent Events are popular communication protocols between a client like a web browser and a web server. First, let’s start with understanding what a standard HTTP web request looks like. Following are a sequence of events for regular HTTP request:</p><ol><li>The client opens a connection and requests data from the server;</li><li>The server calculates the response;</li><li>The server sends the response back to the client on the opened request;</li></ol><p><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Polling-vs.-WebSocket-vs.-Server-Sent-Events/13.png" alt></p><h2 id="Ajax-Polling"><a href="#Ajax-Polling" class="headerlink" title="Ajax Polling"></a>Ajax Polling</h2><p>Polling is a standard technique used by the vast majority of Ajax applications. The basic idea is that the client repeatedly polls (or requests) a server for data. The client makes a request and waits for the server to respond with data. If no data is available, an empty response is returned:</p><ol><li>The client opens a connection and requests data from the server using regular HTTP;</li><li>The requested webpage sends requests to the server at regular intervals (e.g., 0.5 seconds);</li><li>The server calculates the response and sends it back, just like regular HTTP traffic;</li><li>The client repeats the above three steps periodically to get updates from the server;</li></ol><p><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Polling-vs.-WebSocket-vs.-Server-Sent-Events/14.png" alt></p><p>The problem with Polling is that the client has to keep asking the server for any new data. As a result, a lot of responses are empty, creating HTTP overhead.</p><a id="more"></a><h2 id="HTTP-Long-Polling"><a href="#HTTP-Long-Polling" class="headerlink" title="HTTP Long-Polling"></a>HTTP Long-Polling</h2><p>This is a variation of the traditional polling technique that allows the server to push information to a client whenever the data is available. With Long-Polling, the client requests information from the server exactly as in normal polling, but with the expectation that the server may not respond immediately. That’s why this technique is sometimes referred to as a “Hanging GET”:</p><ul><li>If the server does not have any data available for the client, instead of sending an empty response, the server holds the request and waits until some data becomes available;</li><li>Once the data becomes available, a full response is sent to the client. The client then immediately re-request information from the server so that the server will almost always have an available waiting request that it can use to deliver data in response to an event;</li></ul><p>The basic life cycle of an application using HTTP Long-Polling is as follows:</p><ol><li>The client makes an initial request using regular HTTP and then waits for a response;</li><li>The server delays its response until an update is available or a timeout has occurred;</li><li>When an update is available, the server sends a full response to the client;</li><li>The client typically sends a new long-poll request, either immediately upon receiving a response or after a pause to allow an acceptable latency period;</li><li>Each Long-Poll request has a timeout. The client has to reconnect periodically after the connection is closed due to timeouts;</li></ol><p><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Polling-vs.-WebSocket-vs.-Server-Sent-Events/15.png" alt></p><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><p>WebSocket provides full-duplex communication channels over a single TCP connection. It provides a persistent connection between a client and a server that both parties can use to start sending data at any time. The client establishes a WebSocket connection through a process known as the WebSocket handshake. If the process succeeds, then the server and client can exchange data in both directions at any time. The WebSocket protocol enables communication between a client and a server with lower overheads, facilitating real-time data transfer from and to the server. This is made possible by providing a standardized way for the server to send content to the browser without being asked by the client and allowing for messages to be passed back and forth while keeping the connection open. In this way, a two-way (bi-directional) ongoing conversation can take place between a client and a server:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Polling-vs.-WebSocket-vs.-Server-Sent-Events/16.png" alt></p><h2 id="Server-Sent-Events-SSE"><a href="#Server-Sent-Events-SSE" class="headerlink" title="Server-Sent Events (SSE)"></a>Server-Sent Events (SSE)</h2><p>Under SSE the client establishes a persistent and long-term connection with the server. The server uses this connection to send data to a client. If the client wants to send data to the server, it would require the use of another technology/protocol to do so:</p><ol><li>Client requests data from a server using regular HTTP;</li><li>The requested webpage opens a connection to the server;</li><li>The server sends the data to the client whenever there’s new information available;</li></ol><p><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Polling-vs.-WebSocket-vs.-Server-Sent-Events/17.png" alt></p><p>SSE is best when we need real-time traffic from the server to the client or if the server is generating data in a loop and will be sending multiple events to the client.</p>]]></content>
      
      
      
        <tags>
            
            <tag> SystemDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>merge sort</title>
      <link href="../../p/merge-sort.html"/>
      <url>../../p/merge-sort.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        self.nums = nums</span><br><span class="line">        self.temp = [<span class="number">-1</span>] * len(self.nums)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, lo, mid, hi)</span>:</span></span><br><span class="line">        i, j = lo, mid + <span class="number">1</span></span><br><span class="line">        k = lo</span><br><span class="line">        <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= hi:</span><br><span class="line">            <span class="keyword">if</span> self.nums[i] &lt; self.nums[j]:</span><br><span class="line">                self.temp[k] = self.nums[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.temp[k] = self.nums[j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">            self.temp[k] = self.nums[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &lt;= hi:</span><br><span class="line">            self.temp[k] = self.nums[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        self.nums[lo : hi + <span class="number">1</span>] = self.temp[lo : hi + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self, lo, hi)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> lo &gt;= hi:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># bottom up</span></span><br><span class="line">        mid = lo + ((hi - lo) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">        self.sort(lo, mid)</span><br><span class="line">        self.sort(mid + <span class="number">1</span>, hi) <span class="comment"># mid + 1</span></span><br><span class="line">        self.merge(lo, mid, hi)</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">45</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">29</span>]</span><br><span class="line">mergesort = MergerSort(nums)</span><br><span class="line">mergesort.sort(<span class="number">0</span>, len(nums) - <span class="number">1</span>)</span><br><span class="line">print(mergesort.nums)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergesort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(lo, hi)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> lo &gt;= hi:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        mid = lo + ((hi - lo) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">        merge_sort(lo, mid)</span><br><span class="line">        merge_sort(mid + <span class="number">1</span>, hi)</span><br><span class="line">        merge(lo, mid, hi)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(lo, mid, hi)</span>:</span></span><br><span class="line">        i, j = lo, mid + <span class="number">1</span></span><br><span class="line">        k = lo</span><br><span class="line">        <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= hi:</span><br><span class="line">            <span class="keyword">if</span> nums[i] &lt; nums[j]:</span><br><span class="line">                temp[k] = nums[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp[k] = nums[j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= mid:</span><br><span class="line">            temp[k] = nums[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &lt;= hi:</span><br><span class="line">            temp[k] = nums[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        nums[lo : hi + <span class="number">1</span>] = temp[lo : hi + <span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">    n = len(nums)</span><br><span class="line">    temp = [<span class="number">-1</span>] * n</span><br><span class="line">    lo, hi = <span class="number">0</span>, n - <span class="number">1</span></span><br><span class="line">    merge_sort(lo, hi)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>,<span class="number">23</span>,<span class="number">45</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">29</span>]</span><br><span class="line">print(mergesort(nums))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CLRS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>quick sort</title>
      <link href="../../p/quick-sort.html"/>
      <url>../../p/quick-sort.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        self.nums = nums</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(self, lo, hi)</span>:</span></span><br><span class="line">        pivot = self.nums[hi]</span><br><span class="line">        i = lo</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(lo, hi):</span><br><span class="line">            <span class="keyword">if</span> self.nums[j] &lt; pivot:</span><br><span class="line">                <span class="comment"># i停留在大于pivot的数， 等到j找到下一个小于pivot的数交换</span></span><br><span class="line">                self.nums[i], self.nums[j] = self.nums[j], self.nums[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        self.nums[i], self.nums[hi] = self.nums[hi], self.nums[i]</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self, lo, hi)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> lo &gt;= hi:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        idx = self.partition(lo, hi)</span><br><span class="line">        self.sort(lo, idx - <span class="number">1</span>)</span><br><span class="line">        self.sort(idx + <span class="number">1</span>, hi)</span><br><span class="line"></span><br><span class="line">nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">7</span>]</span><br><span class="line">quicksort = QuickSort(nums)</span><br><span class="line">quicksort.sort(<span class="number">0</span>, len(nums) - <span class="number">1</span>)</span><br><span class="line">print(quicksort.nums)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(lo, hi)</span>:</span></span><br><span class="line">        pivot = nums[hi]</span><br><span class="line">        i = lo</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(lo, hi):</span><br><span class="line">            <span class="keyword">if</span> nums[j] &lt; pivot:</span><br><span class="line">                <span class="comment"># i停留在大于pivot的数， 等到j找到下一个小于pivot的数交换</span></span><br><span class="line">                nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        nums[i], nums[hi] = nums[hi], nums[i]</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(lo, hi)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> lo &gt;= hi:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        idx = partition(lo, hi)</span><br><span class="line">        sort(lo, idx - <span class="number">1</span>) <span class="comment">### idx - 1</span></span><br><span class="line">        sort(idx + <span class="number">1</span>, hi)</span><br><span class="line"></span><br><span class="line">    sort(<span class="number">0</span>, len(nums) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">7</span>]</span><br><span class="line">quick_sort(nums)</span><br><span class="line">print(nums)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CLRS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Consistent Hashing</title>
      <link href="../../p/Consistent-Hashing.html"/>
      <url>../../p/Consistent-Hashing.html</url>
      
        <content type="html"><![CDATA[<p><code>Distributed Hash Table</code> (DHT) is one of the fundamental components used in distributed scalable systems. Hash Tables need a key, a value, and a hash function where hash function maps the key to a location where the value is stored:</p><blockquote><p>index = hash_function(key)</p></blockquote><p>Suppose we are designing a distributed caching system. Given “n” cache servers, an intuitive hash function would be “key % n”. It is simple and commonly used. But it has two major drawbacks:</p><ol><li>It is NOT horizontally scalable. Whenever a new cache host is added to the system, all existing mappings are broken. It will be a pain point in maintenance if the caching system contains lots of data. Practically, it becomes difficult to schedule a downtime to update all caching mappings;</li><li>It may NOT be load balanced, especially for non-uniformly distributed data. In practice, it can be easily assumed that the data will not be distributed uniformly. For the caching system, it translates into some caches becoming hot and saturated while the others idle and are almost empty;</li></ol><p>In such situations, consistent hashing is a good way to improve the caching system.</p><h2 id="What-is-Consistent-Hashing"><a href="#What-is-Consistent-Hashing" class="headerlink" title="What is Consistent Hashing?"></a>What is Consistent Hashing?</h2><p>Consistent hashing is a very useful strategy for distributed caching systems and DHTs. It allows us to distribute data across a cluster in such a way that will minimize reorganization when nodes are added or removed. Hence, the caching system will be easier to scale up or scale down.</p><p>In Consistent Hashing, when the hash table is resized (e.g., a new cache host is added to the system), only “k/n” keys need to be remapped where “k” is the total number of keys and “n” is the total number of servers. Recall that in a caching system using the “mod” as the hash function, all keys need to be remapped.</p><p>In Consistent Hashing, objects are mapped to the same host if possible. When a host is removed from the system, the objects on that host are shared by other hosts; when a new host is added, it takes its share from a few hosts without touching other’s shares.</p><a id="more"></a><h2 id="How-does-It-Work"><a href="#How-does-It-Work" class="headerlink" title="How does It Work?"></a>How does It Work?</h2><p>As a typical hash function, consistent hashing maps a key to an integer. Suppose the output of the hash function is in the range of [0, 256]. Imagine that the integers in the range are placed on a ring such that the values are wrapped around.</p><p>Here’s how consistent hashing works:</p><ol><li>Given a list of cache servers, hash them to integers in the range;</li><li>To map a key to a server,<ul><li>Hash it to a single integer;</li><li>Move clockwise on the ring until finding the first cache it encounters;</li><li>That cache is the one that contains the key. See animation below as an example: key1 maps to cache A; key2 maps to cache C;</li></ul></li></ol><p><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Consistent-Hashing/08.png" alt><br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Consistent-Hashing/09.png" alt><br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Consistent-Hashing/10.png" alt><br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Consistent-Hashing/11.png" alt><br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Consistent-Hashing/12.png" alt></p><p>To add a new server, say D, keys that were originally residing at C will be split. Some of them will be shifted to D, while other keys will not be touched.<br>To remove a cache or, if a cache fails, say A, all keys that were originally mapped to A will fall into B, and only those keys need to be moved to B; other keys will not be affected.</p><p>For load balancing, as we discussed in the beginning, the real data is essentially randomly distributed and thus may not be uniform. It may make the keys on caches unbalanced.<br>To handle this issue, we add “virtual replicas” for caches. Instead of mapping each cache to a single point on the ring, we map it to multiple points on the ring, i.e., replicas. This way, each cache is associated with multiple portions of the ring.<br>If the hash function “mixes well”, as the number of replicas increases, the keys will be more balanced.</p>]]></content>
      
      
      
        <tags>
            
            <tag> SystemDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>segment tree</title>
      <link href="../../p/segment-tree.html"/>
      <url>../../p/segment-tree.html</url>
      
        <content type="html"><![CDATA[<p>线段树是一种非常灵活的数据结构，它可以用于解决多种范围查询问题，比如在对数时间内从数组中找到最小值、最大值、总和、最大公约数、最小公倍数等。<br>线段树既可以用数组也可以用树来实现。对于数组实现，如果索引 i 处的元素不是一个叶节点，那么其左子节点和右子节点分别存储在索引为 2i 和 2i+1 的元素处。<br>我们从叶节点开始，用输入数组的元素 a[0,1,…,n−1] 初始化它们。然后我们逐步向上移动到更高一层来计算父节点的和，直到最后到达线段树的根节点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">class NumArray:</span><br><span class="line">    def __init__(self, nums):</span><br><span class="line">        n = len(nums)</span><br><span class="line">        self.tree = [0] * 2 * n</span><br><span class="line">        i, j = n, 0</span><br><span class="line">        while i &lt; 2 * n:</span><br><span class="line">            self.tree[i] = nums[j]</span><br><span class="line">            i += 1</span><br><span class="line">            j += 1</span><br><span class="line">        for i in range(n - 1, 0, -1): # 2n - 1个节点 所以 i 只用取到1</span><br><span class="line">            self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1]</span><br><span class="line"></span><br><span class="line">    def  update(self, i, val):</span><br><span class="line">        n = len(self.tree) // 2</span><br><span class="line">        i += n</span><br><span class="line">        self.tree[i] = val</span><br><span class="line">        while i &gt; 0:</span><br><span class="line">            left, right = i, i</span><br><span class="line">            if i &amp; 1:</span><br><span class="line">                left = i - 1 # i 为偶数就是左节点</span><br><span class="line">            else:</span><br><span class="line">                right = i + 1</span><br><span class="line">            self.tree[i // 2] = self.tree[left] + self.tree[right]</span><br><span class="line">            i //= 2</span><br><span class="line"></span><br><span class="line">    def  sumRange(self, i, j):</span><br><span class="line">        n = len(self.tree) // 2</span><br><span class="line">        i += n</span><br><span class="line">        j += n</span><br><span class="line">        res = 0</span><br><span class="line">        while i &lt;= j:</span><br><span class="line">            if i &amp; 1:</span><br><span class="line">                res += self.tree[i] # 奇数右节点直接加</span><br><span class="line">                i += 1</span><br><span class="line">            if not (j &amp; 1):</span><br><span class="line">                res += self.tree[j]</span><br><span class="line">                j -= 1</span><br><span class="line">            i //= 2</span><br><span class="line">            j //= 2</span><br><span class="line">        return res</span><br><span class="line"></span><br><span class="line">nums = [1, 3, 5, 7, 9]</span><br><span class="line">rangeSum = NumArray(nums)</span><br><span class="line">print(rangeSum.sumRange(2, 3))</span><br><span class="line">rangeSum.update(1, 6)</span><br><span class="line">print(rangeSum.sumRange(1, 3))</span><br></pre></td></tr></table></figure><p>因为我们在 for 循环的每次迭代中计算一个节点的和。而一个线段树中大约有 2n 个节点。<br>这可以通过以下方式证明：具有 n 个元素的数组线段树有<br>n 个叶节点（数组元素本身）。每一层中的节点数是下面一层中节点数的一半。<br>因此，如果我们按层对节点数求和，我们将得到：n+n/2+n/4+n/8+…+1≈2n</p><p>空间复杂度：O(n)，我们用了 2n 的额外空间来存储整个线段树。</p><h2 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h2><p><a href="https://leetcode-cn.com/problems/range-sum-query-mutable/" target="_blank" rel="noopener">307. Range Sum Query - Mutable</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CodingInterviews </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Step by Step Guide</title>
      <link href="../../p/A-Step-by-Step-Guide.html"/>
      <url>../../p/A-Step-by-Step-Guide.html</url>
      
        <content type="html"><![CDATA[<p>A lot of software engineers struggle with System Design Interviews (SDIs) primarily because of three reasons:</p><ol><li>The unstructured nature of SDIs, where the candidates are asked to work on an open-ended design problem that doesn’t have a standard answer;</li><li>Candidates lack experience in developing complex and large scale systems;</li><li>Candidates did not spend enough time to prepare for SDIs;</li></ol><p>Like coding interviews, candidates who haven’t put a deliberate effort to prepare for SDIs, mostly perform poorly, especially at top companies like Google, Facebook, Amazon, Microsoft, etc. In these companies, candidates who do not perform above average have a limited chance to get an offer. On the other hand, a good performance always results in a better offer (higher position and salary) since it shows the candidate’s ability to handle a complex system.</p><a id="more"></a><h2 id="Step-1-Requirements-Clarifications"><a href="#Step-1-Requirements-Clarifications" class="headerlink" title="Step 1: Requirements Clarifications"></a>Step 1: Requirements Clarifications</h2><p>It is always a good idea to ask questions about the exact scope of the problem we are trying to solve. Design questions are mostly open-ended, and they don’t have ONE correct answer. That’s why clarifying ambiguities early in the interview becomes critical. Candidates who spend enough time to define the end goals of the system always have a better chance to be successful in the interview. Also, since we only have 35~40 minutes to design a (supposedly) large system, we should clarify what parts of the system we will be focusing on.</p><p>Let’s expand this with an actual example of designing a Twitter-like service. Here are some questions for designing Twitter that should be answered before moving on to the next steps:</p><ul><li>Will users of our service be able to post tweets and follow other people?</li><li>Should we also design to create and display the user’s timeline?</li><li>Will tweets contain photos and videos?</li><li>Are we focusing on the backend only, or are we developing the frontend too?</li><li>Will users be able to search tweets?</li><li>Do we need to display hot trending topics?</li><li>Will there be any push notification for new (or important) tweets?</li></ul><p>All such questions will determine how our end design will look like.</p><h2 id="Step-2-Back-Of-The-Envelope-Estimation"><a href="#Step-2-Back-Of-The-Envelope-Estimation" class="headerlink" title="Step 2: Back-Of-The-Envelope Estimation"></a>Step 2: Back-Of-The-Envelope Estimation</h2><p>It is always a good idea to estimate the scale of the system we’re going to design. This will also help later when we focus on scaling, partitioning, load balancing, and caching:</p><ul><li>What scale is expected from the system (e.g., number of new tweets, number of tweet views, number of timeline generations per second., etc.)?</li><li>How much storage will we need? We will have different storage requirements if users can have photos and videos in their tweets;</li><li>What network bandwidth usage are we expecting? This will be crucial in deciding how we will manage traffic and balance load between servers;</li></ul><h2 id="Step-3-System-Interface-Definition"><a href="#Step-3-System-Interface-Definition" class="headerlink" title="Step 3: System Interface Definition"></a>Step 3: System Interface Definition</h2><p>Define what APIs are expected from the system. This will establish the exact contract expected from the system and ensure if we haven’t gotten any requirements wrong. Some examples of APIs for our Twitter-like service will be:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">postTweet(user_id, tweet_data, tweet_location, user_location, timestamp, ...)</span><br><span class="line">generateTimeline(user_id, current_time, user_location, ...)</span><br><span class="line">markTweetFavorite(user_id, tweet_id, timestamp, ...)</span><br></pre></td></tr></table></figure><h2 id="Step-4-Defining-Data-Model"><a href="#Step-4-Defining-Data-Model" class="headerlink" title="Step 4: Defining Data Model"></a>Step 4: Defining Data Model</h2><p>Defining the data model in the early part of the interview will clarify how data will flow between different system components. Later, it will guide for data partitioning and management. The candidate should identify various entities of the system, how they will interact with each other, and different aspects of data management like storage, transportation, encryption, etc. Here are some entities for our Twitter-like service:</p><ul><li><strong>User</strong>: UserID, Name, Email, DoB, CreationData, LastLogin, etc.;</li><li><strong>Tweet</strong>: TweetID, Content, TweetLocation, NumberOfLikes, TimeStamp, etc.;</li><li><strong>UserFollow</strong>: UserID1, UserID2;</li><li><strong>FavoriteTweets</strong>: UserID, TweetID, TimeStamp;</li></ul><p>Which database system should we use? Will NoSQL like Cassandra best fit our needs, or should we use a MySQL-like solution? What kind of block storage should we use to store photos and videos?</p><h2 id="Step-5-High-Level-Design"><a href="#Step-5-High-Level-Design" class="headerlink" title="Step 5: High-Level Design"></a>Step 5: High-Level Design</h2><p>Draw a block diagram with 5-6 boxes representing the core components of our system. We should identify enough components that are needed to solve the actual problem from end-to-end.</p><p>For Twitter, at a high level, we will need multiple application servers to serve all the read/write requests with load balancers in front of them for traffic distributions. If we’re assuming that we will have a lot more read traffic (compared to write), we can decide to have separate servers to handle these scenarios. On the backend, we need an efficient database that can store all the tweets and support a huge number of reads. We will also need a distributed file storage system for storing photos and videos:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/A-Step-By-Step-Guide/18.png" alt></p><h2 id="Step-6-Detailed-Design"><a href="#Step-6-Detailed-Design" class="headerlink" title="Step 6: Detailed Design"></a>Step 6: Detailed Design</h2><p>Dig deeper into two or three major components; the interviewer’s feedback should always guide us to what parts of the system need further discussion. We should present different approaches, their Pros and Cons, and explain why we will prefer one approach over the other. Remember, there is no single answer; the only important thing is to consider tradeoffs between different options while keeping system constraints in mind:</p><ul><li>Since we will be storing a massive amount of data, how should we partition our data to distribute it to multiple databases? Should we try to store all the data of a user on the same database? What issue could it cause?</li><li>How will we handle hot users who tweet a lot or follow lots of people?</li><li>Since users’ timeline will contain the most recent (and relevant) tweets, should we try to store our data so that it is optimized for scanning the latest tweets?</li><li>How much and at which layer should we introduce cache to speed things up?</li><li>What components need better load balancing?</li></ul><h2 id="Step-7-Identifying-and-Resolving-Bottlenecks"><a href="#Step-7-Identifying-and-Resolving-Bottlenecks" class="headerlink" title="Step 7: Identifying and Resolving Bottlenecks"></a>Step 7: Identifying and Resolving Bottlenecks</h2><p>Try to discuss as many bottlenecks as possible and different approaches to mitigate them:</p><ul><li>Is there any single point of failure in our system? What are we doing to mitigate it?</li><li>Do we have enough replicas of the data so that we can still serve our users if we lose a few servers?</li><li>Similarly, do we have enough copies of different services running such that a few failures will not cause a total system shutdown?</li><li>How are we monitoring the performance of our service? Do we get alerts whenever critical components fail or their performance degrades?</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> SystemDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest Quick Start Guide</title>
      <link href="../../p/pytest-Quick-Start-Guide.html"/>
      <url>../../p/pytest-Quick-Start-Guide.html</url>
      
        <content type="html"><![CDATA[<h1 id="Writing-and-Running-Tests"><a href="#Writing-and-Running-Tests" class="headerlink" title="Writing and Running Tests"></a>Writing and Running Tests</h1><ul><li>Organizing files and packages</li><li>Useful command-line options</li><li>Configuration: pytest.ini file</li></ul><h2 id="Installing-pytest"><a href="#Installing-pytest" class="headerlink" title="Installing pytest"></a>Installing pytest</h2><h3 id="pip-and-virtualenv"><a href="#pip-and-virtualenv" class="headerlink" title="pip and virtualenv"></a>pip and virtualenv</h3><p><a href="https://packaging.python.org/guides/installing-using-pip-and-virtualenv/" target="_blank" rel="noopener">guides/installing-using-pip-and-virtualenv/</a><br><code>python -m venv .env</code><br><code>source .env/bin/activate</code><br><code>pip install pytest</code><br><code>pytest --version</code></p><h3 id="Writing-and-running-tests"><a href="#Writing-and-running-tests" class="headerlink" title="Writing and running tests"></a>Writing and running tests</h3><p>Note that there’s no need to create classes; just simple functions and plain assert statements are enough, but if you want to use classes to group tests you can do so:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMechanics</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_player_hit</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_player_health_flask</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>Grouping tests can be useful when you want to put a number of tests under the same scope: you can execute tests based on the class they are in, apply markers to all of the tests in a class (Chapter 3, Markers and Parametrization), and create fixtures bound to a class (Chapter 4, Fixtures).</p><h3 id="Running-tests"><a href="#Running-tests" class="headerlink" title="Running tests"></a>Running tests</h3><p><code>&gt; pytest</code><br>This will find all of the test_*.py and *_test.py modules in the current directory and below recursively, and will run all of the tests found in those files.You can reduce the search to specific directories<br><code>&gt; pytest  tests/core  tests/contrib</code><br>You can also mix any number of files and directories:<br><code>&gt; pytest  tests/core  tests/contrib/test_text_plugin.py</code><br>You can execute specific tests by using the syntax <code>test-file</code>::<code>test-function-name</code>:<br><code>&gt; pytest  tests/core/test_core.py::test_regex_matching</code><br>You can execute all of the test methods of a test class:<br><code>&gt; pytest  tests/contrib/test_text_plugin.py::TestPluginHooks</code><br>You can execute a specific test method of a test class using the syntax <code>test-file</code>::<code>test-class</code>::<code>test-method-name</code>:<br><code>&gt; pytest  tests/contrib/test_text_plugin.py::TestPluginHooks::test_registration</code><br>show a more verbose output, -v<br><code>&gt; pytest tests/core -v</code><br>To see which tests there are without running them, use the –collect-only  flag:<br>–collect-only is especially useful if you want to execute a specific test but can’t remember its exact name.<br><code>&gt; pytest tests/core --collect-only</code></p><h3 id="Powerful-asserts"><a href="#Powerful-asserts" class="headerlink" title="Powerful asserts"></a>Powerful asserts</h3><p>Contrary to other frameworks, you don’t need to remember various self.assert* or self.expect* functions.<br>here’s an example of a failure:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">________________________ test_default_health ________________________</span><br><span class="line"></span><br><span class="line">    def test_default_health():</span><br><span class="line">       <span class="built_in"> health </span>= get_default_health(<span class="string">'warrior'</span>)</span><br><span class="line">&gt;       assert<span class="built_in"> health </span>== 95</span><br><span class="line">E       assert 80 == 95</span><br><span class="line"></span><br><span class="line">tests\test_assert_demo.py:25: AssertionError</span><br></pre></td></tr></table></figure><h4 id="Text-differences"><a href="#Text-differences" class="headerlink" title="Text differences"></a>Text differences</h4><p>When showing the explanation for short strings, pytest uses a simple difference method:</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">E         - warrior</span><br><span class="line">E         + sorcerer</span><br><span class="line"><span class="symbol">Longer</span> <span class="keyword">strings </span>show a smarter delta, using difflib.ndiff to quickly spot the differences</span><br><span class="line">E       AssertionError: <span class="meta">assert</span> <span class="string">'A battle-har... and weapons.'</span> == <span class="string">'A battle-hard... and weapons.'</span></span><br><span class="line">E         - A <span class="keyword">battle-hardened </span>veteran, favors heavy armor <span class="keyword">and </span>weapons.</span><br><span class="line">E         ?                            ^ ^^^^</span><br><span class="line">E         + A <span class="keyword">battle-hardened </span>veteran, can equip heavy armor <span class="keyword">and </span>weapons.</span><br><span class="line">E         ?                            ^ ^^^^^^^</span><br><span class="line"><span class="keyword">Multiline </span><span class="keyword">strings </span>are also treated specially:</span><br><span class="line">E       AssertionError: <span class="meta">assert</span> <span class="string">'A seasoned v... \n'</span> == <span class="string">'A seasoned ve... \n'</span></span><br><span class="line">E         - A seasoned veteran of many <span class="keyword">battles. </span>High <span class="keyword">Strength </span><span class="keyword">and </span>Dexterity</span><br><span class="line">E         ?                                     -----</span><br><span class="line">E         + A seasoned veteran of many <span class="keyword">battles. </span><span class="keyword">Strength </span><span class="keyword">and </span>Dexterity</span><br><span class="line">E           allow to <span class="keyword">yield </span>heavy armor <span class="keyword">and </span>weapons, as well as carry</span><br><span class="line">E         - more equipment <span class="meta">while</span> keeping a light roll. Weak in magic.</span><br><span class="line">E         ?               ---------------------------</span><br><span class="line">E         + more equipment. Weak in magic.</span><br></pre></td></tr></table></figure><h4 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h4><p>Assertion failures for lists also show only differing items by default:</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">E</span>       <span class="type">AssertionError</span>: assert [<span class="symbol">'long</span> sword'...et', <span class="symbol">'shield'</span>] == [<span class="symbol">'long</span> sword', <span class="symbol">'shield'</span>]</span><br><span class="line"><span class="type">E</span>         <span class="type">At</span> index <span class="number">1</span> diff: <span class="symbol">'warrior</span> set' != <span class="symbol">'shield'</span></span><br><span class="line"><span class="type">E</span>         <span class="type">Left</span> contains more items, first extra item: <span class="symbol">'shield'</span></span><br><span class="line"><span class="type">E</span>         <span class="type">Use</span> -v to get the full diff</span><br></pre></td></tr></table></figure><p>Note that pytest shows which index differs, and also that the -v flag can be used to show the complete difference between the lists:</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">E</span>       <span class="type">AssertionError</span>: assert [<span class="symbol">'long</span> sword'...et', <span class="symbol">'shield'</span>] == [<span class="symbol">'long</span> sword', <span class="symbol">'shield'</span>]</span><br><span class="line"><span class="type">E</span>         <span class="type">At</span> index <span class="number">1</span> diff: <span class="symbol">'warrior</span> set' != <span class="symbol">'shield'</span></span><br><span class="line"><span class="type">E</span>         <span class="type">Left</span> contains more items, first extra item: <span class="symbol">'shield'</span></span><br><span class="line"><span class="type">E</span>         <span class="type">Full</span> diff:</span><br><span class="line"><span class="type">E</span>         - [<span class="symbol">'long</span> sword', <span class="symbol">'warrior</span> set', <span class="symbol">'shield'</span>]</span><br><span class="line"><span class="type">E</span>         ?               ---------------</span><br><span class="line"><span class="type">E</span>         + [<span class="symbol">'long</span> sword', <span class="symbol">'shield'</span>]</span><br></pre></td></tr></table></figure><h4 id="Dictionaries-and-sets"><a href="#Dictionaries-and-sets" class="headerlink" title="Dictionaries and sets"></a>Dictionaries and sets</h4><p>Dictionaries are probably one of the most used data structures in Python, so, unsurprisingly, pytest has specialized representation for them:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">E       AssertionError: assert &#123;<span class="string">'knight'</span>: <span class="number">95</span>...<span class="string">'warrior'</span>: <span class="number">85</span>&#125; == &#123;<span class="string">'sorcerer'</span>: <span class="number">50</span>, <span class="string">'warrior'</span>: <span class="number">85</span>&#125;</span><br><span class="line">E         Omitting <span class="number">1</span> identical <span class="built_in">items</span>, use -vv <span class="keyword">to</span> show</span><br><span class="line">E         Differing item<span class="variable">s:</span></span><br><span class="line">E         &#123;<span class="string">'sorcerer'</span>: <span class="number">55</span>&#125; != &#123;<span class="string">'sorcerer'</span>: <span class="number">50</span>&#125;</span><br><span class="line">E         Left contains more item<span class="variable">s:</span></span><br><span class="line">E         &#123;<span class="string">'knight'</span>: <span class="number">95</span>&#125;</span><br><span class="line">E         Use -v <span class="keyword">to</span> <span class="built_in">get</span> the full diff</span><br><span class="line"></span><br><span class="line">E         Extra <span class="built_in">items</span> in the <span class="keyword">left</span> <span class="keyword">se</span><span class="variable">t:</span></span><br><span class="line">E         <span class="string">'knight'</span></span><br></pre></td></tr></table></figure><h4 id="How-does-pytest-do-it"><a href="#How-does-pytest-do-it" class="headerlink" title="How does pytest do it?"></a>How does pytest do it?</h4><p>By default, Python’s assert statement does not provide any details when it fails, but as we just saw, pytest shows a lot of information about the variables and expressions involved in a failed assertion. So how does pytest do it?</p><p>Pytest is able to provide useful exceptions because it implements a mechanism called assertion rewriting.<br>ssertion rewriting works by installing a custom import hook that intercepts the standard Python import mechanism. When pytest detects that a test file (or plugin) is about to be imported, instead of loading the module, it first compiles the source code into an abstract syntax tree (AST) using the built-in ast module. Then, it searches for any assert statements and rewrites them so that the variables used in the expression are kept so that they can be used to show more helpful messages if the assertion fails. Finally, it saves the rewritten pyc file to disk for caching</p><h3 id="Checking-exceptions-pytest-raises"><a href="#Checking-exceptions-pytest-raises" class="headerlink" title="Checking exceptions: pytest.raises"></a>Checking exceptions: pytest.raises</h3><p>Testing that exceptions are raised in the appropriate circumstances is just as important as testing the main functionality of APIs. It is also important to make sure that exceptions contain an appropriate and clear message to help users understand the issue.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_character</span><span class="params">(name: str, class_name: str)</span> -&gt; Character:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Creates a new character and inserts it into the database.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :raise InvalidCharacterNameError:</span></span><br><span class="line"><span class="string">        if the character name is empty.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :raise InvalidClassNameError:</span></span><br><span class="line"><span class="string">        if the class name is invalid.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :return: the newly created Character.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_empty_name</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> pytest.raises(InvalidCharacterNameError):</span><br><span class="line">        create_character(name=<span class="string">''</span>, class_name=<span class="string">'warrior'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_invalid_class_name</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> pytest.raises(InvalidClassNameError):</span><br><span class="line">        create_character(name=<span class="string">'Solaire'</span>, class_name=<span class="string">'mage'</span>)</span><br></pre></td></tr></table></figure><h4 id="Checking-exception-messages"><a href="#Checking-exception-messages" class="headerlink" title="Checking exception messages"></a>Checking exception messages</h4><p>In the previous examples, we only verified that the code was raising the appropriate exception type, but not the actual message.<br>pytest.raises can receive an optional match argument, which is a regular expression string that will be matched against the exception message, as well as checking the exception type. For more details, go to: <a href="https://docs.python.org/3/howto/regex.html" target="_blank" rel="noopener">https://docs.python.org/3/howto/regex.html</a>. We can use that to improve our tests even further:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_empty_name</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> pytest.raises(InvalidCharacterNameError,</span><br><span class="line">                       match=<span class="string">'character name empty'</span>):</span><br><span class="line">        create_character(name=<span class="string">''</span>, class_name=<span class="string">'warrior'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_invalid_class_name</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> pytest.raises(InvalidClassNameError,</span><br><span class="line">                       match=<span class="string">'invalid class name: "mage"'</span>):</span><br><span class="line">        create_character(name=<span class="string">'Solaire'</span>, class_name=<span class="string">'mage'</span>)</span><br></pre></td></tr></table></figure><h3 id="Checking-warnings-pytest-warns"><a href="#Checking-warnings-pytest-warns" class="headerlink" title="Checking warnings: pytest.warns"></a>Checking warnings: pytest.warns</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_initial_hit_points</span><span class="params">(player_class: Union[PlayerClass, str])</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(player_class, str):</span><br><span class="line">        msg = <span class="string">'Using player_class as str has been deprecated'</span> \</span><br><span class="line">              <span class="string">'and will be removed in the future'</span></span><br><span class="line">        warnings.warn(DeprecationWarning(msg))</span><br><span class="line">        player_class = get_player_enum_from_string(player_class)</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_get_initial_hit_points_warning</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> pytest.warns(DeprecationWarning):</span><br><span class="line">        get_initial_hit_points(<span class="string">'warrior'</span>)</span><br></pre></td></tr></table></figure><p>As with pytest.raises, pytest.warns can receive an optional match argument, which is a regular expression string. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_get_initial_hit_points_warning</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> pytest.warns(DeprecationWarning,</span><br><span class="line">                      match=<span class="string">'.*str has been deprecated.*'</span>):</span><br><span class="line">        get_initial_hit_points(<span class="string">'warrior'</span>)</span><br></pre></td></tr></table></figure><h3 id="Comparing-floating-point-numbers-pytest-approx"><a href="#Comparing-floating-point-numbers-pytest-approx" class="headerlink" title="Comparing floating point numbers: pytest.approx"></a>Comparing floating point numbers: pytest.approx</h3><p>Numbers that we consider equal in the real world are not so when represented by computer hardware:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> <span class="string">+</span> <span class="number">0.2</span> <span class="string">==</span> <span class="number">0.3</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><p>When writing tests, it is very common to compare the results produced by our code against what we expect as floating point values. As shown above, a simple == comparison often won’t be sufficient. A common approach is to use a known tolerance instead and use abs to correctly deal with negative numbers:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_simple_math</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> abs(<span class="number">0.1</span> + <span class="number">0.2</span>) - <span class="number">0.3</span> &lt; <span class="number">0.0001</span></span><br></pre></td></tr></table></figure><p>But besides being ugly and hard to understand, it is sometimes difficult to come up with a tolerance that works in most situations. The chosen tolerance of 0.0001 might work for the numbers above, but not for very large numbers or very small ones.</p><p>pytest.approx solves this problem by automatically choosing a tolerance appropriate for the values involved in the expression, providing a very nice syntax to boot:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_approx_simple</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="number">0.1</span> + <span class="number">0.2</span> == approx(<span class="number">0.3</span>)</span><br></pre></td></tr></table></figure><p>You can read the above as assert that 0.1 + 0.2 equals approximately to 0.3.<br>But the  approx function does not stop there; it can be used to compare:<br>Sequences of numbers:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_approx_list</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> [<span class="number">0.1</span> + <span class="number">1.2</span>, <span class="number">0.2</span> + <span class="number">0.8</span>] == approx([<span class="number">1.3</span>, <span class="number">1.0</span>])</span><br></pre></td></tr></table></figure><p>Dictionary values (not keys):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_approx_dict</span><span class="params">()</span>:</span></span><br><span class="line">    values = &#123;<span class="string">'v1'</span>: <span class="number">0.1</span> + <span class="number">1.2</span>, <span class="string">'v2'</span>: <span class="number">0.2</span> + <span class="number">0.8</span>&#125;</span><br><span class="line">    <span class="keyword">assert</span> values == approx(dict(v1=<span class="number">1.3</span>, v2=<span class="number">1.0</span>))</span><br></pre></td></tr></table></figure><p>numpy arrays:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_approx_numpy</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">    values = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>]) + np.array([<span class="number">1.2</span>, <span class="number">0.8</span>])</span><br><span class="line">    <span class="keyword">assert</span> values == approx(np.array([<span class="number">1.3</span>, <span class="number">1.0</span>]))</span><br></pre></td></tr></table></figure><p>When a test fails, approx provides a nice error message displaying the values that failed and the tolerance used:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    <span class="string">def</span> <span class="string">test_approx_simple_fail():</span></span><br><span class="line"><span class="string">&gt;</span>       <span class="string">assert</span> <span class="number">0.1</span> <span class="string">+</span> <span class="number">0.2</span> <span class="string">==</span> <span class="string">approx(0.35)</span></span><br><span class="line"><span class="string">E</span>       <span class="string">assert</span> <span class="string">(0.1</span> <span class="string">+</span> <span class="number">0.2</span><span class="string">)</span> <span class="string">==</span> <span class="number">0.35</span> <span class="string">±</span> <span class="number">3.5e-07</span></span><br><span class="line"><span class="string">E</span>        <span class="string">+</span> <span class="string">where</span> <span class="number">0.35</span> <span class="string">±</span> <span class="number">3.5e-07</span> <span class="string">=</span> <span class="string">approx(0.35)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Designing Facebook Messenger</title>
      <link href="../../p/Designing-Facebook-Messenger.html"/>
      <url>../../p/Designing-Facebook-Messenger.html</url>
      
        <content type="html"><![CDATA[<h2 id="What-is-Facebook-Messenger"><a href="#What-is-Facebook-Messenger" class="headerlink" title="What is Facebook Messenger?"></a>What is Facebook Messenger?</h2><p>Facebook Messenger is a software application which provides text-based instant messaging services to its users. Messenger users can chat with their Facebook friends both from cell-phones and Facebook’s website.</p><h2 id="Requirements-and-Goals-of-the-System"><a href="#Requirements-and-Goals-of-the-System" class="headerlink" title="Requirements and Goals of the System"></a>Requirements and Goals of the System</h2><p>Our Messenger should meet the following requirements:<br><strong>Functional Requirements</strong>:</p><ol><li>Messenger should support one-on-one conversations between users;</li><li>Messenger should keep track of the online/offline statuses of its users;</li><li>Messenger should support the persistent storage of chat history;</li></ol><p><strong>Non-Functional Requirements</strong>:</p><ol><li>Users should have real-time chat experience with minimum latency;</li><li>Our system should be highly consistent; users should be able to see the same chat history on all their devices;</li><li>Messenger’s high availability is desirable; we can tolerate lower availability in the interest of consistency;</li></ol><p><strong>Extended Requirements</strong>:</p><ol><li>Group Chats: Messenger should support multiple people talking to each other in a group;</li><li>Push notifications: Messenger should be able to notify users of new messages when they are offline;</li></ol><a id="more"></a><h2 id="Capacity-Estimation-and-Constraints"><a href="#Capacity-Estimation-and-Constraints" class="headerlink" title="Capacity Estimation and Constraints"></a>Capacity Estimation and Constraints</h2><p>Let’s assume that we have 500 million daily active users and on average each user sends 40 messages daily; this gives us 20 billion messages per day.</p><p><strong>Storage estimates</strong>: Let’s assume that on average a message is 100 bytes, so to store all the messages for one day we would need 2TB of storage:</p><blockquote><p>20 billion messages * 100 bytes = 2 TB/day</p></blockquote><p>To store five years of chat history, we would need 3.6 petabytes of storage:</p><blockquote><p>2 TB * 365 days * 5 years ≈ 3.6 PB</p></blockquote><p>Other than the chat messages, we would also need to store users’ information, messages’ metadata (ID, Timestamp, etc.). Not to mention, the above calculation doesn’t take data compression and replication into consideration.</p><p><strong>Bandwidth estimates</strong>: If our service is getting 2TB of data every day, this will give us 25MB of incoming data for each second:</p><blockquote><p>2 TB / 86400 sec ≈ 25 MB/s</p></blockquote><p>Since each incoming message needs to go out to another user, we will need the same amount of bandwidth 25MB/s for both upload and download.</p><p><strong>High-level estimates</strong>:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-Facebook-Messenger/36.png" alt></p><h2 id="High-Level-Design"><a href="#High-Level-Design" class="headerlink" title="High-Level Design"></a>High-Level Design</h2><p>At a high level, we will need a chat server that will be the central piece, orchestrating all the communications between users. When a user wants to send a message to another user, they will connect to the chat server and send the message to the server; the server then passes that message to the other user and also stores it in the database:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-Facebook-Messenger/37.png" alt></p><p>The detailed workflow would look like this:</p><ol><li>User A sends a message to User B through the chat server;</li><li>The server receives the message and sends an acknowledgment to User A;</li><li>The server stores the message in its database and sends the message to User B;</li><li>User B receives the message and sends the acknowledgment to the server;</li><li>The server notifies User A that the message has been delivered successfully to User B;</li></ol><p><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-Facebook-Messenger/38.png" alt></p><h2 id="Detailed-Component-Design"><a href="#Detailed-Component-Design" class="headerlink" title="Detailed Component Design"></a>Detailed Component Design</h2><p>Let’s try to build a simple solution first where everything runs on one server. At the high level our system needs to handle the following use cases:</p><ol><li>Receive incoming messages and deliver outgoing messages;</li><li>Store and retrieve messages from the database;</li><li>Keep a record of which user is online or has gone offline, and notify all the relevant users about these status changes;</li></ol><p>Let’s talk about these scenarios one by one.</p><h3 id="Messages-Handling"><a href="#Messages-Handling" class="headerlink" title="Messages Handling"></a>Messages Handling</h3><p><strong>How would we efficiently send/receive messages</strong>? To send messages, a user needs to connect to the server and post messages for the other users. To get a message from the server, the user has two options:</p><ol><li>Pull model: Users can periodically ask the server if there are any new messages for them;</li><li>Push model: Users can keep a connection open with the server and can depend upon the server to notify them whenever there are new messages;</li></ol><p>If we go with our first approach, then the server needs to keep track of messages that are still waiting to be delivered, and as soon as the receiving user connects to the server to ask for any new message, the server can return all the pending messages. To minimize latency for the user, they have to check the server quite frequently, and most of the time they will be getting an empty response if there are no pending message. This will waste a lot of resources and does not look like an efficient solution;<br>If we go with our second approach, where all the active users keep a connection open with the server, then as soon as the server receives a message it can immediately pass the message to the intended user. This way, the server does not need to keep track of the pending messages, and we will have minimum latency, as the messages are delivered instantly on the opened connection.</p><p><strong>How will clients maintain an open connection with the server</strong>? We can use HTTP Long Polling or WebSockets. In long polling, clients can request information from the server with the expectation that the server may not respond immediately. If the server has no new data for the client when the poll is received, instead of sending an empty response, the server holds the request open and waits for response information to become available. Once it does have new information, the server immediately sends the response to the client, completing the open request. Upon receipt of the server response, the client can immediately issue another server request for future updates. This gives a lot of improvements in latencies, throughputs, and performance. The long polling request can timeout or can receive a disconnect from the server, in that case, the client has to open a new request.</p><p><strong>How can the server keep track of all the opened connection to redirect messages to the users efficiently</strong>? The server can maintain a hash table, where “key” would be the UserID and “value” would be the connection object. So whenever the server receives a message for a user, it looks up that user in the hash table to find the connection object and sends the message on the open request.</p><p><strong>What will happen when the server receives a message for a user who has gone offline</strong>? If the receiver has disconnected, the server can notify the sender about the delivery failure. If it is a temporary disconnect, e.g., the receiver’s long-poll request just timed out, then we should expect a reconnect from the user. In that case, we can ask the sender to retry sending the message. This retry could be embedded in the client’s logic so that users don’t have to retype the message. The server can also store the message for a while and retry sending it once the receiver reconnects.</p><p><strong>How many chat servers we need</strong>? Let’s plan for 500 million connections at any time. Assuming a modern server can handle 50K concurrent connections at any time, we would need 10K such servers.</p><p><strong>How do we know which server holds the connection to which user</strong>? We can introduce a software load balancer in front of our chat servers; that can map each UserID to a server to redirect the request.</p><p><strong>How should the server process a “deliver message” request</strong>? The server needs to do the following things upon receiving a new message:</p><ol><li>Store the message in the database;</li><li>Send the message to the receiver;</li><li>Send an acknowledgment to the sender;</li></ol><p>The chat server will first find the server that holds the connection for the receiver and pass the message to that server to send it to the receiver. The chat server can then send the acknowledgment to the sender; we don’t need to wait for storing the message in the database (this can happen in the background).</p><p><strong>How does the messenger maintain the sequencing of the messages</strong>? We can store a timestamp with each message, which is the time the message is received by the server. This will still not ensure the correct ordering of messages for clients. The scenario where the server timestamp cannot determine the exact order of messages would look like this:</p><ol><li>User-1 sends a message M1 to the server for User-2;</li><li>The server receives M1 at T1;</li><li>Meanwhile, User-2 sends a message M2 to the server for User-1;</li><li>The server receives the message M2 at T2, such that T2 &gt; T1;</li><li>The server sends message M1 to User-2 and M2 to User-1;</li></ol><p>So User-1 will see M1 first and then M2, whereas User-2 will see M2 first and then M1.<br>To resolve this, we need to keep a sequence number with every message for each client. This sequence number will determine the exact ordering of messages for EACH user. With this solution, both clients will see a different view of the message sequence, but this view will be consistent for them on all devices.</p><h3 id="Storing-and-Retrieving-the-Messages-from-the-Database"><a href="#Storing-and-Retrieving-the-Messages-from-the-Database" class="headerlink" title="Storing and Retrieving the Messages from the Database"></a>Storing and Retrieving the Messages from the Database</h3><p>Whenever the chat server receives a new message, it needs to store it in the database. To do so, we have two options:</p><ol><li>Start a separate thread, which will work with the database to store the message;</li><li>Send an asynchronous request to the database to store the message;</li></ol><p>We have to keep certain things in mind while designing our database:</p><ol><li>How to efficiently work with the database connection pool;</li><li>How to retry failed requests;</li><li>Where to log those requests that failed even after some retries;</li><li>How to retry these logged requests (that failed after the retry) when all the issues have resolved;</li></ol><p><strong>Which storage system we should use</strong>? We need to have a database that can support a very high rate of small updates and also fetch a range of records quickly. This is required because we have a huge number of small messages that need to be inserted in the database and, while querying, a user is mostly interested in sequentially accessing the messages.<br>We cannot use RDBMS like MySQL or NoSQL like MongoDB because we cannot afford to read/write a row from the database every time a user receives/sends a message. This will not only make the basic operations of our service run with high latency but also create a huge load on databases.<br>Both of our requirements can be easily met with a wide-column database solution like HBase. HBase is a column-oriented key-value NoSQL database that can store multiple values against one key into multiple columns. HBase is modeled after Google’s BigTable and runs on top of Hadoop Distributed File System (HDFS). HBase groups data together to store new data in a memory buffer and, once the buffer is full, it dumps the data to the disk. This way of storage not only helps to store a lot of small data quickly but also fetching rows by the key or scanning ranges of rows. HBase is also an efficient database to store variable-sized data, which is also required by our service.</p><p><strong>How should clients efficiently fetch data from the server</strong>? Clients should paginate while fetching data from the server. Page size could be different for different clients, e.g., cell phones have smaller screens, so we need a fewer number of messages/conversations in the viewport.</p><h3 id="Managing-User’s-Status"><a href="#Managing-User’s-Status" class="headerlink" title="Managing User’s Status"></a>Managing User’s Status</h3><p>We need to keep track of user’s online/offline status and notify all the relevant users whenever a status change happens. Since we are maintaining a connection object on the server for all active users, we can easily figure out the user’s current status from this. With 500M active users at any time, if we have to broadcast each status change to all the relevant active users, it will consume a lot of resources. We can do the following optimization around this:</p><ol><li>Whenever a client starts the app, it can pull the current status of all users in their friends’ list;</li><li>Whenever a user sends a message to another user that has gone offline, we can send a failure to the sender and update the status on the client;</li><li>Whenever a user comes online, the server can always broadcast that status with a delay of a few seconds to see if the user does not go offline immediately;</li><li>Clients can pull the status from the server about those users that are being shown on the user’s viewport. This should not be a frequent operation, as the server is broadcasting the online status of users and we can live with the stale offline status of users for a while;</li><li>Whenever the client starts a new chat with another user, we can pull the status at that time;</li></ol><p><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-Facebook-Messenger/39.png" alt></p><p><strong>Design Summary</strong>: Clients will open a connection to the chat server to send a message; the server will then pass it to the requested user. All the active users will keep a connection open with the server to receive messages. Whenever a new message arrives, the chat server will push it to the receiving user on the long poll request. Messages can be stored in HBase, which supports quick small updates, and range based searches. The servers can broadcast the online status of a user to other relevant users. Clients can pull status updates for users who are visible in the client’s viewport on a less frequent basis.</p><h2 id="Data-Partitioning"><a href="#Data-Partitioning" class="headerlink" title="Data Partitioning"></a>Data Partitioning</h2><p>Since we will be storing a lot of data (3.6PB for five years), we need to distribute it onto multiple database servers. What will be our partitioning scheme?</p><p><strong>Partitioning based on UserID</strong>: Let’s assume we partition based on the hash of the UserID so that we can keep all messages of a user on the same database. If one DB shard is 4TB, we will have “3.6PB/4TB = 900” shards for five years. For simplicity, let’s assume we keep 1K shards. So we will find the shard number by “hash(UserID) % 1000” and then store/retrieve the data from there. This partitioning scheme will also be very quick to fetch chat history for any user.<br>In the beginning, we can start with fewer database servers with multiple shards residing on one physical server. Since we can have multiple database instances on a server, we can easily store multiple partitions on a single server. Our hash function needs to understand this logical partitioning scheme so that it can map multiple logical partitions on one physical server.<br>Since we will store an unlimited history of messages, we can start with a big number of logical partitions, which will be mapped to fewer physical servers, and as our storage demand increases, we can add more physical servers to distribute our logical partitions.</p><p><strong>Partitioning based on MessageID</strong>: If we store different messages of a user on separate database shards, fetching a range of messages of a chat would be very slow, so we should not adopt this scheme.</p><h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><p>We can cache a few recent messages (say last 15) in a few recent conversations that are visible in a user’s viewport (say last 5). Since we decided to store all of the user’s messages on one shard, the cache for a user should entirely reside on one machine too.</p><h2 id="Load-Balancing"><a href="#Load-Balancing" class="headerlink" title="Load Balancing"></a>Load Balancing</h2><p>We will need a load balancer in front of our chat servers; that can map each UserID to a server that holds the connection for the user and then direct the request to that server. Similarly, we would need a load balancer for our cache servers.</p><h2 id="Fault-Tolerance-and-Replication"><a href="#Fault-Tolerance-and-Replication" class="headerlink" title="Fault Tolerance and Replication"></a>Fault Tolerance and Replication</h2><p><strong>What will happen when a chat server fails</strong>? Our chat servers are holding connections with the users. If a server goes down, should we devise a mechanism to transfer those connections to some other servers? It’s extremely hard to failover TCP connections to other servers; an easier approach can be to have clients automatically reconnect if the connection is lost.</p><p><strong>Should we store multiple copies of user messages</strong>? We cannot have only one copy of the user’s data, because if the server holding the data crashes or is down permanently, we don’t have any mechanism to recover that data. For this, either we have to store multiple copies of the data on different servers or use techniques like Reed-Solomon Encoding to distribute and replicate it.</p><h2 id="Extended-Requirements"><a href="#Extended-Requirements" class="headerlink" title="Extended Requirements"></a>Extended Requirements</h2><ul><li><strong>Group chat</strong>: We can have separate group-chat objects in our system that can be stored on the chat servers. A group-chat object is identified by GroupChatID and will also maintain a list of people who are part of that chat. Our load balancer can direct each group chat message based on GroupChatID and the server handling that group chat can iterate through all the users of the chat to find the server handling the connection of each user to deliver the message.<br>In databases, we can store all the group chats in a separate table partitioned based on GroupChatID;</li><li><strong>Push notifications</strong>: In our current design, users can only send messages to active users and if the receiving user is offline, we send a failure to the sending user. Push notifications will enable our system to send messages to offline users.<br>Each user can opt-in from their device (or a web browser) to get notifications whenever there is a new message or event. Each manufacturer maintains a set of servers that handles pushing these notifications to the user.<br>To have push notifications in our system, we would need to set up a Notification Server, which will take the messages for offline users and send them to the manufacture’s push notification server, which will then send them to the user’s device.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> SystemDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interview Experience</title>
      <link href="../../p/interview-experience.html"/>
      <url>../../p/interview-experience.html</url>
      
        <content type="html"><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>微软苏州分院 bing ads。他家业务很厉害。</p><p>第一轮：<br>不过简历，直接考题。</p><p>有一个数组元素 [a0, a1 …]，从数组中找出连续的数组和为最大。<br>有一个常数n，有一个数组元素 [a0, a1 …] 无重复元素。从数组里面找出所有可能的组合加和是 n，并且输出。<br>第二轮：<br>过简历，面试官不是专业学算法的。如何理解 kafka 框架？在算子开发性能的时候有哪些优化的点？你在团队中发挥什么样的角色？如何使用mapreduce框架？<br>考题：<br>有一个数组（对，全是数组题目），从数组中找出连续数组乘积最大。<br>相关知识点： 数组动态规划<br>相关知识点： 数组动态规划</p><p>第三轮：<br>面试官是学算法的，未来的 leader。如何构建 user 和 item 的特征？双塔模型的结构？<br>深度学习网络 Factorize Machine 相对于线性模型有什么好处？Spark 用过吗？如何构建一个分布式机器学习框架？<br>假设有两个整数 a，b. 那么 a/b 有可能除尽和除不尽。如果除尽，找出循环的单节。图论。</p><p>第四轮：<br>直接上题目：</p><p>假设一个数组只有 “a” 和 “b” 两种 string 组成。如何重新安排数组，使得最多有 3 个 a 相邻，3 个 b 相邻。如果不能安排，返回 None<br>假设有 a，b 两个 int，转成二进制后 c = a | b. 假设从 0-&gt;1, 1-&gt;0 理解为一个 action。最少需要多少个 action 计算 c = a|b？<br>第五轮：<br>问简历，hdfs 的底层原理，mapreduce 底层原理，答得一塌糊涂。不过面试官好像不在乎，说没关系，题目做出来就行。<br>题目：<br>之字型二叉树广度优先遍历<br>。要求一定要用 C 语言写。</p><p>第六轮：<br>boss 面。<br>先问题目：如何实现 a/b。a 和 b 是 string，返回 double。不难。<br>聊人生：家是哪里人，为什么要从字节离职，对微软什么看法。你很优秀，接受平薪吗，微软开得不高。<br>聊完直接得到口头 offer。</p><p>正式offer在3天后获得。</p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>面试经过</p><p>一面麦克风有问题 没交流的下去挂<br>二面手写快排秒了, 一道hard题目没做到O(n)</p><p>改编自 992. K 个不同整数的子数组<br>没有周五的面试了 可能的话,秋招再见吧</p><p>写写感受吧</p><p>也刷了大半年题了, 最近也一直在面试, 虽然前段时间被阿里的面试轰炸头疼, 还是更想去巨硬wlb, 然而最后挂了, 心里还是十分失落难受的<br>上周特地刷了一周的微软面试题, 微软题库也到一半了, 然而并没有什么卵用, 面试的时候还是找不到最佳思路,虽然面完之后就想起来了<br>可能天生就是智商不够吧<br>找不到工作大不了就回家考公务员吧, 心累</p><p>###<br>腾讯｜后台开发｜面经｜2021｜<br>【一面】<br>1.自我介绍<br>2.大学期间学了什么专业课？</p><p>数据结构熟悉吗？了解过算法吗？<br>Hashmap了解吗 ？它是一种怎样的数据结构？<br>Hashmap为什么是线程不安全的，如果必须保证线程安全要用什么数据结构？（hashtable）<br>Hashmap和hashtable有什么区别？<br>Hashmap底层是什么数据结构实现的？<br>Hashmap查找数据的原理 为什么查找数据快？（我说了底层有红黑树）<br>红黑树和其他的二叉树有什么区别？为什么选择红黑树？<br>10.红黑树是怎么保证自旋次数相对少的？</p><p>有没有项目经验？<br>Spring的三大特性说一下<br>堆和栈了解吗 ？他们有什么区别？（我说堆不会他就没问了）<br>链表和栈分别是什么数据结构 它们有什么区别<br>问一个简单的算法题，怎么样用链表实现栈的功能？（我没答出来，这一题应该是链表采用头插法就可以实现）<br>排序了解过吗？把你知道的排序说一下（这个要说出来排序原理，我说了冒泡，选择，插入，快排，希尔，归并）<br>哪些排序是稳定的 ？为什么稳定？<br>如果现有数据大致有序用什么排序？为什么？（插入排序）<br>现在有一百万个数据，我要找里面最大的一千个，怎么样做？<br>【二面】<br>1.自我介绍</p><p>2.大学期间学了什么专业课？</p><p>3.数据结构熟悉吗？了解过算法吗？</p><p>4.会什么数据库？（我说了mysql和redis）</p><p>5.又问了我hashmap hashmap为什么用红黑树而不用别的平衡树？</p><p>6.红黑树和avl树有什么区别？</p><p>7.哈希算法了解吗？说一下</p><p>8.你用的是哪个版本的jdk？（我用的11）然后他就问jdk不同版本有什么区别 你用的jdk11和jdk8有什么区别了解吗？（没怎么答上来 ）</p><p>9.Jdk源码看过吗 里面用到了哪些设计模式？</p><p>10.单例模式是怎么保证对象单例的？有没有办法可以破坏单例？（反射和反序列化可以破坏）</p><p>说一下反射的原理 ，说一下动态代理<br>Mysql数据库的三大范式<br>Mysql数据库的索引有哪些？<br>一定需要索引吗 ？索引有什么缺点？<br>为什么用索引查询起来会快？索引底层是什么数据结构？<br>B+树是一种什么样的树？B+树和红黑树有什么区别？<br>B+树索引和hash索引的优缺点<br>Redis是什么数据库？和mysql有什么区别？<br>Redis是如何应对高并发的？<br>Redis集群结构，数据结构设计。key是怎么存储的？key命中率低怎么办？<br>找出1T数据中重复率最高的名字<br>算法题：爬楼梯，一次可以跳一步或者两步 求总跳法<br>井盖为什么是圆的你了解过没</p>]]></content>
      
      
      
        <tags>
            
            <tag> interview experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Designing TinyURL</title>
      <link href="../../p/Designing-TinyURL.html"/>
      <url>../../p/Designing-TinyURL.html</url>
      
        <content type="html"><![CDATA[<h2 id="Why-do-We-Need-URL-Shortening"><a href="#Why-do-We-Need-URL-Shortening" class="headerlink" title="Why do We Need URL Shortening?"></a>Why do We Need URL Shortening?</h2><p>URL shortening is used to create shorter aliases for long URLs. We call these shortened aliases “short links”. Users are redirected to the original URL when they hit these short links. Short links save a lot of space when displayed, printed, messaged, or tweeted. Additionally, users are less likely to mistype shorter URLs.</p><p>For example, if we shorten this page through TinyURL:</p><blockquote><p><a href="https://www.educative.io/collection/page/5668639101419520/5649050225344512/5668600916475904/" target="_blank" rel="noopener">https://www.educative.io/collection/page/5668639101419520/5649050225344512/5668600916475904/</a></p></blockquote><p>We would get:</p><blockquote><p><a href="http://tinyurl.com/jlg8zpc" target="_blank" rel="noopener">http://tinyurl.com/jlg8zpc</a></p></blockquote><p>The shortened URL is nearly one-third the size of the actual URL.<br>URL shortening is used to optimize links across devices, track individual links to analyze audience, measure ad campaigns’ performance, or hide affiliated original URLs.</p><p>If you haven’t used <a href="https://tinyurl.com/app" target="_blank" rel="noopener">tinyurl.com</a> before, please try creating a new shortened URL and spend some time going through the various options their service offers. This will help you a lot in understanding this chapter.</p><a id="more"></a><h2 id="Requirements-and-Goals-of-the-System"><a href="#Requirements-and-Goals-of-the-System" class="headerlink" title="Requirements and Goals of the System"></a>Requirements and Goals of the System</h2><blockquote><p>You should always clarify requirements at the beginning of the interview. Be sure to ask questions to find the exact scope of the system that the interviewer has in mind.</p></blockquote><p>Our URL shortening system should meet the following requirements:<br><strong>Functional Requirements</strong>:</p><ol><li>Given a URL, our service should generate a shorter and unique alias of it. This is called a short link. This link should be short enough to be easily copied and pasted into applications;</li><li>When users access a short link, our service should redirect them to the original link;</li><li>Users should optionally be able to pick a custom short link for their URL;</li><li>Links will expire after a standard default time span. Users should be able to specify the expiration time;</li></ol><p><strong>Non-Functional Requirements</strong>:</p><ol><li>The system should be highly available. This is required because, if our service is down, all the URL redirections will start failing;</li><li>URL redirection should happen in real-time with minimal latency;</li><li>Shortened links should not be guessable (not predictable);</li></ol><p><strong>Extended Requirements</strong>:</p><ol><li>Analytics ,e.g., how many times a redirection happened?</li><li>Our service should also be accessible through REST APIs by other services;</li></ol><h2 id="Capacity-Estimation-and-Constraints"><a href="#Capacity-Estimation-and-Constraints" class="headerlink" title="Capacity Estimation and Constraints"></a>Capacity Estimation and Constraints</h2><p>Our system will be read-heavy. There will be lots of redirection requests compared to new URL shortenings. Let’s assume a 100:1 ratio between read and write.</p><p><strong>Traffic estimates</strong>: Assuming, we will have 500M new URL shortenings per month, with 100:1 read/write ratio, we can expect 50B redirections during the same period:</p><blockquote><p>100 * 500M = 50B</p></blockquote><p>What would be Queries Per Second (QPS) for our system? New URLs shortenings per second:</p><blockquote><p>500 million / (30 days * 24 hours * 3600 seconds) ≈ 200 URLs/s</p></blockquote><p>Considering 100:1 read/write ratio, URLs redirections per second will be:</p><blockquote><p>100 * 200 URLs/s = 20K/s</p></blockquote><p><strong>Storage estimates</strong>: Let’s assume we store every URL shortening request (and associated shortened link) for 5 years. Since we expect to have 500M new URLs every month, the total number of objects we expect to store will be 30 billion:</p><blockquote><p>500 million * 5 years * 12 months = 30 billion</p></blockquote><p>Let’s assume that each stored object will be approximately 500 bytes. We will need 15TB of total storage:</p><blockquote><p>30 billion * 500 bytes = 15 TB</p></blockquote><p><strong>Bandwidth estimates</strong>: For write requests, since we expect 200 new URLs every second, total incoming data for our service will be 100KB per second:</p><blockquote><p>200 * 500 bytes = 100 KB/s</p></blockquote><p>For read requests, since every second we expect 20K URLs redirections, total outgoing data for our service would be 10MB per second:</p><blockquote><p>20K * 500 bytes = 10 MB/s</p></blockquote><p><strong>Memory estimates</strong>: If we want to cache some of the hot URLs that are frequently accessed, how much memory will we need to store them? If we follow the 80-20 rule, meaning 20% of URLs generate 80% of traffic, we would like to cache these 20% hot URLs. Since we have 20K requests per second, we will be getting 1.7 billion requests per day:</p><blockquote><p>20K * 3600 seconds * 24 hours ≈ 1.7 billion</p></blockquote><p>To cache 20% of these requests, we will need 170GB of memory:</p><blockquote><p>0.2 * 1.7 billion * 500 bytes = 170 GB</p></blockquote><p>One thing to note here is that since there will be many duplicate requests (of the same URL), our actual memory usage will be less than 170GB.</p><p><strong>High-level estimates</strong>: Assuming 500 million new URLs per month and 100:1 read:write ratio, following is the summary of the high-level estimates for our service:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-TinyURL/19.png" alt></p><h2 id="System-APIs"><a href="#System-APIs" class="headerlink" title="System APIs"></a>System APIs</h2><blockquote><p>Once we’ve finalized the requirements, it’s always a good idea to define the system APIs. This should explicitly state what is expected from the system.</p></blockquote><p>We can have SOAP or REST APIs to expose the functionality of our service. Following could be the definitions of the APIs for creating and deleting URLs:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">createURL(api_dev_key, original_url, custom_alias=None, user_name=None, expire_date=None)</span><br></pre></td></tr></table></figure><p><strong>Parameters</strong>:</p><ul><li>api_dev_key: The API developer key of a registered account. This will be used to, among other things, throttle users based on their allocated quota;</li><li>original_url: Original URL to be shortened;</li><li>custom_alias: Optional custom key for the URL;</li><li>user_name: Optional user name to be used in the encoding;</li><li>expire_date: Optional expiration date for the shortened URL;</li></ul><p><strong>Returns</strong>: A successful insertion returns the shortened URL; otherwise, it returns an error code.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deleteURL(api_dev_key, url_key)</span><br></pre></td></tr></table></figure><p>Where “url_key” is a string representing the shortened URL to be retrieved; a successful deletion returns “URL Removed”.</p><p><strong>How do we detect and prevent abuse</strong>? A malicious user can put us out of business by consuming all URL keys in the current design. To prevent abuse, we can limit users via their api_dev_key. Each api_dev_key can be limited to a certain number of URL creations and redirections per some time period (which may be set to a different duration per developer key).</p><h2 id="Database-Design"><a href="#Database-Design" class="headerlink" title="Database Design"></a>Database Design</h2><blockquote><p>Defining the DB schema in the early stages of the interview would help to understand the data flow among various components and later would guide towards data partitioning.</p></blockquote><p>A few observations about the nature of the data we will store:</p><ul><li>We need to store billions of records;</li><li>Each object we store is small (less than 1K);</li><li>There are no relationships between records - other than storing which user created a URL;</li><li>Our service is read-heavy;</li></ul><p><strong>Database Schema</strong>: We would need two tables: one for storing information about the URL mappings and one for the user’s data who created the short link:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-TinyURL/20.png" alt></p><p><strong>What kind of database should we use</strong>? Since we anticipate storing billions of rows, and we don’t need to use relationships between objects – a NoSQL store like DynamoDB, Cassandra or Riak is a better choice. A NoSQL choice would also be easier to scale.</p><h2 id="Basic-System-Design-and-Algorithm"><a href="#Basic-System-Design-and-Algorithm" class="headerlink" title="Basic System Design and Algorithm"></a>Basic System Design and Algorithm</h2><p>The problem we are solving here is how to generate a short and unique key for a given URL.<br>In the TinyURL, the shortened URL is “<a href="http://tinyurl.com/jlg8zpc&quot;" target="_blank" rel="noopener">http://tinyurl.com/jlg8zpc&quot;</a>. The last seven characters of this URL is the short key we want to generate. We’ll explore two solutions here.</p><h3 id="Encoding-actual-URL"><a href="#Encoding-actual-URL" class="headerlink" title="Encoding actual URL"></a>Encoding actual URL</h3><p>We can compute a unique hash (e.g., MD5 or SHA256, etc.) of the given URL. The hash can then be encoded for display. This encoding could be base36 ([a-z, 0-9]) or base62 ([A-Z, a-z, 0-9]) and if we add “+” and “/“ we can use Base64 encoding. A reasonable question would be, what should be the length of the short key? 6, 8, or 10 characters?</p><p>Using base64 encoding, a 6 letters long key would result in 64^6 ≈ 68.7 billion possible strings; Using base64 encoding, an 8 letters long key would result in 64^8 ≈ 281 trillion possible strings.<br>With 68.7B unique strings, let’s assume six letter keys would suffice for our system.</p><p>If we use the MD5 algorithm as our hash function, it’ll produce a 128 bits hash value. After base64 encoding, well get a string having more than 21 characters (since each base64 character encodes 6 bits of the hash value). Now we only have space for 6 characters per short key; how will we choose our key then? We can take the first 6 letters for the key. This could result in key duplication; to resolve that, we can choose some other characters out of the encoding string or swap some characters.</p><p><strong>What are the different issues with our solution</strong>? We have the following couple of problems with our encoding scheme:</p><ol><li>If multiple users enter the same URL, they can get the same shortened URL, which is not acceptable;</li><li>What if parts of the URL are URL-encoded? e.g., <a href="http://www.educative.io/distributed.php?id=design" target="_blank" rel="noopener">http://www.educative.io/distributed.php?id=design</a> and <a href="http://www.educative.io/distributed.php%3Fid%3Ddesign" target="_blank" rel="noopener">http://www.educative.io/distributed.php%3Fid%3Ddesign</a> are identical except for the URL encoding;</li></ol><p><strong>Workaround for the issues</strong>: We can append an increasing sequence number to each input URL to make it unique and then generate its hash. We don’t need to store this sequence number in the databases, though. Possible problems with this approach could be an ever-increasing sequence number. Can it overflow? Appending an increasing sequence number will also impact the performance of the service.</p><p>Another solution could be to append the user id (which should be unique) to the input URL. However, if the user has not signed in, we would have to ask the user to choose a uniqueness key. Even after this, if we have a conflict, we have to keep generating a key until we get a unique one:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-TinyURL/21.png" alt></p><h3 id="Generating-keys-offline"><a href="#Generating-keys-offline" class="headerlink" title="Generating keys offline"></a>Generating keys offline</h3><p>We can have a standalone <strong>Key Generation Service (KGS)</strong> that generates random six-letter strings beforehand and stores them in a database (let’s call it key-DB). Whenever we want to shorten a URL, we will take one of the already-generated keys and use it. This approach will make things quite simple and fast. Not only are we not encoding the URL, but we won’t have to worry about duplications or collisions. KGS will make sure all the keys inserted into key-DB are unique:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-TinyURL/22.png" alt></p><p><strong>Can concurrency cause problems</strong>? As soon as a key is used, it should be marked in the database to ensure that it is not used again. If there are multiple servers reading keys concurrently, we might get a scenario where two or more servers try to read the same key from the database. How can we solve this concurrency problem?<br>Servers can use KGS to read/mark keys in the database. KGS can use two tables to store keys: one for keys that are not used yet, and one for all the used keys. As soon as KGS gives keys to one of the servers, it can move them to the used keys table. KGS can always keep some keys in memory to quickly provide them whenever a server needs them.</p><p>For simplicity, as soon as KGS loads some keys in memory, it can move them to the used keys table. This ensures each server gets unique keys. If KGS dies before assigning all the loaded keys to some server, we will be wasting those keys–which could be acceptable, given the huge number of keys we have.<br>KGS also has to make sure not to give the same key to multiple servers. For that, it must synchronize (or get a lock on) the data structure holding the keys before removing keys from it and giving them to a server.</p><p><strong>What would be the key-DB size</strong>? With base64 encoding, we can generate 68.7B unique six letters keys. If we need one byte to store one alpha-numeric character, we can store all these keys in:</p><blockquote><p>6 (characters per key) * 68.7B (unique keys) ≈ 412 GB</p></blockquote><p><strong>Isn’t KGS a single point of failure</strong>? Yes, it is. To solve this, we can have a standby replica of KGS. Whenever the primary server dies, the standby server can take over to generate and provide keys.</p><p><strong>Can each app server cache some keys from key-DB</strong>? Yes, this can surely speed things up. Although, in this case, if the application server dies before consuming all the keys, we will end up losing those keys. This can be acceptable since we have 68.7B unique six-letter keys.</p><p><strong>How would we perform a key lookup</strong>? We can look up the key in our database to get the full URL. If it’s present in the DB, issue an “HTTP 302 Redirect” status back to the browser, passing the stored URL in the “Location” field of the request. If that key is not present in our system, issue an “HTTP 404 Not Found” status or redirect the user back to the homepage.</p><p><strong>Should we impose size limits on custom aliases</strong>? Our service supports custom aliases. Users can pick any “key” they like, but providing a custom alias is not mandatory. However, it is reasonable (and often desirable) to impose a size limit on a custom alias to ensure we have a consistent URL database. Let’s assume users can specify a maximum of 16 characters per customer key (as reflected in the above database schema).</p><h2 id="Data-Partitioning-and-Replication"><a href="#Data-Partitioning-and-Replication" class="headerlink" title="Data Partitioning and Replication"></a>Data Partitioning and Replication</h2><p>To scale out our DB, we need to partition it so that it can store information about billions of URLs. We need to develop a partitioning scheme that would divide and store our data into different DB servers:</p><ol><li><strong>Range-Based Partitioning</strong>: We can store URLs in separate partitions based on the hash key’s first letter. Hence we save all the URLs starting with the letter “A” (and “a”) in one partition, save those that start with the letter “B” in another partition, and so on. This approach is called range-based partitioning. We can even combine certain less frequently occurring letters into one database partition. We should come up with a static partitioning scheme to always store/find a URL in a predictable manner.<br>The main problem with this approach is that it can lead to unbalanced DB servers. For example, we decide to put all URLs starting with the letter “E” into a DB partition, but later we realize that we have too many URLs that start with the letter “E”;</li><li><strong>Hash-Based Partitioning</strong>: In this scheme, we take a hash of the object we are storing. We then calculate which partition to use based upon the hash. In our case, we can take the hash of the ‘key’ or the short link to determine the partition in which we store the data object.<br>Our hashing function will randomly distribute URLs into different partitions (e.g., our hashing function can always map any “key” to a number between [1, 256]). This number would represent the partition in which we store our object. This approach can still lead to overloaded partitions, which can be solved using Consistent Hashing;</li></ol><h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h2><p>We can cache URLs that are frequently accessed. We can use some off-the-shelf solution like Memcached, which can store full URLs with their respective hashes. Before hitting backend storage, the application servers can quickly check if the cache has the desired URL.</p><p><strong>How much cache memory should we have</strong>? We can start with 20% of daily traffic and, based on clients’ usage patterns, we can adjust how many cache servers we need. As estimated above, we need 170GB memory to cache 20% of daily traffic. Since a modern-day server can have 256GB memory, we can easily fit all the cache into one machine. Alternatively, we can use a couple of smaller servers to store all these hot URLs.</p><p><strong>Which cache eviction policy would best fit our needs</strong>? When the cache is full, and we want to replace a link with a newer/hotter URL, how would we choose? Least Recently Used (LRU) can be a reasonable policy for our system. Under this policy, we discard the least recently used URL first. We can use a Linked Hash Map or a similar data structure to store our URLs and Hashes, which will also keep track of the URLs that have been accessed recently.</p><p>To further increase the efficiency, we can replicate our caching servers to distribute the load between them.<br><strong>How can each cache replica be updated</strong>? Whenever there is a cache miss, our servers would be hitting a backend database. Whenever this happens, we can update the cache and pass the new entry to all the cache replicas. Each replica can update its cache by adding the new entry. If a replica already has that entry, it can simply ignore it:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-TinyURL/23.png" alt></p><h2 id="Load-Balancer"><a href="#Load-Balancer" class="headerlink" title="Load Balancer"></a>Load Balancer</h2><p>We can add a Load balancing layer at three places in our system:</p><ol><li>Between Clients and Application Servers;</li><li>Between Application Servers and Database Servers;</li><li>Between Application Servers and Cache Servers;</li></ol><p>Initially, we could use a simple Round Robin approach that distributes incoming requests equally among backend servers. This LB is simple to implement and does not introduce any overhead. Another benefit of this approach is that if a server is dead, LB will take it out of the rotation and will stop sending any traffic to it.</p><p>A problem with Round Robin LB is that we don’t take the server load into consideration. If a server is overloaded or slow, the LB will not stop sending new requests to that server. To handle this, a more intelligent LB solution can be placed that periodically queries the backend server about its load and adjusts traffic based on that.</p><h2 id="Purging-or-DB-Cleanup"><a href="#Purging-or-DB-Cleanup" class="headerlink" title="Purging or DB Cleanup"></a>Purging or DB Cleanup</h2><p>Should entries stick around forever, or should they be purged? If a user-specified expiration time is reached, what should happen to the link?</p><p>If we chose to actively search for expired links to remove them, it would put a lot of pressure on our database. Instead, we can slowly remove expired links and do a lazy cleanup. Our service will ensure that only expired links will be deleted, although some expired links can live longer but will never be returned to users:</p><ul><li>Whenever a user tries to access an expired link, we can delete the link and return an error to the user;</li><li>A separate Cleanup Service can run periodically to remove expired links from our storage and cache. This service should be very lightweight and can be scheduled to run only when the user traffic is expected to be low;</li><li>We can have a default expiration time for each link (e.g., two years);</li><li>After removing an expired link, we can put the key back in the key-DB to be reused;</li><li>Should we remove links that haven’t been visited in some length of time, say six months? This could be tricky. Since storage is getting cheap, we can decide to keep links forever;</li></ul><p><img src="https://github.com/wangleileichina/HexoPosts/raw/master/SystemDesign/Designing-TinyURL/24.png" alt></p><h2 id="Telemetry"><a href="#Telemetry" class="headerlink" title="Telemetry"></a>Telemetry</h2><p>How many times a short URL has been used, what were user locations, etc.? How would we store these statistics? If it is part of a DB row that gets updated on each view, what will happen when a popular URL is slammed with a large number of concurrent requests?<br>Some statistics worth tracking: country of the visitor, date and time of access, web page that referred the click, browser, or platform from where the page was accessed.</p><h2 id="Security-and-Permissions"><a href="#Security-and-Permissions" class="headerlink" title="Security and Permissions"></a>Security and Permissions</h2><p>Can users create private URLs or allow a particular set of users to access a URL?<br>We can store the permission level (public/private) with each URL in the database. We can also create a separate table to store UserIDs that have permission to see a specific URL. If a user does not have permission and tries to access a URL, we can send an error (HTTP 401) back. Given that we are storing our data in a NoSQL wide-column database like Cassandra, the key for the table storing permissions would be the “Hash” (or the KGS generated “key”). The columns will store the UserIDs of those users that have permission to see the URL.</p>]]></content>
      
      
      
        <tags>
            
            <tag> SystemDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bit manipulation</title>
      <link href="../../p/bit-manipulation.html"/>
      <url>../../p/bit-manipulation.html</url>
      
        <content type="html"><![CDATA[<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h2><p>remove rightest 1:<br>    n = n &amp; (n - 1)<br>    n -= (~ n + 1) &amp; n</p><p>get the rightest 1:<br>    (~ n + 1) &amp; n</p><p>##<br>补码的意义<br>超出 最大 正数表示范围 就是负数了<br>return majority if majority &lt;= (1 &lt;&lt; 31) - 1 else majority - (1 &lt;&lt; 32)</p><p>##<br>    hibit = (a&amp;0x80000000)&gt;&gt;31<br>    if hibit==1:<br>         return -(((~a)+1)&amp;0xffffffff)<br>     else:<br>         return a&amp;0xffffffff</p><pre><code>return res if counts[31] % m == 0 else ~(res ^ 0xffffffff)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">            total = sum((num &gt;&gt; i) &amp; <span class="number">1</span> <span class="keyword">for</span> num <span class="keyword">in</span> nums)</span><br><span class="line">            <span class="keyword">if</span> total % <span class="number">3</span>:</span><br><span class="line">                <span class="comment"># Python 这里对于最高位需要特殊判断</span></span><br><span class="line">                <span class="keyword">if</span> i == <span class="number">31</span>:</span><br><span class="line">                    ans -= (<span class="number">1</span> &lt;&lt; i)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ans |= (<span class="number">1</span> &lt;&lt; i)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        counts = [<span class="number">0</span>] * <span class="number">32</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">                counts[j] += num &amp; <span class="number">1</span></span><br><span class="line">                num &gt;&gt;= <span class="number">1</span></span><br><span class="line">        res, m = <span class="number">0</span>, <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">            res &lt;&lt;= <span class="number">1</span></span><br><span class="line">            res |= counts[<span class="number">31</span> - i] % m</span><br><span class="line">        <span class="keyword">return</span> res <span class="keyword">if</span> counts[<span class="number">31</span>] % m == <span class="number">0</span> <span class="keyword">else</span> ~(res ^ <span class="number">0xffffffff</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> bit manipulation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trie</title>
      <link href="../../p/Trie.html"/>
      <url>../../p/Trie.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="comment"># TreeNode can search children and determine whether it's end or not</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.children = defaultdict(TrieNode)</span><br><span class="line">        self.is_word = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> word:</span><br><span class="line">            <span class="comment"># use defaultdict without declaring value</span></span><br><span class="line">            node = node.children[w]</span><br><span class="line">        node.is_word = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> word:</span><br><span class="line">            node = node.children.get(w)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> node.is_word</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startsWith</span><span class="params">(self, prefix)</span>:</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> prefix:</span><br><span class="line">            node = node.children.get(w)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># search prefix/word is different</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CodingInterviews </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>heap sort</title>
      <link href="../../p/heap-sort.html"/>
      <url>../../p/heap-sort.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(nums)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heapify</span><span class="params">(n, i)</span>:</span></span><br><span class="line">        <span class="comment"># find largest among root and children</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            largest = i</span><br><span class="line">            left = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">            right = <span class="number">2</span> * i + <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> left &lt; n <span class="keyword">and</span> nums[i] &lt; nums[left]:</span><br><span class="line">                largest = left</span><br><span class="line">            <span class="keyword">if</span> right &lt; n <span class="keyword">and</span> nums[largest] &lt; nums[right]:</span><br><span class="line">                largest = right</span><br><span class="line">            <span class="keyword">if</span> largest == i:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            nums[i], nums[largest] = nums[largest], nums[i]</span><br><span class="line">            i = largest</span><br><span class="line"></span><br><span class="line">    n = len(nums)</span><br><span class="line">    <span class="comment"># build max heap (n)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n // <span class="number">2</span> - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        heapify(n, i)</span><br><span class="line">    <span class="comment"># heap sort (nlogn)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        nums[i], nums[<span class="number">0</span>] = nums[<span class="number">0</span>], nums[i]</span><br><span class="line">        heapify(i, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">7</span>]</span><br><span class="line">heap_sort(nums)</span><br><span class="line">print(nums)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        self.nums = nums</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heapify</span><span class="params">(self, n, i)</span>:</span></span><br><span class="line">        <span class="comment"># find largest among root and children</span></span><br><span class="line">        largest = i</span><br><span class="line">        left = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">        right = <span class="number">2</span> * i + <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> left &lt; n <span class="keyword">and</span> self.nums[i] &lt; self.nums[left]:</span><br><span class="line">            largest = left</span><br><span class="line">        <span class="keyword">if</span> right &lt; n <span class="keyword">and</span> self.nums[largest] &lt; self.nums[right]:</span><br><span class="line">            largest = right</span><br><span class="line">        <span class="keyword">if</span> largest != i:</span><br><span class="line">            self.nums[i], self.nums[largest] = self.nums[largest], self.nums[i]</span><br><span class="line">            self.heapify(n, largest)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self)</span>:</span></span><br><span class="line">        n = len(self.nums)</span><br><span class="line">        <span class="comment"># build max heap (n)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n // <span class="number">2</span> - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            self.heapify(n, i)</span><br><span class="line">        <span class="comment"># heap sort (nlogn)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            self.nums[i], self.nums[<span class="number">0</span>] = self.nums[<span class="number">0</span>], self.nums[i]</span><br><span class="line">            self.heapify(i, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">7</span>]</span><br><span class="line">heapsort = HeapSort(nums)</span><br><span class="line">heapsort.sort()</span><br><span class="line">print(heapsort.nums)</span><br></pre></td></tr></table></figure><blockquote><p>非递归实现 空间复杂度 o(1)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        self.nums = nums</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heapify</span><span class="params">(self, n, i)</span>:</span></span><br><span class="line">        left = i * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        right = i * <span class="number">2</span> + <span class="number">2</span></span><br><span class="line">        largest = i</span><br><span class="line">        <span class="keyword">while</span> left &lt; n:</span><br><span class="line">            <span class="keyword">if</span> self.nums[left] &gt; self.nums[i]:</span><br><span class="line">                largest = left</span><br><span class="line">            <span class="keyword">if</span> right &lt; n <span class="keyword">and</span> self.nums[right] &gt; self.nums[largest]:</span><br><span class="line">                largest = right</span><br><span class="line">            <span class="keyword">if</span> largest != i:</span><br><span class="line">                self.nums[i], self.nums[largest] = self.nums[largest], self.nums[i]</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment">##</span></span><br><span class="line">                <span class="keyword">break</span> <span class="comment">##  </span></span><br><span class="line">            i = largest</span><br><span class="line">            left = <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">            right = <span class="number">2</span> * i + <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">heapInsert</span><span class="params">(self, i)</span>:</span></span><br><span class="line">        parent = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i != <span class="number">0</span>:</span><br><span class="line">            parent = (i - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> self.nums[parent] &lt; self.nums[i]:</span><br><span class="line">                self.nums[parent], self.nums[i] = self.nums[i], self.nums[parent]</span><br><span class="line">                i = parent</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self)</span>:</span></span><br><span class="line">        n = len(self.nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            self.heapInsert(i)</span><br><span class="line">        <span class="comment"># for i in range(n // 2 - 1, -1, -1):</span></span><br><span class="line">        <span class="comment">#     self.heapify(n, i)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">            self.nums[<span class="number">0</span>], self.nums[i] = self.nums[i], self.nums[<span class="number">0</span>]</span><br><span class="line">            <span class="comment"># self.heapify(n, i)  error </span></span><br><span class="line">            self.heapify(i, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nums=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">7</span>]</span><br><span class="line">heapsort = HeapSort(nums)</span><br><span class="line">heapsort.sort()</span><br><span class="line">print(heapsort.nums)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CLRS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sliding Window</title>
      <link href="../../p/Sliding-Window.html"/>
      <url>../../p/Sliding-Window.html</url>
      
        <content type="html"><![CDATA[<p>In many problems dealing with an array (or a LinkedList), we are asked to find or calculate something among all the contiguous subarrays (or sublists) of a given size. For example, take a look at this problem:</p><blockquote><p>Given an array, find the average of all contiguous subarrays of size “K” in it.</p></blockquote><p>Let’s understand this problem with a real input:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">-1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>], K=<span class="number">5</span></span><br></pre></td></tr></table></figure><p>Here, we are asked to find the average of all contiguous subarrays of size “5” in the given array. Let’s solve this:</p><ol><li>For the first 5 numbers (subarray from index 0~4), the average is: (1+3+2+6-1)/5 = 2.2;</li><li>The average of next 5 numbers (subarray from index 1~5) is: (3+2+6-1+4)/5 = 2.8;</li><li>For the next 5 numbers (subarray from index 2~6), the average is: (2+6-1+4+1)/5 = 2.4;</li><li>…</li></ol><p>Here is the final output containing the averages of all contiguous subarrays of size 5:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Output: [<span class="number">2.2</span>, <span class="number">2.8</span>, <span class="number">2.4</span>, <span class="number">3.6</span>, <span class="number">2.8</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><p>A brute-force algorithm will calculate the sum of every 5-element contiguous subarray of the given array and divide the sum by “5” to find the average. This is what the algorithm will look like:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_averages_of_subarrays</span><span class="params">(k, arr)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(arr) - k + <span class="number">1</span>):</span><br><span class="line">        element_sum = <span class="number">0.0</span></span><br><span class="line">        <span class="comment"># find sum of next `K` elements</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, i + k):</span><br><span class="line">            element_sum += arr[j]</span><br><span class="line">            <span class="comment"># calculate average</span></span><br><span class="line">            result.append(element_sum / k)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p><strong>Time Complexity</strong>: Since for every element of the input array, we are calculating the sum of its next “K” elements, the time complexity of the above algorithm will be O(N*K) where “N” is the number of elements in the input array.</p><p>The inefficiency is that for any two consecutive subarrays of size “5”, the overlapping part (which will contain four elements) will be evaluated twice. For example, take the above-mentioned input:<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/algorithm/sliding_window/00.png" alt></p><p>As you can see, there are four overlapping elements between the subarray (indexed from 0~4) and the subarray (indexed from 1~5). Can we somehow reuse the sum we have calculated for the overlapping elements?</p><p>The efficient way to solve this problem would be to visualize each contiguous subarray as a sliding window of “5” elements. This means that we will slide the window by one element when we move on to the next subarray. To reuse the sum from the previous subarray, we will subtract the element going out of the window and add the element now being included in the sliding window. This will save us from going through the whole subarray to find the sum and, as a result, the algorithm complexity will reduce to O(N):<br><img src="https://github.com/wangleileichina/HexoPosts/raw/master/algorithm/sliding_window/01.png" alt></p><p>Here is the algorithm for the <em>Sliding Window</em> approach:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_averages_of_subarrays</span><span class="params">(k, arr)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    window_sum, start = <span class="number">0.0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> end <span class="keyword">in</span> range(len(arr)):</span><br><span class="line">        window_sum += arr[end]</span><br><span class="line">        <span class="comment"># shrink</span></span><br><span class="line">        <span class="keyword">if</span> end &gt;= k - <span class="number">1</span>:</span><br><span class="line">            result.append(window_sum / k)</span><br><span class="line">            window_sum -= arr[start]</span><br><span class="line">            start += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>In some problems, the size of the sliding window is not fixed. We have to expand or shrink the window based on the problem constraints.</p><h2 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h2><p><a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/submissions/" target="_blank" rel="noopener">209. Minimum Size Subarray Sum</a><br><a href="https://leetcode-cn.com/problems/fruit-into-baskets/" target="_blank" rel="noopener">904. Fruit Into Baskets</a><br><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3. Longest Substring Without Repeating Characters</a><br><a href="https://leetcode-cn.com/problems/longest-repeating-character-replacement/" target="_blank" rel="noopener">424. Longest Repeating Character Replacement</a><br><a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/" target="_blank" rel="noopener">1004. Max Consecutive Ones III</a><br><a href="https://leetcode-cn.com/problems/permutation-in-string/" target="_blank" rel="noopener">567. Permutation in String</a><br><a href="https://leetcode-cn.com/problems/minimum-window-substring/" target="_blank" rel="noopener">76. Minimum Window Substring</a><br><a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/" target="_blank" rel="noopener">438.Find All Anagrams in a String</a><br><a href="https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words/" target="_blank" rel="noopener">30. Substring with Concatenation of All Words</a><br><a href="https://leetcode-cn.com/problems/subarrays-with-k-different-integers/" target="_blank" rel="noopener">992. Subarrays with K Different Integers</a><br><a href="https://leetcode-cn.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/" target="_blank" rel="noopener">1438. Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit</a><br><a href="https://leetcode-cn.com/problems/maximum-average-subarray-i/" target="_blank" rel="noopener">643. Maximum Average Subarray I</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Sliding Window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnionFindSet</title>
      <link href="../../p/UnionFindSet.html"/>
      <url>../../p/UnionFindSet.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnionFind</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n, nums)</span>:</span></span><br><span class="line">        self.nums = nums</span><br><span class="line">        self.parent = defaultdict(int)</span><br><span class="line">        self.size = defaultdict(int)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.nums)):</span><br><span class="line">            self.parent[i] = i</span><br><span class="line">            self.size[i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="comment"># 查找根节点，即当前元素所属的集合</span></span><br><span class="line">        r = x</span><br><span class="line">        <span class="keyword">while</span> r != self.parent[r]:</span><br><span class="line">            r = self.parent[r]</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">        <span class="comment"># if x != self.parent[x]:</span></span><br><span class="line">        <span class="comment">#     self.parent[x] = self.find(self.parent[x])</span></span><br><span class="line">        <span class="comment"># return self.parent[x]</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        x_root = self.find(x)</span><br><span class="line">        y_root = self.find(y)</span><br><span class="line">        <span class="keyword">if</span> x_root != y_root:</span><br><span class="line">            <span class="keyword">if</span> self.size[x_root] &gt; self.size[y_root]:</span><br><span class="line">                self.parent[y_root] = x_root</span><br><span class="line">                self.size[x_root] += self.size[y_root]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.parent[x_root] = y_root</span><br><span class="line">                self.size[y_root] += self.size[x_root]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查根</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(x, parent)</span>:</span></span><br><span class="line">    r = x</span><br><span class="line">    <span class="keyword">while</span> r != parent[r]:</span><br><span class="line">        r = parent[r]</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(x, y, parent,size)</span>:</span></span><br><span class="line">    x_root = find(x, parent)</span><br><span class="line">    y_root = find(y, parent)</span><br><span class="line">    <span class="comment"># 将x作为根节点</span></span><br><span class="line">    <span class="keyword">if</span> x_root != y_root:</span><br><span class="line">        <span class="keyword">if</span> size[x_root] &gt; size[y_root]:</span><br><span class="line">            parent[y_root] = x_root</span><br><span class="line">            size[x_root] += size[y_root]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            parent[x_root] = y_root</span><br><span class="line">            size[y_root] += size[x_root]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findCircleNum</span><span class="params">(self, M)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type M: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        parent = defaultdict(int)</span><br><span class="line">        size = defaultdict(int)</span><br><span class="line">        ans = set()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> M:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(M)):</span><br><span class="line">            parent[i] = i</span><br><span class="line">            size[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(M)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i, len(M[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">if</span> M[i][j] == <span class="number">1</span>:</span><br><span class="line">                    union(i, j, parent,size)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> parent:</span><br><span class="line">            ans.add(find(i, parent))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> len(ans)</span><br><span class="line"></span><br><span class="line">a = Solution()</span><br><span class="line">print(a.findCircleNum([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]]))</span><br></pre></td></tr></table></figure><h2 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h2><p><a href="https://leetcode-cn.com/problems/swim-in-rising-water/" target="_blank" rel="noopener">778. Swim in Rising Water</a><br><a href="https://leetcode-cn.com/problems/number-of-islands/" target="_blank" rel="noopener">200. Number of Islands</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> UnionFind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LFU</title>
      <link href="../../p/LFU.html"/>
      <url>../../p/LFU.html</url>
      
        <content type="html"><![CDATA[<p>Design and implement a data structure for a Least Frequently Used (LFU) cache.</p><p>Implement the LFUCache class:</p><p>LFUCache(int capacity) Initializes the object with the capacity of the data structure.<br>int get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1.<br>void put(int key, int value) Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.<br>To determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.<br>When a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it.</p><p>Input<br>[“LFUCache”, “put”, “put”, “get”, “put”, “get”, “get”, “put”, “get”, “get”, “get”]<br>[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]<br>Output<br>[null, null, null, 1, null, -1, 3, null, -1, 3, 4]</p><p>Explanation<br>// cnt(x) = the use counter for key x<br>// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)<br>LFUCache lfu = new LFUCache(2);<br>lfu.put(1, 1);   // cache=[1,_], cnt(1)=1<br>lfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1<br>lfu.get(1);      // return 1<br>                 // cache=[1,2], cnt(2)=1, cnt(1)=2<br>lfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.<br>                 // cache=[3,1], cnt(3)=1, cnt(1)=2<br>lfu.get(2);      // return -1 (not found)<br>lfu.get(3);      // return 3<br>                 // cache=[3,1], cnt(3)=2, cnt(1)=2<br>lfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.<br>                 // cache=[4,3], cnt(4)=1, cnt(3)=2<br>lfu.get(1);      // return -1 (not found)<br>lfu.get(3);      // return 3<br>                 // cache=[3,4], cnt(4)=1, cnt(3)=3<br>lfu.get(4);      // return 4<br>                 // cache=[3,4], cnt(4)=2, cnt(3)=3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key = None, val = None)</span>:</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.val = val</span><br><span class="line">        self.freq = <span class="number">1</span></span><br><span class="line">        self.prev = <span class="literal">None</span></span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DLinkedList</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.head = Node()</span><br><span class="line">        self.tail = Node()</span><br><span class="line">        self.head.next = self.tail</span><br><span class="line">        self.tail.prev = self.head</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addToHead</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        self.head.next.prev = node</span><br><span class="line">        node.next= self.head.next</span><br><span class="line">        node.prev = self.head</span><br><span class="line">        self.head.next = node</span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeTail</span><span class="params">(self)</span>:</span></span><br><span class="line">        node = self.tail.prev</span><br><span class="line">        self.removeNode(node)</span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNode</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        node.next.prev = node.prev</span><br><span class="line">        node.prev.next = node.next</span><br><span class="line">        self.size -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LFUCache</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity)</span>:</span></span><br><span class="line">        self.key_node = dict()</span><br><span class="line">        self.freq_DLinkedList = dict()</span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.minFreq = <span class="number">0</span> <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.key_node:</span><br><span class="line">            node = self.key_node[key]</span><br><span class="line">            self.increase_key_freq(key)</span><br><span class="line">            <span class="keyword">return</span> node.val</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key, val)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.capacity:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.key_node:</span><br><span class="line">            node = self.key_node[key]</span><br><span class="line">            node.val = val</span><br><span class="line">            self.increase_key_freq(key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># remove first</span></span><br><span class="line">            <span class="keyword">if</span> len(self.key_node) &gt;= self.capacity:  <span class="comment"># &gt;</span></span><br><span class="line">                <span class="comment"># self.freq_DLinkedList[self.minFreq].removeTail()</span></span><br><span class="line">                <span class="comment"># self.key_node.pop(node.key) #</span></span><br><span class="line">                self.remove_Min_freq()</span><br><span class="line">            node = Node(key, val)</span><br><span class="line">            <span class="keyword">if</span> node.freq <span class="keyword">not</span> <span class="keyword">in</span> self.freq_DLinkedList:</span><br><span class="line">                self.freq_DLinkedList[node.freq] = DLinkedList()</span><br><span class="line">            self.key_node[key] = node</span><br><span class="line">            self.freq_DLinkedList[node.freq].addToHead(node)</span><br><span class="line">            self.minFreq = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">increase_key_freq</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        node = self.key_node[key]</span><br><span class="line">        freq = node.freq</span><br><span class="line">        self.freq_DLinkedList[freq].removeNode(node)</span><br><span class="line">        node.freq += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> node.freq <span class="keyword">not</span> <span class="keyword">in</span> self.freq_DLinkedList:</span><br><span class="line">            self.freq_DLinkedList[node.freq] = DLinkedList()</span><br><span class="line">        self.freq_DLinkedList[node.freq].addToHead(node)</span><br><span class="line">        <span class="comment"># self.key_node[key] = node</span></span><br><span class="line">        <span class="keyword">if</span> self.minFreq == freq <span class="keyword">and</span> self.freq_DLinkedList[freq].size == <span class="number">0</span>:</span><br><span class="line">            self.minFreq +=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_Min_freq</span><span class="params">(self)</span>:</span></span><br><span class="line">        node = self.freq_DLinkedList[self.minFreq].removeTail()</span><br><span class="line">        self.key_node.pop(node.key)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CodingInterviews </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LRU</title>
      <link href="../../p/LRU.html"/>
      <url>../../p/LRU.html</url>
      
        <content type="html"><![CDATA[<p>Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.<br>Implement the LRUCache class:<br>LRUCache(int capacity) Initialize the LRU cache with positive size capacity.<br>int get(int key) Return the value of the key if the key exists, otherwise return -1.<br>void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.<br>Follow up:<br>Could you do get and put in O(1) time complexity?</p><p>Input<br>[“LRUCache”, “put”, “put”, “get”, “put”, “get”, “put”, “get”, “get”, “get”]<br>[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]<br>Output<br>[null, null, null, 1, null, -1, null, -1, 3, 4]<br>Explanation<br>LRUCache lRUCache = new LRUCache(2);<br>lRUCache.put(1, 1); // cache is {1=1}<br>lRUCache.put(2, 2); // cache is {1=1, 2=2}<br>lRUCache.get(1);    // return 1<br>lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}<br>lRUCache.get(2);    // returns -1 (not found)<br>lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}<br>lRUCache.get(1);    // return -1 (not found)<br>lRUCache.get(3);    // return 3<br>lRUCache.get(4);    // return 4</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key = None, value = None)</span>:</span></span><br><span class="line">        self.key = key</span><br><span class="line">        self.value = value</span><br><span class="line">        self.prev = <span class="literal">None</span></span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity)</span>:</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line">        self.head = Node()</span><br><span class="line">        self.tail = Node()</span><br><span class="line">        self.head.next = self.tail</span><br><span class="line">        self.tail.prev = self.head</span><br><span class="line">        self.cache = dict()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.cache:</span><br><span class="line">            node = self.cache[key]</span><br><span class="line">            self.moveToHead(node)</span><br><span class="line">            <span class="keyword">return</span> node.value</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.cache:</span><br><span class="line">            node = self.cache[key]</span><br><span class="line">            node.value = value</span><br><span class="line">            self.moveToHead(node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node = Node(key, value)</span><br><span class="line">            self.cache[key] = node</span><br><span class="line">            self.addToHead(node)</span><br><span class="line">            self.size += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self.size &gt; self.capacity:</span><br><span class="line">                removed = self.removeTail()</span><br><span class="line">                self.cache.pop(removed.key)</span><br><span class="line">                self.size -= <span class="number">1</span> <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">moveToHead</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        self.removeNode(node)</span><br><span class="line">        self.addToHead(node)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addToHead</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        self.head.next.prev = node</span><br><span class="line">        node.next = self.head.next</span><br><span class="line">        self.head.next = node</span><br><span class="line">        node.prev = self.head</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNode</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        node.prev.next = node.next</span><br><span class="line">        node.next.prev = node.prev</span><br><span class="line">        <span class="comment"># return node</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeTail</span><span class="params">(self)</span>:</span></span><br><span class="line">        node = self.tail.prev</span><br><span class="line">        self.removeNode(node)</span><br><span class="line">        <span class="keyword">return</span> node <span class="comment">#</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CodingInterviews </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>preSum</title>
      <link href="../../p/preSum.html"/>
      <url>../../p/preSum.html</url>
      
        <content type="html"><![CDATA[<pre><code>preSum = [0] + numsfor i in range(1, len(preSum)):    preSum[i] = preSum[i-1] + preSum[i]</code></pre><h2 id="Continuous-Subarray-Sum"><a href="#Continuous-Subarray-Sum" class="headerlink" title="Continuous Subarray Sum"></a>Continuous Subarray Sum</h2><p>Given an integer array nums and an integer k, return true if nums has a continuous subarray of size at least two whose elements sum up to a multiple of k, or false otherwise.<br>An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.<br>nums = [23,2,4,6,7], k = 6 True<br>nums = [23,2,6,4,7], k = 13 False<br>TLE:</p><pre><code>preSum = [0] + numsfor i in range(1, len(preSum)):    preSum[i] = preSum[i-1] + preSum[i]for i in range(len(preSum) - 2):    for j in range(i+2, len(preSum)):        if (preSum[j] - preSum[i]) % k == 0:            return Truereturn False</code></pre><p>(presum[j] - presum[i]) % k == 0  =&gt; presum[j] % k == presum[i] % k</p><pre><code>def checkSubarraySum(self, nums: List[int], k: int) -&gt; bool:    preSum = [0] + nums    for i in range(1, len(preSum)):        preSum[i] = preSum[i-1] + preSum[i]    modset = set()    for i in range(len(preSum) - 2):        modset.add(preSum[i] % k)        if preSum[i + 2] % k  in modset:            return True    return False</code></pre><p>Extend : the number of continuous subarray sum:</p><pre><code>def checkSubarraySum(self, nums: List[int], k: int) -&gt; bool:    preSum = [0] + nums    for i in range(1, len(preSum)):        preSum[i] = preSum[i-1] + preSum[i]    modDict = dict()    res = 0    for i in range(len(preSum) - 2):        cur = preSum[i] % k        modDict[cur] = modDict.get(cur, 0) + 1        nex = preSum[i + 2] % k        if nex  in modDict:            res += modDict[nex]    return res</code></pre><h2 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h2><p><a href="https://leetcode-cn.com/problems/continuous-subarray-sum/" target="_blank" rel="noopener">523. Continuous Subarray Sum</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> preSum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coding Interviews</title>
      <link href="../../p/point-to-offer.html"/>
      <url>../../p/point-to-offer.html</url>
      
        <content type="html"><![CDATA[<h3 id="16-Pow-x-n"><a href="#16-Pow-x-n" class="headerlink" title="16.Pow(x, n)"></a>16.Pow(x, n)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myPow</span><span class="params">(self, x: float, n: int)</span> -&gt; float:</span></span><br><span class="line">    <span class="comment">#if x == 0.0: return 0.0</span></span><br><span class="line">    <span class="keyword">if</span> math.isclose(x, <span class="number">0.0</span>): <span class="keyword">return</span> <span class="number">0.0</span></span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        x, n = <span class="number">1</span> / x, -n</span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        <span class="keyword">if</span> n &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">            res *= x</span><br><span class="line">        x *= x</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span> <span class="comment"># n &gt;&gt; 1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CodingInterviews </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux cheatsheet</title>
      <link href="../../p/linux-cheatsheet.html"/>
      <url>../../p/linux-cheatsheet.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Notes</title>
      <link href="../../p/python-notes.html"/>
      <url>../../p/python-notes.html</url>
      
        <content type="html"><![CDATA[<h3 id="Rotating-functions-in-Deque"><a href="#Rotating-functions-in-Deque" class="headerlink" title="Rotating functions in Deque"></a>Rotating functions in Deque</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import collections as col</span><br><span class="line">my_deque = col.deque(<span class="string">'AABCDDEFD'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'Dequeue: '</span> + str(my_deque)</span></span>)</span><br><span class="line"><span class="selector-id">#rotate</span> to the <span class="attribute">right</span>, <span class="number">3</span> elements</span><br><span class="line">my_deque.rotate(<span class="number">3</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'Deque after rotating:'</span> + str(my_deque)</span></span>)</span><br></pre></td></tr></table></figure><p>Deque after rotating:deque([‘E’, ‘F’, ‘D’, ‘A’, ‘A’, ‘B’, ‘C’, ‘D’, ‘D’])</p><h3 id="Decorator-MyCache"><a href="#Decorator-MyCache" class="headerlink" title="Decorator MyCache"></a>Decorator MyCache</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeit</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        func(*args)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;func.__name__&#125;</span> finished in <span class="subst">&#123;end - start&#125;</span> seconds'</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@timeit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sleep_method</span><span class="params">()</span>:</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'Done'</span>)</span><br><span class="line"></span><br><span class="line">sleep_method()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCache</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">    self.func = func</span><br><span class="line">    self.cache = dict()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> args <span class="keyword">not</span> <span class="keyword">in</span> self.cache:</span><br><span class="line">      self.cache[args] = self.func(*args)</span><br><span class="line">    <span class="keyword">return</span> self.cache[args]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@MyCache</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(fib(<span class="number">34</span>))</span><br></pre></td></tr></table></figure><h3 id="sort-dict"><a href="#sort-dict" class="headerlink" title="sort dict"></a>sort dict</h3><p>by key:<br>d = sorted(d.keys())<br>d = sorted(d.items(),key=lambda x:x[0],reverse=True)</p><p>by value:<br>d = sorted(d.values())<br>d = sorted(d.items(),key=lambda x:x[1],reverse=True)</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>One Python Craftsman</title>
      <link href="../../p/one-python-craftsman.html"/>
      <url>../../p/one-python-craftsman.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Min-Stack</title>
      <link href="../../p/Min-Stack.html"/>
      <url>../../p/Min-Stack.html</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.<br>Implement the MinStack class:<br>MinStack() initializes the stack object.<br>void push(val) pushes the element val onto the stack.<br>void pop() removes the element on the top of the stack.<br>int top() gets the top element of the stack.<br>int getMin() retrieves the minimum element in the stack.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>[“MinStack”,”push”,”push”,”push”,”getMin”,”pop”,”top”,”getMin”]<br>[[],[-2],[0],[-3],[],[],[],[]]</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>[null,null,null,null,-3,null,0,-2]</p><h3 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h3><p>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.getMin(); // return -3<br>minStack.pop();<br>minStack.top();    // return 0<br>minStack.getMin(); // return -2</p><h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints:"></a>Constraints:</h3><p>-231 &lt;= val &lt;= 231 - 1<br>Methods pop, top and getMin operations will always be called on non-empty stacks.<br>At most 3 * 104 calls will be made to push, pop, top, and getMin.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><pre><code>class MinStack:    def __init__(self):        self.stack = []        self.minStack = []    def push(self, val: int) -&gt; None:        self.stack.append(val)        if not self.minStack or val &lt;= self.minStack[-1]:            self.minStack.append(val)    def pop(self) -&gt; None:        if self.stack:            num = self.stack.pop()            if self.minStack and num == self.minStack[-1]:                self.minStack.pop()    def top(self) -&gt; int:        return self.stack[-1]    def getMin(self) -&gt; int:        return self.minStack[-1]</code></pre><p>One stack</p><pre><code>class MinStack:    def __init__(self):        self.stack = []        self.min_value = -1    def push(self, x: int) -&gt; None:        if not self.stack:            self.stack.append(0)            self.min_value = x        else:            diff = x-self.min_value            self.stack.append(diff)            self.min_value = self.min_value if diff &gt; 0 else x    def pop(self) -&gt; None:        if self.stack:            diff = self.stack.pop()            if diff &lt; 0:                top = self.min_value                self.min_value = top - diff    def top(self) -&gt; int:        return self.min_value if self.stack[-1] &lt; 0 else self.stack[-1] + self.min_value    def getMin(self) -&gt; int:        return self.min_value if self.stack else -1</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Cheatsheet</title>
      <link href="../../p/git-cheatsheet.html"/>
      <url>../../p/git-cheatsheet.html</url>
      
        <content type="html"><![CDATA[<p>delete branch  </p><pre><code>git branch -d &lt;branch&gt;git push origin --delete &lt;branch&gt;</code></pre><p>combine commits  </p><pre><code>git rebase -i HEAD~ngit push -f</code></pre><p>abandon local change:  </p><pre><code>git fetch --allgit reset --hard origin/mastergit pull</code></pre><p>init:</p><p>Git History  </p><pre><code>April 2005Linux Torvaldsreplacement for bitkeeper to manage Linux kernel source codeopen source and free softwaredistributed version controlcompatible with linux ,macOS windowsfaster than other SCMs(100times in some cases)better safeguards against data corruptiongithub launched in 2008purchased by Microsoft 2018</code></pre><p>configuration:  </p><pre><code>system : etc/gitconfig            git config --systemuser: ~/.gitconfig                git config --globalproject: my_project/.git/config   git config</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="../../p/hello-world.html"/>
      <url>../../p/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
