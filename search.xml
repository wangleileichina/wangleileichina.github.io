<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LFU</title>
      <link href="../../p/LFU.html"/>
      <url>../../p/LFU.html</url>
      
        <content type="html"><![CDATA[<p>Design and implement a data structure for a Least Frequently Used (LFU) cache.</p><p>Implement the LFUCache class:</p><p>LFUCache(int capacity) Initializes the object with the capacity of the data structure.<br>int get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1.<br>void put(int key, int value) Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.<br>To determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.<br>When a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it.</p><p>Input<br>[“LFUCache”, “put”, “put”, “get”, “put”, “get”, “get”, “put”, “get”, “get”, “get”]<br>[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]<br>Output<br>[null, null, null, 1, null, -1, 3, null, -1, 3, 4]</p><p>Explanation<br>// cnt(x) = the use counter for key x<br>// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)<br>LFUCache lfu = new LFUCache(2);<br>lfu.put(1, 1);   // cache=[1,_], cnt(1)=1<br>lfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1<br>lfu.get(1);      // return 1<br>                 // cache=[1,2], cnt(2)=1, cnt(1)=2<br>lfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.<br>                 // cache=[3,1], cnt(3)=1, cnt(1)=2<br>lfu.get(2);      // return -1 (not found)<br>lfu.get(3);      // return 3<br>                 // cache=[3,1], cnt(3)=2, cnt(1)=2<br>lfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.<br>                 // cache=[4,3], cnt(4)=1, cnt(3)=2<br>lfu.get(1);      // return -1 (not found)<br>lfu.get(3);      // return 3<br>                 // cache=[3,4], cnt(4)=1, cnt(3)=3<br>lfu.get(4);      // return 4<br>                 // cache=[3,4], cnt(4)=2, cnt(3)=3</p>]]></content>
      
      
      
        <tags>
            
            <tag> CodingInterviews </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LRU</title>
      <link href="../../p/LRU.html"/>
      <url>../../p/LRU.html</url>
      
        <content type="html"><![CDATA[<p>Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.<br>Implement the LRUCache class:<br>LRUCache(int capacity) Initialize the LRU cache with positive size capacity.<br>int get(int key) Return the value of the key if the key exists, otherwise return -1.<br>void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.<br>Follow up:<br>Could you do get and put in O(1) time complexity?</p><p>Input<br>[“LRUCache”, “put”, “put”, “get”, “put”, “get”, “put”, “get”, “get”, “get”]<br>[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]<br>Output<br>[null, null, null, 1, null, -1, null, -1, 3, 4]<br>Explanation<br>LRUCache lRUCache = new LRUCache(2);<br>lRUCache.put(1, 1); // cache is {1=1}<br>lRUCache.put(2, 2); // cache is {1=1, 2=2}<br>lRUCache.get(1);    // return 1<br>lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}<br>lRUCache.get(2);    // returns -1 (not found)<br>lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}<br>lRUCache.get(1);    // return -1 (not found)<br>lRUCache.get(3);    // return 3<br>lRUCache.get(4);    // return 4</p>]]></content>
      
      
      
        <tags>
            
            <tag> CodingInterviews </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>preSum</title>
      <link href="../../p/preSum.html"/>
      <url>../../p/preSum.html</url>
      
        <content type="html"><![CDATA[<pre><code>preSum = [0] + numsfor i in range(1, len(preSum)):    preSum[i] = preSum[i-1] + preSum[i]</code></pre><h3 id="523-Continuous-Subarray-Sum"><a href="#523-Continuous-Subarray-Sum" class="headerlink" title="523. Continuous Subarray Sum"></a>523. Continuous Subarray Sum</h3><p>Given an integer array nums and an integer k, return true if nums has a continuous subarray of size at least two whose elements sum up to a multiple of k, or false otherwise.<br>An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.<br>nums = [23,2,4,6,7], k = 6 True<br>nums = [23,2,6,4,7], k = 13 False<br>TLE:</p><pre><code>preSum = [0] + numsfor i in range(1, len(preSum)):    preSum[i] = preSum[i-1] + preSum[i]for i in range(len(preSum) - 2):    for j in range(i+2, len(preSum)):        if (preSum[j] - preSum[i]) % k == 0:            return Truereturn False</code></pre><p>(presum[j] - presum[i]) % k == 0  =&gt; presum[j] % k == presum[i] % k</p><pre><code>def checkSubarraySum(self, nums: List[int], k: int) -&gt; bool:    preSum = [0] + nums    for i in range(1, len(preSum)):        preSum[i] = preSum[i-1] + preSum[i]    modset = set()    for i in range(len(preSum) - 2):        modset.add(preSum[i] % k)        if preSum[i + 2] % k  in modset:            return True    return False</code></pre><p>Extend : the number of continuous subarray sum:</p><pre><code>def checkSubarraySum(self, nums: List[int], k: int) -&gt; bool:    preSum = [0] + nums    for i in range(1, len(preSum)):        preSum[i] = preSum[i-1] + preSum[i]    modDict = dict()    res = 0    for i in range(len(preSum) - 2):        cur = preSum[i] % k        modDict[cur] = modDict.get(cur, 0) + 1        nex = preSum[i + 2] % k        if nex  in modDict:            res += modDict[nex]    return res</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> preSum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Coding Interviews</title>
      <link href="../../p/point-to-offer.html"/>
      <url>../../p/point-to-offer.html</url>
      
        <content type="html"><![CDATA[<h3 id="16-Pow-x-n"><a href="#16-Pow-x-n" class="headerlink" title="16.Pow(x, n)"></a>16.Pow(x, n)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myPow</span><span class="params">(self, x: float, n: int)</span> -&gt; float:</span></span><br><span class="line">    <span class="comment">#if x == 0.0: return 0.0</span></span><br><span class="line">    <span class="keyword">if</span> math.isclose(x, <span class="number">0.0</span>): <span class="keyword">return</span> <span class="number">0.0</span></span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        x, n = <span class="number">1</span> / x, -n</span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        <span class="keyword">if</span> n &amp; <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">            res *= x</span><br><span class="line">        x *= x</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span> <span class="comment"># n &gt;&gt; 1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CodingInterviews </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux cheatsheet</title>
      <link href="../../p/linux-cheatsheet.html"/>
      <url>../../p/linux-cheatsheet.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Notes</title>
      <link href="../../p/python-notes.html"/>
      <url>../../p/python-notes.html</url>
      
        <content type="html"><![CDATA[<h3 id="Rotating-functions-in-Deque"><a href="#Rotating-functions-in-Deque" class="headerlink" title="Rotating functions in Deque"></a>Rotating functions in Deque</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import collections as col</span><br><span class="line">my_deque = col.deque(<span class="string">'AABCDDEFD'</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'Dequeue: '</span> + str(my_deque)</span></span>)</span><br><span class="line"><span class="selector-id">#rotate</span> to the <span class="attribute">right</span>, <span class="number">3</span> elements</span><br><span class="line">my_deque.rotate(<span class="number">3</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'Deque after rotating:'</span> + str(my_deque)</span></span>)</span><br></pre></td></tr></table></figure><p>Deque after rotating:deque([‘E’, ‘F’, ‘D’, ‘A’, ‘A’, ‘B’, ‘C’, ‘D’, ‘D’])</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>One Python Craftsman</title>
      <link href="../../p/one-python-craftsman.html"/>
      <url>../../p/one-python-craftsman.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Min-Stack</title>
      <link href="../../p/Min-Stack.html"/>
      <url>../../p/Min-Stack.html</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.<br>Implement the MinStack class:<br>MinStack() initializes the stack object.<br>void push(val) pushes the element val onto the stack.<br>void pop() removes the element on the top of the stack.<br>int top() gets the top element of the stack.<br>int getMin() retrieves the minimum element in the stack.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>[“MinStack”,”push”,”push”,”push”,”getMin”,”pop”,”top”,”getMin”]<br>[[],[-2],[0],[-3],[],[],[],[]]</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>[null,null,null,null,-3,null,0,-2]</p><h3 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h3><p>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.getMin(); // return -3<br>minStack.pop();<br>minStack.top();    // return 0<br>minStack.getMin(); // return -2</p><h3 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints:"></a>Constraints:</h3><p>-231 &lt;= val &lt;= 231 - 1<br>Methods pop, top and getMin operations will always be called on non-empty stacks.<br>At most 3 * 104 calls will be made to push, pop, top, and getMin.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h2><pre><code>class MinStack:    def __init__(self):        self.stack = []        self.minStack = []    def push(self, val: int) -&gt; None:        self.stack.append(val)        if not self.minStack or val &lt;= self.minStack[-1]:            self.minStack.append(val)    def pop(self) -&gt; None:        if self.stack:            num = self.stack.pop()            if self.minStack and num == self.minStack[-1]:                self.minStack.pop()    def top(self) -&gt; int:        return self.stack[-1]    def getMin(self) -&gt; int:        return self.minStack[-1]</code></pre><p>One stack</p><pre><code>class MinStack:    def __init__(self):        self.stack = []        self.min_value = -1    def push(self, x: int) -&gt; None:        if not self.stack:            self.stack.append(0)            self.min_value = x        else:            diff = x-self.min_value            self.stack.append(diff)            self.min_value = self.min_value if diff &gt; 0 else x    def pop(self) -&gt; None:        if self.stack:            diff = self.stack.pop()            if diff &lt; 0:                top = self.min_value                self.min_value = top - diff    def top(self) -&gt; int:        return self.min_value if self.stack[-1] &lt; 0 else self.stack[-1] + self.min_value    def getMin(self) -&gt; int:        return self.min_value if self.stack else -1</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 155 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Cheatsheet</title>
      <link href="../../p/git-cheatsheet.html"/>
      <url>../../p/git-cheatsheet.html</url>
      
        <content type="html"><![CDATA[<p>delete branch  </p><pre><code>git branch -d &lt;branch&gt;git push origin --delete &lt;branch&gt;</code></pre><p>combine commits  </p><pre><code>git rebase -i HEAD~ngit push -f</code></pre><p>abandon local change:  </p><pre><code>git fetch --allgit reset --hard origin/mastergit pull</code></pre><p>init:</p><p>Git History  </p><pre><code>April 2005Linux Torvaldsreplacement for bitkeeper to manage Linux kernel source codeopen source and free softwaredistributed version controlcompatible with linux ,macOS windowsfaster than other SCMs(100times in some cases)better safeguards against data corruptiongithub launched in 2008purchased by Microsoft 2018</code></pre><p>configuration:  </p><pre><code>system : etc/gitconfig            git config --systemuser: ~/.gitconfig                git config --globalproject: my_project/.git/config   git config</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="../../p/hello-world.html"/>
      <url>../../p/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
